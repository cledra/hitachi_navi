/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapViewerControl = This interface offers functions to control the MapViewer
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_PROXY_HPP_

#include <v4/org/genivi/navigation/mapviewer/MapViewerControlProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

template <typename ... _AttributeExtensions>
class MapViewerControlProxy
    : virtual public MapViewerControl, 
      virtual public MapViewerControlProxyBase,
      virtual public _AttributeExtensions... {
public:
    MapViewerControlProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MapViewerControlProxy();

    typedef MapViewerControl InterfaceType;



    /**
     * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast followCarModeChanged.
     */
    virtual FollowCarModeChangedEvent& getFollowCarModeChangedEvent() {
        return delegate_->getFollowCarModeChangedEvent();
    }
    /**
     * description: cameraPositionChanged = This signal is emitted when the position of the camera
     *   changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast cameraPositionChanged.
     */
    virtual CameraPositionChangedEvent& getCameraPositionChangedEvent() {
        return delegate_->getCameraPositionChangedEvent();
    }
    /**
     * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
     *   camera changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CameraHeadingChanged.
     */
    virtual CameraHeadingChangedEvent& getCameraHeadingChangedEvent() {
        return delegate_->getCameraHeadingChangedEvent();
    }
    /**
     * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
     *   changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast cameraTiltAngleChanged.
     */
    virtual CameraTiltAngleChangedEvent& getCameraTiltAngleChangedEvent() {
        return delegate_->getCameraTiltAngleChangedEvent();
    }
    /**
     * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
     *   distance from the target point changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast cameraDistanceFromTargetPointChanged.
     */
    virtual CameraDistanceFromTargetPointChangedEvent& getCameraDistanceFromTargetPointChangedEvent() {
        return delegate_->getCameraDistanceFromTargetPointChangedEvent();
    }
    /**
     * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewScaleChanged.
     */
    virtual MapViewScaleChangedEvent& getMapViewScaleChangedEvent() {
        return delegate_->getMapViewScaleChangedEvent();
    }
    /**
     * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
     *   chnages
     */
    /**
     * Returns the wrapper class that provides access to the broadcast MapViewPerspectiveChanged.
     */
    virtual MapViewPerspectiveChangedEvent& getMapViewPerspectiveChangedEvent() {
        return delegate_->getMapViewPerspectiveChangedEvent();
    }
    /**
     * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
     *   objects shown on the map changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewObjectVisibilityChanged.
     */
    virtual MapViewObjectVisibilityChangedEvent& getMapViewObjectVisibilityChangedEvent() {
        return delegate_->getMapViewObjectVisibilityChangedEvent();
    }
    /**
     * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
     *   map instance changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewBoundingBoxChanged.
     */
    virtual MapViewBoundingBoxChangedEvent& getMapViewBoundingBoxChangedEvent() {
        return delegate_->getMapViewBoundingBoxChangedEvent();
    }
    /**
     * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
     *   guarantees not to cover with other windows or user interface elements chnages
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewSaveAreaChanged.
     */
    virtual MapViewSaveAreaChangedEvent& getMapViewSaveAreaChangedEvent() {
        return delegate_->getMapViewSaveAreaChangedEvent();
    }
    /**
     * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
     *   changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewVisibilityChanged.
     */
    virtual MapViewVisibilityChangedEvent& getMapViewVisibilityChangedEvent() {
        return delegate_->getMapViewVisibilityChangedEvent();
    }
    /**
     * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
     *   level of a map instance changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewPerformanceLevelChanged.
     */
    virtual MapViewPerformanceLevelChangedEvent& getMapViewPerformanceLevelChangedEvent() {
        return delegate_->getMapViewPerformanceLevelChangedEvent();
    }
    /**
     * description: displayedRoutes = This signal is emitted when the list of displayed routes
     *   change
     */
    /**
     * Returns the wrapper class that provides access to the broadcast displayedRoutes.
     */
    virtual DisplayedRoutesEvent& getDisplayedRoutesEvent() {
        return delegate_->getDisplayedRoutesEvent();
    }
    /**
     * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
     *   POI categories on a map instance changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast poiCategoriesVisibilityChanged.
     */
    virtual PoiCategoriesVisibilityChangedEvent& getPoiCategoriesVisibilityChangedEvent() {
        return delegate_->getPoiCategoriesVisibilityChangedEvent();
    }
    /**
     * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
     *   instance changes
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapViewThemeChanged.
     */
    virtual MapViewThemeChangedEvent& getMapViewThemeChangedEvent() {
        return delegate_->getMapViewThemeChangedEvent();
    }

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: createMapViewInstance = This method creates a new map instance
     * Calls createMapViewInstance with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createMapViewInstance with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CreateMapViewInstanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
     *   instance. Only invisible map instances can be released
     * Calls releaseMapViewInstance with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void releaseMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls releaseMapViewInstance with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> releaseMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, ReleaseMapViewInstanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewType = This method returns the map type of a map instance as it was
     *   set using CreateMapViewInstance
     * Calls getMapViewType with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewType(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewType &_mapViewType, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewType with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewTypeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewTypes = This method retrieves the supported map view types
     * Calls getSupportedMapViewTypes with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewTypes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapViewType> &_mapViewTypeList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewTypes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewTypesAsync(GetSupportedMapViewTypesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setTargetPoint = This method sets the position of the point the camera is
     *   always aimed at
     * Calls setTargetPoint with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setTargetPoint with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, SetTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getTargetPoint = This method retrieves the target point position
     * Calls getTargetPoint with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getTargetPoint with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setFollowCarMode = This method sets the FollowCar mode
     * Calls setFollowCarMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setFollowCarMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, SetFollowCarModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getFollowCarMode = This method returns the current FollowCar-mode
     * Calls getFollowCarMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_followCarMode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getFollowCarMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetFollowCarModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraPosition = This method sets the coordinates of the point at which the
     *   camera must be positioned
    		Note: the camera heading will be automatically set
     *   in such a way, that the camera is aimed at the view point
     * Calls setCameraPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, SetCameraPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCameraPosition = This method returns the coordinates of the point at which
     *   the camera is positioned
     * Calls getCameraPosition with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCameraPosition with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraHeadingAngle = This method sets the map view heading angle
    		Note: the
     *   camera position will be automatically set in such a way, that it looks at the
     *   currently selected target point
     * Calls setCameraHeadingAngle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraHeadingAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraHeadingAngle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, SetCameraHeadingAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
     *   that the camera always looks at a given target
     * Calls setCameraHeadingToTarget with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraHeadingToTarget(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraHeadingToTarget with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingToTargetAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, SetCameraHeadingToTargetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
     *   that the camera always looks in the direction in which the car is moving
     * Calls setCameraHeadingTrackUp with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraHeadingTrackUp(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraHeadingTrackUp with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingTrackUpAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, SetCameraHeadingTrackUpAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCameraHeading = This method returns the current camera heading
     * Calls getCameraHeading with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCameraHeading(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::HeadingType &_headingType, int32_t &_headingAngle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCameraHeading with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCameraHeadingAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeadingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraTiltAngle = This method sets the camera tilt angle
     * Calls setCameraTiltAngle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraTiltAngle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, SetCameraTiltAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCameraTiltAngle = This method returns the camera tilt angle
     * Calls getCameraTiltAngle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_tilt, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCameraTiltAngle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraTiltAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraRollAngle = This method sets the camera roll angle
     * Calls setCameraRollAngle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraRollAngle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, SetCameraRollAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCameraRollAngle = This method returns the camera roll angle
     * Calls getCameraRollAngle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_roll, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCameraRollAngle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraRollAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
     *   distance from the target point
     * Calls setCameraDistanceFromTargetPoint with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraDistanceFromTargetPoint with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, SetCameraDistanceFromTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
     *   distance from the target point
     * Calls getCameraDistanceFromTargetPoint with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_distance, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCameraDistanceFromTargetPoint with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraDistanceFromTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewScaleMode = This method sets the scaling mode.
     * Calls setMapViewScaleMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewScaleMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, SetMapViewScaleModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewScaleMode = This method gets the scaling mode.
     * Calls getMapViewScaleMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapScaleMode &_scaleMode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewScaleMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
     * Calls getSupportedMapViewScaleModes with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewScaleModes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScaleMode> &_scaleModeList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewScaleModes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewScaleModesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewScaleModesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: addMapViewScaleChangedListener = This method adds a listener which is notified
     *   when map view scale changes.
     * Calls addMapViewScaleChangedListener with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls addMapViewScaleChangedListener with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addMapViewScaleChangedListenerAsync(AddMapViewScaleChangedListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: removeMapViewScaleChangedListener = This method removes a listener which is
     *   notified when map view scale changes.
     * Calls removeMapViewScaleChangedListener with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void removeMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls removeMapViewScaleChangedListener with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> removeMapViewScaleChangedListenerAsync(RemoveMapViewScaleChangedListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setCameraHeight = This method sets the camera height
     * Calls setCameraHeight with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCameraHeight with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, SetCameraHeightAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getCameraHeight = This method gets the camera height
     * Calls getCameraHeight with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_height, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCameraHeight with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeightAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewPerspective = This method sets the map perspective
     * Calls setMapViewPerspective with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewPerspective with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, SetMapViewPerspectiveAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewPerspective = This method returns the current map perspective
     * Calls getMapViewPerspective with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapPerspective &_perspective, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewPerspective with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerspectiveAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
     *   perspectives
     * Calls getSupportedMapViewPerspectives with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewPerspectives(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapPerspective> &_perspectiveList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewPerspectives with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerspectivesAsync(GetSupportedMapViewPerspectivesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewObjectVisibility = This method specifies the type of objects to show
     *   on the map.
     * Calls setMapViewObjectVisibility with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewObjectVisibility with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, SetMapViewObjectVisibilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
     *   map.
     * Calls getMapViewObjectVisibility with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapObjectVisibility &_objectVisibilityList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewObjectVisibility with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewObjectVisibilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
     *   visibilities.
     * Calls getSupportedMapViewObjectVisibilities with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewObjectVisibilities(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapObject> &_objectVisibilityList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewObjectVisibilities with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewObjectVisibilitiesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewObjectVisibilitiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getScaleList = This method returns a list of supported map scales
     * Calls getScaleList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getScaleList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScale> &_scaleList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getScaleList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getScaleListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetScaleListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
     * Calls setMapViewScale with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewScale with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, SetMapViewScaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
     *   value with respect to the currently set ScaleID
     * Calls setMapViewScaleByDelta with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewScaleByDelta(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewScaleByDelta with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByDeltaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, SetMapViewScaleByDeltaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
     *   the number of meters that a pixel represents
     * Calls setMapViewScaleByMetersPerPixel with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewScaleByMetersPerPixel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewScaleByMetersPerPixel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByMetersPerPixelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, SetMapViewScaleByMetersPerPixelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewScale = This method returns the currently used map scale
     * Calls getMapViewScale with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_scaleID, MapViewerControl::MapScaleType &_isMinMax, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewScale with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewBoundingBox = This method sets the map bounding box
     * Calls setMapViewBoundingBox with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewBoundingBox with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, SetMapViewBoundingBoxAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewBoundingBox = This method returns the bounding box of a given map
     *   instance
     * Calls getMapViewBoundingBox with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewBoundingBox with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewBoundingBoxAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     * Calls setMapViewSaveArea with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewSaveArea with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, SetMapViewSaveAreaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     * Calls getMapViewSaveArea with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewArea &_saveArea, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewSaveArea with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewSaveAreaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewPan = This method pans a given map instance
     * Calls setMapViewPan with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewPan with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, SetMapViewPanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewPan
     * Calls getMapViewPan with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewPan with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, GetMapViewPanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewRotation = This method rotates the map
     * Calls setMapViewRotation with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewRotation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, SetMapViewRotationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewRotation = This method is particularly interesting for debugging
     *   purposes
     * Calls getMapViewRotation with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_rotationAngle, int32_t &_rotationAnglePerFrame, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewRotation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewRotationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewVisibilityMode = This method sets the current visibility mode
     * Calls setMapViewVisibilityMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewVisibilityMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, SetMapViewVisibilityModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewVisibilityMode = This method returns the current visibility mode
     * Calls getMapViewVisibilityMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Visibility &_visibilityMode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewVisibilityMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewVisibilityModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
     *   mapview visibility modes
     * Calls getSupportedMapViewVisibilityModes with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewVisibilityModes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Visibility> &_visibilityModeList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewVisibilityModes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewVisibilityModesAsync(GetSupportedMapViewVisibilityModesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
     *   map instance
     * Calls setMapViewPerformanceLevel with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewPerformanceLevel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, SetMapViewPerformanceLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
     *   given map instance
     * Calls getMapViewPerformanceLevel with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Level &_performanceLevel, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewPerformanceLevel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerformanceLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
     *   perfomance levels
     * Calls getSupportedMapViewPerformanceLevels with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewPerformanceLevels(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Level> &_performanceLevelList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewPerformanceLevels with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerformanceLevelsAsync(GetSupportedMapViewPerformanceLevelsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: displayRoute = This method visualizes one of the calculated routes
     * Calls displayRoute with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void displayRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls displayRoute with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> displayRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, DisplayRouteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: hideRoute = This method hides one of the visible routes
     * Calls hideRoute with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void hideRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls hideRoute with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> hideRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, HideRouteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getDisplayedRoutes = This method returns a list of displayed routes
     * Calls getDisplayedRoutes with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplayedRoutes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::DisplayedRoute> &_displayedRoutes, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplayedRoutes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplayedRoutesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedRoutesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
     * Calls getPoiCategoriesVisible with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPoiCategoriesVisible with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetPoiCategoriesVisibleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map.
                       Any specified category that until now
     *   was displayed with scale limits is now displayed without limits.
     * Calls setPoiCategoriesVisible with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPoiCategoriesVisible with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesVisibleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map, where the POI's are only displayed in a specific range
     *   of scales.
                       Any specified category that until now was
     *   displayed without scale limits is now displayed with limits.
     * Calls setPoiCategoriesVisibleWithinLimits with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPoiCategoriesVisibleWithinLimits(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPoiCategoriesVisibleWithinLimits with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleWithinLimitsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, SetPoiCategoriesVisibleWithinLimitsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
     *   categories displayed on the map.
     * Calls setPoiCategoriesNotVisible with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setPoiCategoriesNotVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setPoiCategoriesNotVisible with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesNotVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesNotVisibleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
     *   map.
     * Calls setTrafficIncidentsVisibility with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setTrafficIncidentsVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setTrafficIncidentsVisibility with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setTrafficIncidentsVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, SetTrafficIncidentsVisibilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setMapViewTheme = This method configures the theme of a given map view instance
     * Calls setMapViewTheme with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setMapViewTheme with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, SetMapViewThemeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getMapViewTheme = This method returns the current theme of a given map view
     *   instance
     * Calls getMapViewTheme with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapTheme &_mapViewTheme, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMapViewTheme with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewThemeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
     * Calls getSupportedMapViewThemes with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedMapViewThemes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapTheme> &_mapViewThemeList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedMapViewThemes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewThemesAsync(GetSupportedMapViewThemesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
     *   geographical coordinates
     * Calls convertPixelCoordsToGeoCoords with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void convertPixelCoordsToGeoCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls convertPixelCoordsToGeoCoords with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> convertPixelCoordsToGeoCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, ConvertPixelCoordsToGeoCoordsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
     *   into pixel coordinates
     * Calls convertGeoCoordsToPixelCoords with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void convertGeoCoordsToPixelCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls convertGeoCoordsToPixelCoords with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> convertGeoCoordsToPixelCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, ConvertGeoCoordsToPixelCoordsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: displayCustomElements = This method visualizes a set of custom elements on the
     *   map
     * Calls displayCustomElements with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void displayCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls displayCustomElements with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> displayCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, DisplayCustomElementsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: hideCustomElements = This method hides a set of custom elements which were
     *   visualized by DisplayCustomElements
     * Calls hideCustomElements with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void hideCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls hideCustomElements with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> hideCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, HideCustomElementsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getDisplayedCustomElements = This method retrieves the visualized custom
     *   elements on the map
     * Calls getDisplayedCustomElements with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplayedCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::tCustomElementDict &_customElements, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplayedCustomElements with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplayedCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedCustomElementsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: selectElementsOnMap = This method selects elements on the map view which are at
     *   the position specified by user input
     * Calls selectElementsOnMap with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void selectElementsOnMap(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::SelectedMapElement> &_selectedElements, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls selectElementsOnMap with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> selectElementsOnMapAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, SelectElementsOnMapAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MapViewerControlProxyBase> delegate_;
};

typedef MapViewerControlProxy<> MapViewerControlProxyDefault;


//
// MapViewerControlProxy Implementation
//
template <typename ... _AttributeExtensions>
MapViewerControlProxy<_AttributeExtensions...>::MapViewerControlProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MapViewerControlProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MapViewerControlProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MapViewerControlProxy<_AttributeExtensions...>::~MapViewerControlProxy() {
}

/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_callback, _info);
}
/**
 * description: createMapViewInstance = This method creates a new map instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::createMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const CommonAPI::CallInfo *_info) {
    if (!_mapViewType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->createMapViewInstance(_sessionHandle, _mapViewSize, _mapViewType, _internalCallStatus, _mapViewInstanceHandle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::createMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CreateMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mapViewType.validate()) {
        ::v4::org::genivi::navigation::NavigationTypes::Handle mapViewInstanceHandle = 0ul;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, mapViewInstanceHandle);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->createMapViewInstanceAsync(_sessionHandle, _mapViewSize, _mapViewType, _callback, _info);
}
/**
 * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
 *   instance. Only invisible map instances can be released
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::releaseMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->releaseMapViewInstance(_sessionHandle, _mapViewInstanceHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::releaseMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, ReleaseMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->releaseMapViewInstanceAsync(_sessionHandle, _mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getMapViewType = This method returns the map type of a map instance as it was
 *   set using CreateMapViewInstance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewType(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewType &_mapViewType, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewType(_mapViewInstanceHandle, _internalCallStatus, _mapViewType, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewTypeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewTypeAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewTypes = This method retrieves the supported map view types
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewTypes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapViewType> &_mapViewTypeList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewTypes(_internalCallStatus, _mapViewTypeList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewTypesAsync(GetSupportedMapViewTypesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewTypesAsync(_callback, _info);
}
/**
 * description: setTargetPoint = This method sets the position of the point the camera is
 *   always aimed at
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setTargetPoint(_sessionHandle, _mapViewInstanceHandle, _targetPoint, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, SetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setTargetPointAsync(_sessionHandle, _mapViewInstanceHandle, _targetPoint, _callback, _info);
}
/**
 * description: getTargetPoint = This method retrieves the target point position
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, const CommonAPI::CallInfo *_info) {
    delegate_->getTargetPoint(_mapViewInstanceHandle, _internalCallStatus, _targetPoint, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getTargetPointAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setFollowCarMode = This method sets the FollowCar mode
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setFollowCarMode(_sessionHandle, _mapViewInstanceHandle, _followCarMode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, SetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setFollowCarModeAsync(_sessionHandle, _mapViewInstanceHandle, _followCarMode, _callback, _info);
}
/**
 * description: getFollowCarMode = This method returns the current FollowCar-mode
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_followCarMode, const CommonAPI::CallInfo *_info) {
    delegate_->getFollowCarMode(_mapViewInstanceHandle, _internalCallStatus, _followCarMode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getFollowCarModeAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setCameraPosition = This method sets the coordinates of the point at which the
 *   camera must be positioned
		Note: the camera heading will be automatically set
 *   in such a way, that the camera is aimed at the view point
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraPosition(_sessionHandle, _mapViewInstanceHandle, _position, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, SetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraPositionAsync(_sessionHandle, _mapViewInstanceHandle, _position, _callback, _info);
}
/**
 * description: getCameraPosition = This method returns the coordinates of the point at which
 *   the camera is positioned
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, const CommonAPI::CallInfo *_info) {
    delegate_->getCameraPosition(_mapViewInstanceHandle, _internalCallStatus, _position, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCameraPositionAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setCameraHeadingAngle = This method sets the map view heading angle
		Note: the
 *   camera position will be automatically set in such a way, that it looks at the
 *   currently selected target point
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraHeadingAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraHeadingAngle(_sessionHandle, _mapViewInstanceHandle, _heading, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraHeadingAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, SetCameraHeadingAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraHeadingAngleAsync(_sessionHandle, _mapViewInstanceHandle, _heading, _callback, _info);
}
/**
 * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
 *   that the camera always looks at a given target
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraHeadingToTarget(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraHeadingToTarget(_sessionHandle, _mapViewInstanceHandle, _target, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraHeadingToTargetAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, SetCameraHeadingToTargetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraHeadingToTargetAsync(_sessionHandle, _mapViewInstanceHandle, _target, _callback, _info);
}
/**
 * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
 *   that the camera always looks in the direction in which the car is moving
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraHeadingTrackUp(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraHeadingTrackUp(_sessionHandle, _mapViewInstanceHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraHeadingTrackUpAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, SetCameraHeadingTrackUpAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraHeadingTrackUpAsync(_sessionHandle, _mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getCameraHeading = This method returns the current camera heading
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getCameraHeading(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::HeadingType &_headingType, int32_t &_headingAngle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, const CommonAPI::CallInfo *_info) {
    delegate_->getCameraHeading(_mapViewInstanceHandle, _internalCallStatus, _headingType, _headingAngle, _target, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getCameraHeadingAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeadingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCameraHeadingAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setCameraTiltAngle = This method sets the camera tilt angle
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraTiltAngle(_sessionHandle, _mapViewInstanceHandle, _tilt, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, SetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraTiltAngleAsync(_sessionHandle, _mapViewInstanceHandle, _tilt, _callback, _info);
}
/**
 * description: getCameraTiltAngle = This method returns the camera tilt angle
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_tilt, const CommonAPI::CallInfo *_info) {
    delegate_->getCameraTiltAngle(_mapViewInstanceHandle, _internalCallStatus, _tilt, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCameraTiltAngleAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setCameraRollAngle = This method sets the camera roll angle
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraRollAngle(_sessionHandle, _mapViewInstanceHandle, _roll, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, SetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraRollAngleAsync(_sessionHandle, _mapViewInstanceHandle, _roll, _callback, _info);
}
/**
 * description: getCameraRollAngle = This method returns the camera roll angle
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_roll, const CommonAPI::CallInfo *_info) {
    delegate_->getCameraRollAngle(_mapViewInstanceHandle, _internalCallStatus, _roll, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCameraRollAngleAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
 *   distance from the target point
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraDistanceFromTargetPoint(_sessionHandle, _mapViewInstanceHandle, _distance, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, SetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraDistanceFromTargetPointAsync(_sessionHandle, _mapViewInstanceHandle, _distance, _callback, _info);
}
/**
 * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
 *   distance from the target point
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_distance, const CommonAPI::CallInfo *_info) {
    delegate_->getCameraDistanceFromTargetPoint(_mapViewInstanceHandle, _internalCallStatus, _distance, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCameraDistanceFromTargetPointAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewScaleMode = This method sets the scaling mode.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_scaleMode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMapViewScaleMode(_sessionHandle, _mapViewInstanceHandle, _scaleMode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, SetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_scaleMode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMapViewScaleModeAsync(_sessionHandle, _mapViewInstanceHandle, _scaleMode, _callback, _info);
}
/**
 * description: getMapViewScaleMode = This method gets the scaling mode.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapScaleMode &_scaleMode, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewScaleMode(_mapViewInstanceHandle, _internalCallStatus, _scaleMode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewScaleModeAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewScaleModes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScaleMode> &_scaleModeList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewScaleModes(_mapViewInstanceHandle, _internalCallStatus, _scaleModeList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewScaleModesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewScaleModesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewScaleModesAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: addMapViewScaleChangedListener = This method adds a listener which is notified
 *   when map view scale changes.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::addMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->addMapViewScaleChangedListener(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::addMapViewScaleChangedListenerAsync(AddMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->addMapViewScaleChangedListenerAsync(_callback, _info);
}
/**
 * description: removeMapViewScaleChangedListener = This method removes a listener which is
 *   notified when map view scale changes.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::removeMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->removeMapViewScaleChangedListener(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::removeMapViewScaleChangedListenerAsync(RemoveMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->removeMapViewScaleChangedListenerAsync(_callback, _info);
}
/**
 * description: setCameraHeight = This method sets the camera height
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCameraHeight(_sessionHandle, _mapViewInstanceHandle, _height, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, SetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCameraHeightAsync(_sessionHandle, _mapViewInstanceHandle, _height, _callback, _info);
}
/**
 * description: getCameraHeight = This method gets the camera height
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_height, const CommonAPI::CallInfo *_info) {
    delegate_->getCameraHeight(_mapViewInstanceHandle, _internalCallStatus, _height, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCameraHeightAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewPerspective = This method sets the map perspective
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_perspective.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMapViewPerspective(_sessionHandle, _mapViewInstanceHandle, _perspective, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, SetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_perspective.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMapViewPerspectiveAsync(_sessionHandle, _mapViewInstanceHandle, _perspective, _callback, _info);
}
/**
 * description: getMapViewPerspective = This method returns the current map perspective
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapPerspective &_perspective, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewPerspective(_mapViewInstanceHandle, _internalCallStatus, _perspective, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewPerspectiveAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
 *   perspectives
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewPerspectives(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapPerspective> &_perspectiveList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewPerspectives(_internalCallStatus, _perspectiveList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewPerspectivesAsync(GetSupportedMapViewPerspectivesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewPerspectivesAsync(_callback, _info);
}
/**
 * description: setMapViewObjectVisibility = This method specifies the type of objects to show
 *   on the map.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewObjectVisibility(_sessionHandle, _mapViewInstanceHandle, _objectVisibilityList, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, SetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewObjectVisibilityAsync(_sessionHandle, _mapViewInstanceHandle, _objectVisibilityList, _callback, _info);
}
/**
 * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
 *   map.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapObjectVisibility &_objectVisibilityList, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewObjectVisibility(_mapViewInstanceHandle, _internalCallStatus, _objectVisibilityList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewObjectVisibilityAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
 *   visibilities.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewObjectVisibilities(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapObject> &_objectVisibilityList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewObjectVisibilities(_mapViewInstanceHandle, _internalCallStatus, _objectVisibilityList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewObjectVisibilitiesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewObjectVisibilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewObjectVisibilitiesAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getScaleList = This method returns a list of supported map scales
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getScaleList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScale> &_scaleList, const CommonAPI::CallInfo *_info) {
    delegate_->getScaleList(_mapViewInstanceHandle, _internalCallStatus, _scaleList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getScaleListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetScaleListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getScaleListAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewScale(_sessionHandle, _mapViewInstanceHandle, _scaleID, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, SetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewScaleAsync(_sessionHandle, _mapViewInstanceHandle, _scaleID, _callback, _info);
}
/**
 * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
 *   value with respect to the currently set ScaleID
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleByDelta(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewScaleByDelta(_sessionHandle, _mapViewInstanceHandle, _scaleDelta, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleByDeltaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, SetMapViewScaleByDeltaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewScaleByDeltaAsync(_sessionHandle, _mapViewInstanceHandle, _scaleDelta, _callback, _info);
}
/**
 * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
 *   the number of meters that a pixel represents
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleByMetersPerPixel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewScaleByMetersPerPixel(_sessionHandle, _mapViewInstanceHandle, _metersPerPixel, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewScaleByMetersPerPixelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, SetMapViewScaleByMetersPerPixelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewScaleByMetersPerPixelAsync(_sessionHandle, _mapViewInstanceHandle, _metersPerPixel, _callback, _info);
}
/**
 * description: getMapViewScale = This method returns the currently used map scale
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_scaleID, MapViewerControl::MapScaleType &_isMinMax, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewScale(_mapViewInstanceHandle, _internalCallStatus, _scaleID, _isMinMax, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewScaleAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewBoundingBox = This method sets the map bounding box
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewBoundingBox(_sessionHandle, _mapViewInstanceHandle, _boundingBox, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, SetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewBoundingBoxAsync(_sessionHandle, _mapViewInstanceHandle, _boundingBox, _callback, _info);
}
/**
 * description: getMapViewBoundingBox = This method returns the bounding box of a given map
 *   instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewBoundingBox(_mapViewInstanceHandle, _internalCallStatus, _boundingBox, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewBoundingBoxAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewSaveArea(_sessionHandle, _mapViewInstanceHandle, _saveArea, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, SetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewSaveAreaAsync(_sessionHandle, _mapViewInstanceHandle, _saveArea, _callback, _info);
}
/**
 * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewArea &_saveArea, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewSaveArea(_mapViewInstanceHandle, _internalCallStatus, _saveArea, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewSaveAreaAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewPan = This method pans a given map instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_panningAction.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMapViewPan(_sessionHandle, _mapViewInstanceHandle, _panningAction, _pixelCoordinates, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, SetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_panningAction.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMapViewPanAsync(_sessionHandle, _mapViewInstanceHandle, _panningAction, _pixelCoordinates, _callback, _info);
}
/**
 * description: getMapViewPan
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info) {
    if (!_valueToReturn.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->getMapViewPan(_mapViewInstanceHandle, _valueToReturn, _internalCallStatus, _pixelCoordinates, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, GetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_valueToReturn.validate()) {
        std::vector<MapViewerControl::Pixel> pixelCoordinates = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, pixelCoordinates);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->getMapViewPanAsync(_mapViewInstanceHandle, _valueToReturn, _callback, _info);
}
/**
 * description: setMapViewRotation = This method rotates the map
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setMapViewRotation(_sessionHandle, _mapViewInstanceHandle, _rotationAngle, _rotationAnglePerSecond, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, SetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setMapViewRotationAsync(_sessionHandle, _mapViewInstanceHandle, _rotationAngle, _rotationAnglePerSecond, _callback, _info);
}
/**
 * description: getMapViewRotation = This method is particularly interesting for debugging
 *   purposes
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_rotationAngle, int32_t &_rotationAnglePerFrame, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewRotation(_mapViewInstanceHandle, _internalCallStatus, _rotationAngle, _rotationAnglePerFrame, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewRotationAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setMapViewVisibilityMode = This method sets the current visibility mode
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_visibilityMode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMapViewVisibilityMode(_sessionHandle, _mapViewInstanceHandle, _visibilityMode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, SetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_visibilityMode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMapViewVisibilityModeAsync(_sessionHandle, _mapViewInstanceHandle, _visibilityMode, _callback, _info);
}
/**
 * description: getMapViewVisibilityMode = This method returns the current visibility mode
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Visibility &_visibilityMode, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewVisibilityMode(_mapViewInstanceHandle, _internalCallStatus, _visibilityMode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewVisibilityModeAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
 *   mapview visibility modes
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewVisibilityModes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Visibility> &_visibilityModeList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewVisibilityModes(_internalCallStatus, _visibilityModeList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewVisibilityModesAsync(GetSupportedMapViewVisibilityModesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewVisibilityModesAsync(_callback, _info);
}
/**
 * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
 *   map instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_performanceLevel.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMapViewPerformanceLevel(_sessionHandle, _mapViewInstanceHandle, _performanceLevel, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, SetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_performanceLevel.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMapViewPerformanceLevelAsync(_sessionHandle, _mapViewInstanceHandle, _performanceLevel, _callback, _info);
}
/**
 * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
 *   given map instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Level &_performanceLevel, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewPerformanceLevel(_mapViewInstanceHandle, _internalCallStatus, _performanceLevel, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewPerformanceLevelAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
 *   perfomance levels
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewPerformanceLevels(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Level> &_performanceLevelList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewPerformanceLevels(_internalCallStatus, _performanceLevelList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewPerformanceLevelsAsync(GetSupportedMapViewPerformanceLevelsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewPerformanceLevelsAsync(_callback, _info);
}
/**
 * description: displayRoute = This method visualizes one of the calculated routes
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::displayRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->displayRoute(_sessionHandle, _mapViewInstanceHandle, _routeHandle, _highlighted, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::displayRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, DisplayRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->displayRouteAsync(_sessionHandle, _mapViewInstanceHandle, _routeHandle, _highlighted, _callback, _info);
}
/**
 * description: hideRoute = This method hides one of the visible routes
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::hideRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->hideRoute(_sessionHandle, _mapViewInstanceHandle, _routeHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::hideRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, HideRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->hideRouteAsync(_sessionHandle, _mapViewInstanceHandle, _routeHandle, _callback, _info);
}
/**
 * description: getDisplayedRoutes = This method returns a list of displayed routes
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getDisplayedRoutes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::DisplayedRoute> &_displayedRoutes, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplayedRoutes(_mapViewInstanceHandle, _internalCallStatus, _displayedRoutes, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getDisplayedRoutesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedRoutesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplayedRoutesAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const CommonAPI::CallInfo *_info) {
    delegate_->getPoiCategoriesVisible(_mapViewInstanceHandle, _internalCallStatus, _poiCategoryIds, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getPoiCategoriesVisibleAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map.
                   Any specified category that until now
 *   was displayed with scale limits is now displayed without limits.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setPoiCategoriesVisible(_sessionHandle, _mapViewInstanceHandle, _poiCategoryIds, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPoiCategoriesVisibleAsync(_sessionHandle, _mapViewInstanceHandle, _poiCategoryIds, _callback, _info);
}
/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map, where the POI's are only displayed in a specific range
 *   of scales.
                   Any specified category that until now was
 *   displayed without scale limits is now displayed with limits.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setPoiCategoriesVisibleWithinLimits(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setPoiCategoriesVisibleWithinLimits(_sessionHandle, _mapViewInstanceHandle, _poiCategoryIds, _minScaleID, _maxScaleID, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setPoiCategoriesVisibleWithinLimitsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, SetPoiCategoriesVisibleWithinLimitsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPoiCategoriesVisibleWithinLimitsAsync(_sessionHandle, _mapViewInstanceHandle, _poiCategoryIds, _minScaleID, _maxScaleID, _callback, _info);
}
/**
 * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
 *   categories displayed on the map.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setPoiCategoriesNotVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setPoiCategoriesNotVisible(_sessionHandle, _mapViewInstanceHandle, _poiCategoryIds, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setPoiCategoriesNotVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesNotVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setPoiCategoriesNotVisibleAsync(_sessionHandle, _mapViewInstanceHandle, _poiCategoryIds, _callback, _info);
}
/**
 * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
 *   map.
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setTrafficIncidentsVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setTrafficIncidentsVisibility(_sessionHandle, _mapViewInstanceHandle, _visible, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setTrafficIncidentsVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, SetTrafficIncidentsVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setTrafficIncidentsVisibilityAsync(_sessionHandle, _mapViewInstanceHandle, _visible, _callback, _info);
}
/**
 * description: setMapViewTheme = This method configures the theme of a given map view instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::setMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_mapViewTheme.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setMapViewTheme(_sessionHandle, _mapViewInstanceHandle, _mapViewTheme, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::setMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, SetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_mapViewTheme.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setMapViewThemeAsync(_sessionHandle, _mapViewInstanceHandle, _mapViewTheme, _callback, _info);
}
/**
 * description: getMapViewTheme = This method returns the current theme of a given map view
 *   instance
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapTheme &_mapViewTheme, const CommonAPI::CallInfo *_info) {
    delegate_->getMapViewTheme(_mapViewInstanceHandle, _internalCallStatus, _mapViewTheme, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMapViewThemeAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewThemes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapTheme> &_mapViewThemeList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedMapViewThemes(_internalCallStatus, _mapViewThemeList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getSupportedMapViewThemesAsync(GetSupportedMapViewThemesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedMapViewThemesAsync(_callback, _info);
}
/**
 * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
 *   geographical coordinates
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::convertPixelCoordsToGeoCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, const CommonAPI::CallInfo *_info) {
    delegate_->convertPixelCoordsToGeoCoords(_sessionHandle, _mapViewInstanceHandle, _pixelCoordinates, _internalCallStatus, _geoCoordinates, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::convertPixelCoordsToGeoCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, ConvertPixelCoordsToGeoCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->convertPixelCoordsToGeoCoordsAsync(_sessionHandle, _mapViewInstanceHandle, _pixelCoordinates, _callback, _info);
}
/**
 * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
 *   into pixel coordinates
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::convertGeoCoordsToPixelCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info) {
    delegate_->convertGeoCoordsToPixelCoords(_sessionHandle, _mapViewInstanceHandle, _geoCoordinates, _internalCallStatus, _pixelCoordinates, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::convertGeoCoordsToPixelCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, ConvertGeoCoordsToPixelCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->convertGeoCoordsToPixelCoordsAsync(_sessionHandle, _mapViewInstanceHandle, _geoCoordinates, _callback, _info);
}
/**
 * description: displayCustomElements = This method visualizes a set of custom elements on the
 *   map
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::displayCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, const CommonAPI::CallInfo *_info) {
    delegate_->displayCustomElements(_sessionHandle, _mapViewInstanceHandle, _customElements, _internalCallStatus, _customElemenHandles, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::displayCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, DisplayCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->displayCustomElementsAsync(_sessionHandle, _mapViewInstanceHandle, _customElements, _callback, _info);
}
/**
 * description: hideCustomElements = This method hides a set of custom elements which were
 *   visualized by DisplayCustomElements
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::hideCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->hideCustomElements(_sessionHandle, _mapViewInstanceHandle, _customElemenHandles, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::hideCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, HideCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->hideCustomElementsAsync(_sessionHandle, _mapViewInstanceHandle, _customElemenHandles, _callback, _info);
}
/**
 * description: getDisplayedCustomElements = This method retrieves the visualized custom
 *   elements on the map
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::getDisplayedCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::tCustomElementDict &_customElements, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplayedCustomElements(_mapViewInstanceHandle, _internalCallStatus, _customElements, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::getDisplayedCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplayedCustomElementsAsync(_mapViewInstanceHandle, _callback, _info);
}
/**
 * description: selectElementsOnMap = This method selects elements on the map view which are at
 *   the position specified by user input
 */
template <typename ... _AttributeExtensions>
void MapViewerControlProxy<_AttributeExtensions...>::selectElementsOnMap(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::SelectedMapElement> &_selectedElements, const CommonAPI::CallInfo *_info) {
    delegate_->selectElementsOnMap(_mapViewInstanceHandle, _pixelCoordinate, _selectableTypes, _maxNumberOfSelectedElements, _internalCallStatus, _selectedElements, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MapViewerControlProxy<_AttributeExtensions...>::selectElementsOnMapAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, SelectElementsOnMapAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->selectElementsOnMapAsync(_mapViewInstanceHandle, _pixelCoordinate, _selectableTypes, _maxNumberOfSelectedElements, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MapViewerControlProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MapViewerControlProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MapViewerControlProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MapViewerControlProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MapViewerControlProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_PROXY_HPP_
