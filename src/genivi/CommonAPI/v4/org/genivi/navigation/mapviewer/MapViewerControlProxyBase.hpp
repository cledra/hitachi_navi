/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapViewerControl = This interface offers functions to control the MapViewer
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_PROXY_BASE_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_PROXY_BASE_HPP_

#include <v4/org/genivi/navigation/mapviewer/MapViewerControl.hpp>


#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

class MapViewerControlProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, bool
    > FollowCarModeChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D
    > CameraPositionChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType, int32_t
    > CameraHeadingChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t
    > CameraTiltAngleChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t
    > CameraDistanceFromTargetPointChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, uint8_t, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType
    > MapViewScaleChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective
    > MapViewPerspectiveChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility
    > MapViewObjectVisibilityChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Rectangle
    > MapViewBoundingBoxChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea
    > MapViewSaveAreaChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility
    > MapViewVisibilityChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level
    > MapViewPerformanceLevelChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute>
    > DisplayedRoutesEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>, bool, uint8_t, uint8_t
    > PoiCategoriesVisibilityChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme
    > MapViewThemeChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::NavigationTypes::Handle&)> CreateMapViewInstanceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> ReleaseMapViewInstanceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::MapViewType&)> GetMapViewTypeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::MapViewType>&)> GetSupportedMapViewTypesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetTargetPointAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D&)> GetTargetPointAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetFollowCarModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> GetFollowCarModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraPositionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D&)> GetCameraPositionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraHeadingAngleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraHeadingToTargetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraHeadingTrackUpAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::HeadingType&, const int32_t&, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D&)> GetCameraHeadingAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraTiltAngleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> GetCameraTiltAngleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraRollAngleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> GetCameraRollAngleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraDistanceFromTargetPointAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&)> GetCameraDistanceFromTargetPointAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewScaleModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::MapScaleMode&)> GetMapViewScaleModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::MapScaleMode>&)> GetSupportedMapViewScaleModesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> AddMapViewScaleChangedListenerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RemoveMapViewScaleChangedListenerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCameraHeightAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&)> GetCameraHeightAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewPerspectiveAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::MapPerspective&)> GetMapViewPerspectiveAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::MapPerspective>&)> GetSupportedMapViewPerspectivesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewObjectVisibilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::MapObjectVisibility&)> GetMapViewObjectVisibilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::MapObject>&)> GetSupportedMapViewObjectVisibilitiesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::MapScale>&)> GetScaleListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewScaleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewScaleByDeltaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewScaleByMetersPerPixelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&, const MapViewerControl::MapScaleType&)> GetMapViewScaleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewBoundingBoxAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle&)> GetMapViewBoundingBoxAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewSaveAreaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::MapViewArea&)> GetMapViewSaveAreaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewPanAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::Pixel>&)> GetMapViewPanAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewRotationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&, const int32_t&)> GetMapViewRotationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewVisibilityModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::Visibility&)> GetMapViewVisibilityModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::Visibility>&)> GetSupportedMapViewVisibilityModesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewPerformanceLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::Level&)> GetMapViewPerformanceLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::Level>&)> GetSupportedMapViewPerformanceLevelsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> DisplayRouteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> HideRouteAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::DisplayedRoute>&)> GetDisplayedRoutesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::CommonTypes::CategoryID>&)> GetPoiCategoriesVisibleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetPoiCategoriesVisibleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetPoiCategoriesVisibleWithinLimitsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetPoiCategoriesNotVisibleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetTrafficIncidentsVisibilityAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetMapViewThemeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::MapTheme&)> GetMapViewThemeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::MapTheme>&)> GetSupportedMapViewThemesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>&)> ConvertPixelCoordsToGeoCoordsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::Pixel>&)> ConvertGeoCoordsToPixelCoordsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>&)> DisplayCustomElementsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> HideCustomElementsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapViewerControl::tCustomElementDict&)> GetDisplayedCustomElementsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<MapViewerControl::SelectedMapElement>&)> SelectElementsOnMapAsyncCallback;


    /**
     * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
     */
    virtual FollowCarModeChangedEvent& getFollowCarModeChangedEvent() = 0;
    /**
     * description: cameraPositionChanged = This signal is emitted when the position of the camera
     *   changes
     */
    virtual CameraPositionChangedEvent& getCameraPositionChangedEvent() = 0;
    /**
     * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
     *   camera changes
     */
    virtual CameraHeadingChangedEvent& getCameraHeadingChangedEvent() = 0;
    /**
     * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
     *   changes
     */
    virtual CameraTiltAngleChangedEvent& getCameraTiltAngleChangedEvent() = 0;
    /**
     * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
     *   distance from the target point changes
     */
    virtual CameraDistanceFromTargetPointChangedEvent& getCameraDistanceFromTargetPointChangedEvent() = 0;
    /**
     * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
     */
    virtual MapViewScaleChangedEvent& getMapViewScaleChangedEvent() = 0;
    /**
     * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
     *   chnages
     */
    virtual MapViewPerspectiveChangedEvent& getMapViewPerspectiveChangedEvent() = 0;
    /**
     * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
     *   objects shown on the map changes
     */
    virtual MapViewObjectVisibilityChangedEvent& getMapViewObjectVisibilityChangedEvent() = 0;
    /**
     * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
     *   map instance changes
     */
    virtual MapViewBoundingBoxChangedEvent& getMapViewBoundingBoxChangedEvent() = 0;
    /**
     * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
     *   guarantees not to cover with other windows or user interface elements chnages
     */
    virtual MapViewSaveAreaChangedEvent& getMapViewSaveAreaChangedEvent() = 0;
    /**
     * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
     *   changes
     */
    virtual MapViewVisibilityChangedEvent& getMapViewVisibilityChangedEvent() = 0;
    /**
     * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
     *   level of a map instance changes
     */
    virtual MapViewPerformanceLevelChangedEvent& getMapViewPerformanceLevelChangedEvent() = 0;
    /**
     * description: displayedRoutes = This signal is emitted when the list of displayed routes
     *   change
     */
    virtual DisplayedRoutesEvent& getDisplayedRoutesEvent() = 0;
    /**
     * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
     *   POI categories on a map instance changes
     */
    virtual PoiCategoriesVisibilityChangedEvent& getPoiCategoriesVisibilityChangedEvent() = 0;
    /**
     * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
     *   instance changes
     */
    virtual MapViewThemeChangedEvent& getMapViewThemeChangedEvent() = 0;

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: createMapViewInstance = This method creates a new map instance
     */
    virtual void createMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> createMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CreateMapViewInstanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
     *   instance. Only invisible map instances can be released
     */
    virtual void releaseMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> releaseMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, ReleaseMapViewInstanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewType = This method returns the map type of a map instance as it was
     *   set using CreateMapViewInstance
     */
    virtual void getMapViewType(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewType &_mapViewType, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewTypeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewTypes = This method retrieves the supported map view types
     */
    virtual void getSupportedMapViewTypes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapViewType> &_mapViewTypeList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewTypesAsync(GetSupportedMapViewTypesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setTargetPoint = This method sets the position of the point the camera is
     *   always aimed at
     */
    virtual void setTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, SetTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getTargetPoint = This method retrieves the target point position
     */
    virtual void getTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setFollowCarMode = This method sets the FollowCar mode
     */
    virtual void setFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, SetFollowCarModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getFollowCarMode = This method returns the current FollowCar-mode
     */
    virtual void getFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_followCarMode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetFollowCarModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraPosition = This method sets the coordinates of the point at which the
     *   camera must be positioned
    		Note: the camera heading will be automatically set
     *   in such a way, that the camera is aimed at the view point
     */
    virtual void setCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, SetCameraPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCameraPosition = This method returns the coordinates of the point at which
     *   the camera is positioned
     */
    virtual void getCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraHeadingAngle = This method sets the map view heading angle
    		Note: the
     *   camera position will be automatically set in such a way, that it looks at the
     *   currently selected target point
     */
    virtual void setCameraHeadingAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, SetCameraHeadingAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
     *   that the camera always looks at a given target
     */
    virtual void setCameraHeadingToTarget(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingToTargetAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, SetCameraHeadingToTargetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
     *   that the camera always looks in the direction in which the car is moving
     */
    virtual void setCameraHeadingTrackUp(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingTrackUpAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, SetCameraHeadingTrackUpAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCameraHeading = This method returns the current camera heading
     */
    virtual void getCameraHeading(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::HeadingType &_headingType, int32_t &_headingAngle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCameraHeadingAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeadingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraTiltAngle = This method sets the camera tilt angle
     */
    virtual void setCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, SetCameraTiltAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCameraTiltAngle = This method returns the camera tilt angle
     */
    virtual void getCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_tilt, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraTiltAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraRollAngle = This method sets the camera roll angle
     */
    virtual void setCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, SetCameraRollAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCameraRollAngle = This method returns the camera roll angle
     */
    virtual void getCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_roll, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraRollAngleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
     *   distance from the target point
     */
    virtual void setCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, SetCameraDistanceFromTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
     *   distance from the target point
     */
    virtual void getCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_distance, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraDistanceFromTargetPointAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewScaleMode = This method sets the scaling mode.
     */
    virtual void setMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, SetMapViewScaleModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewScaleMode = This method gets the scaling mode.
     */
    virtual void getMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapScaleMode &_scaleMode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
     */
    virtual void getSupportedMapViewScaleModes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScaleMode> &_scaleModeList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewScaleModesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewScaleModesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: addMapViewScaleChangedListener = This method adds a listener which is notified
     *   when map view scale changes.
     */
    virtual void addMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addMapViewScaleChangedListenerAsync(AddMapViewScaleChangedListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: removeMapViewScaleChangedListener = This method removes a listener which is
     *   notified when map view scale changes.
     */
    virtual void removeMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removeMapViewScaleChangedListenerAsync(RemoveMapViewScaleChangedListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setCameraHeight = This method sets the camera height
     */
    virtual void setCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, SetCameraHeightAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getCameraHeight = This method gets the camera height
     */
    virtual void getCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_height, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeightAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewPerspective = This method sets the map perspective
     */
    virtual void setMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, SetMapViewPerspectiveAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewPerspective = This method returns the current map perspective
     */
    virtual void getMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapPerspective &_perspective, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerspectiveAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
     *   perspectives
     */
    virtual void getSupportedMapViewPerspectives(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapPerspective> &_perspectiveList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerspectivesAsync(GetSupportedMapViewPerspectivesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewObjectVisibility = This method specifies the type of objects to show
     *   on the map.
     */
    virtual void setMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, SetMapViewObjectVisibilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
     *   map.
     */
    virtual void getMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapObjectVisibility &_objectVisibilityList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewObjectVisibilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
     *   visibilities.
     */
    virtual void getSupportedMapViewObjectVisibilities(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapObject> &_objectVisibilityList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewObjectVisibilitiesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewObjectVisibilitiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getScaleList = This method returns a list of supported map scales
     */
    virtual void getScaleList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScale> &_scaleList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getScaleListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetScaleListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
     */
    virtual void setMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, SetMapViewScaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
     *   value with respect to the currently set ScaleID
     */
    virtual void setMapViewScaleByDelta(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByDeltaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, SetMapViewScaleByDeltaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
     *   the number of meters that a pixel represents
     */
    virtual void setMapViewScaleByMetersPerPixel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByMetersPerPixelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, SetMapViewScaleByMetersPerPixelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewScale = This method returns the currently used map scale
     */
    virtual void getMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_scaleID, MapViewerControl::MapScaleType &_isMinMax, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewBoundingBox = This method sets the map bounding box
     */
    virtual void setMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, SetMapViewBoundingBoxAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewBoundingBox = This method returns the bounding box of a given map
     *   instance
     */
    virtual void getMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewBoundingBoxAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    virtual void setMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, SetMapViewSaveAreaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    virtual void getMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewArea &_saveArea, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewSaveAreaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewPan = This method pans a given map instance
     */
    virtual void setMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, SetMapViewPanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewPan
     */
    virtual void getMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, GetMapViewPanAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewRotation = This method rotates the map
     */
    virtual void setMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, SetMapViewRotationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewRotation = This method is particularly interesting for debugging
     *   purposes
     */
    virtual void getMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_rotationAngle, int32_t &_rotationAnglePerFrame, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewRotationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewVisibilityMode = This method sets the current visibility mode
     */
    virtual void setMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, SetMapViewVisibilityModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewVisibilityMode = This method returns the current visibility mode
     */
    virtual void getMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Visibility &_visibilityMode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewVisibilityModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
     *   mapview visibility modes
     */
    virtual void getSupportedMapViewVisibilityModes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Visibility> &_visibilityModeList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewVisibilityModesAsync(GetSupportedMapViewVisibilityModesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
     *   map instance
     */
    virtual void setMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, SetMapViewPerformanceLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
     *   given map instance
     */
    virtual void getMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Level &_performanceLevel, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerformanceLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
     *   perfomance levels
     */
    virtual void getSupportedMapViewPerformanceLevels(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Level> &_performanceLevelList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerformanceLevelsAsync(GetSupportedMapViewPerformanceLevelsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: displayRoute = This method visualizes one of the calculated routes
     */
    virtual void displayRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> displayRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, DisplayRouteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: hideRoute = This method hides one of the visible routes
     */
    virtual void hideRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hideRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, HideRouteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getDisplayedRoutes = This method returns a list of displayed routes
     */
    virtual void getDisplayedRoutes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::DisplayedRoute> &_displayedRoutes, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDisplayedRoutesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedRoutesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
     */
    virtual void getPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetPoiCategoriesVisibleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map.
                       Any specified category that until now
     *   was displayed with scale limits is now displayed without limits.
     */
    virtual void setPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesVisibleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map, where the POI's are only displayed in a specific range
     *   of scales.
                       Any specified category that until now was
     *   displayed without scale limits is now displayed with limits.
     */
    virtual void setPoiCategoriesVisibleWithinLimits(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleWithinLimitsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, SetPoiCategoriesVisibleWithinLimitsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
     *   categories displayed on the map.
     */
    virtual void setPoiCategoriesNotVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesNotVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesNotVisibleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
     *   map.
     */
    virtual void setTrafficIncidentsVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setTrafficIncidentsVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, SetTrafficIncidentsVisibilityAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setMapViewTheme = This method configures the theme of a given map view instance
     */
    virtual void setMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, SetMapViewThemeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getMapViewTheme = This method returns the current theme of a given map view
     *   instance
     */
    virtual void getMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapTheme &_mapViewTheme, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewThemeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
     */
    virtual void getSupportedMapViewThemes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapTheme> &_mapViewThemeList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewThemesAsync(GetSupportedMapViewThemesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
     *   geographical coordinates
     */
    virtual void convertPixelCoordsToGeoCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> convertPixelCoordsToGeoCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, ConvertPixelCoordsToGeoCoordsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
     *   into pixel coordinates
     */
    virtual void convertGeoCoordsToPixelCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> convertGeoCoordsToPixelCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, ConvertGeoCoordsToPixelCoordsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: displayCustomElements = This method visualizes a set of custom elements on the
     *   map
     */
    virtual void displayCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> displayCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, DisplayCustomElementsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: hideCustomElements = This method hides a set of custom elements which were
     *   visualized by DisplayCustomElements
     */
    virtual void hideCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hideCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, HideCustomElementsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getDisplayedCustomElements = This method retrieves the visualized custom
     *   elements on the map
     */
    virtual void getDisplayedCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::tCustomElementDict &_customElements, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDisplayedCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedCustomElementsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: selectElementsOnMap = This method selects elements on the map view which are at
     *   the position specified by user input
     */
    virtual void selectElementsOnMap(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::SelectedMapElement> &_selectedElements, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> selectElementsOnMapAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, SelectElementsOnMapAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_PROXY_BASE_HPP_
