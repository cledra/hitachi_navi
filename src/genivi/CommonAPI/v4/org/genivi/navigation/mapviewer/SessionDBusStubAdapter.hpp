/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the navigation core session
 *   functionality of a navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Session_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Session_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/mapviewer/SessionStub.hpp>
#include "v4/org/genivi/navigation/mapviewer/SessionDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

typedef CommonAPI::DBus::DBusStubAdapterHelper<SessionStub> SessionDBusStubAdapterHelper;

class SessionDBusStubAdapterInternal
    : public virtual SessionStubAdapter,
      public SessionDBusStubAdapterHelper
{
public:
    SessionDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~SessionDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return Session::getInterface();
    }


    /**
     * description: sessionDeleted = This signal is emitted when a session is deleted
     */
    void fireSessionDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& sessionHandle);


    const SessionDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::mapviewer::SessionStub,
        CommonAPI::Version
        > getSessionInterfaceVersionStubDispatcher;



/**
 * description: This method returns the API version .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: createSession = This method creates a new session and retrieves a handle .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<std::string>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > createSessionStubDispatcher;
/**
 * description: deleteSession = This method deletes a session and its associated resources .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > deleteSessionStubDispatcher;
/**
 * description: This method returns whether a given session handle is available or not (for
 *   example because it was deleted) .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::SessionStatus>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getSessionStatusStubDispatcher;
/**
 * description: This method returns a list of all available sessions .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Session>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::SessionDeployment_t>>
    
    > getAllSessionsStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    SessionDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class SessionDBusStubAdapter
    : public SessionDBusStubAdapterInternal,
      public std::enable_shared_from_this<SessionDBusStubAdapter> {
public:
    SessionDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          SessionDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Session_DBUS_STUB_ADAPTER_HPP_
