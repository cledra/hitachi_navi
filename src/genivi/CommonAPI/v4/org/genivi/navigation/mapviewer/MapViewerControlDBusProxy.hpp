/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapViewerControl = This interface offers functions to control the MapViewer
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_DBUS_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_DBUS_PROXY_HPP_

#include <v4/org/genivi/navigation/mapviewer/MapViewerControlProxyBase.hpp>
#include "v4/org/genivi/navigation/mapviewer/MapViewerControlDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

class MapViewerControlDBusProxy
    : virtual public MapViewerControlProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MapViewerControlDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MapViewerControlDBusProxy() { }


    virtual FollowCarModeChangedEvent& getFollowCarModeChangedEvent();
    virtual CameraPositionChangedEvent& getCameraPositionChangedEvent();
    virtual CameraHeadingChangedEvent& getCameraHeadingChangedEvent();
    virtual CameraTiltAngleChangedEvent& getCameraTiltAngleChangedEvent();
    virtual CameraDistanceFromTargetPointChangedEvent& getCameraDistanceFromTargetPointChangedEvent();
    virtual MapViewScaleChangedEvent& getMapViewScaleChangedEvent();
    virtual MapViewPerspectiveChangedEvent& getMapViewPerspectiveChangedEvent();
    virtual MapViewObjectVisibilityChangedEvent& getMapViewObjectVisibilityChangedEvent();
    virtual MapViewBoundingBoxChangedEvent& getMapViewBoundingBoxChangedEvent();
    virtual MapViewSaveAreaChangedEvent& getMapViewSaveAreaChangedEvent();
    virtual MapViewVisibilityChangedEvent& getMapViewVisibilityChangedEvent();
    virtual MapViewPerformanceLevelChangedEvent& getMapViewPerformanceLevelChangedEvent();
    virtual DisplayedRoutesEvent& getDisplayedRoutesEvent();
    virtual PoiCategoriesVisibilityChangedEvent& getPoiCategoriesVisibilityChangedEvent();
    virtual MapViewThemeChangedEvent& getMapViewThemeChangedEvent();

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: createMapViewInstance = This method creates a new map instance
     */
    virtual void createMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> createMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CreateMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
     *   instance. Only invisible map instances can be released
     */
    virtual void releaseMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> releaseMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, ReleaseMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewType = This method returns the map type of a map instance as it was
     *   set using CreateMapViewInstance
     */
    virtual void getMapViewType(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewType &_mapViewType, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewTypeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewTypes = This method retrieves the supported map view types
     */
    virtual void getSupportedMapViewTypes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapViewType> &_mapViewTypeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewTypesAsync(GetSupportedMapViewTypesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setTargetPoint = This method sets the position of the point the camera is
     *   always aimed at
     */
    virtual void setTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, SetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getTargetPoint = This method retrieves the target point position
     */
    virtual void getTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setFollowCarMode = This method sets the FollowCar mode
     */
    virtual void setFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, SetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getFollowCarMode = This method returns the current FollowCar-mode
     */
    virtual void getFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_followCarMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraPosition = This method sets the coordinates of the point at which the
     *   camera must be positioned
    		Note: the camera heading will be automatically set
     *   in such a way, that the camera is aimed at the view point
     */
    virtual void setCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, SetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraPosition = This method returns the coordinates of the point at which
     *   the camera is positioned
     */
    virtual void getCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeadingAngle = This method sets the map view heading angle
    		Note: the
     *   camera position will be automatically set in such a way, that it looks at the
     *   currently selected target point
     */
    virtual void setCameraHeadingAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, SetCameraHeadingAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
     *   that the camera always looks at a given target
     */
    virtual void setCameraHeadingToTarget(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingToTargetAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, SetCameraHeadingToTargetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
     *   that the camera always looks in the direction in which the car is moving
     */
    virtual void setCameraHeadingTrackUp(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeadingTrackUpAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, SetCameraHeadingTrackUpAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraHeading = This method returns the current camera heading
     */
    virtual void getCameraHeading(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::HeadingType &_headingType, int32_t &_headingAngle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraHeadingAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeadingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraTiltAngle = This method sets the camera tilt angle
     */
    virtual void setCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, SetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraTiltAngle = This method returns the camera tilt angle
     */
    virtual void getCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_tilt, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraRollAngle = This method sets the camera roll angle
     */
    virtual void setCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, SetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraRollAngle = This method returns the camera roll angle
     */
    virtual void getCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_roll, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
     *   distance from the target point
     */
    virtual void setCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, SetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
     *   distance from the target point
     */
    virtual void getCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_distance, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScaleMode = This method sets the scaling mode.
     */
    virtual void setMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, SetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewScaleMode = This method gets the scaling mode.
     */
    virtual void getMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapScaleMode &_scaleMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
     */
    virtual void getSupportedMapViewScaleModes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScaleMode> &_scaleModeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewScaleModesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewScaleModesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: addMapViewScaleChangedListener = This method adds a listener which is notified
     *   when map view scale changes.
     */
    virtual void addMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addMapViewScaleChangedListenerAsync(AddMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: removeMapViewScaleChangedListener = This method removes a listener which is
     *   notified when map view scale changes.
     */
    virtual void removeMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> removeMapViewScaleChangedListenerAsync(RemoveMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setCameraHeight = This method sets the camera height
     */
    virtual void setCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, SetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getCameraHeight = This method gets the camera height
     */
    virtual void getCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_height, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewPerspective = This method sets the map perspective
     */
    virtual void setMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, SetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewPerspective = This method returns the current map perspective
     */
    virtual void getMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapPerspective &_perspective, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
     *   perspectives
     */
    virtual void getSupportedMapViewPerspectives(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapPerspective> &_perspectiveList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerspectivesAsync(GetSupportedMapViewPerspectivesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewObjectVisibility = This method specifies the type of objects to show
     *   on the map.
     */
    virtual void setMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, SetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
     *   map.
     */
    virtual void getMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapObjectVisibility &_objectVisibilityList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
     *   visibilities.
     */
    virtual void getSupportedMapViewObjectVisibilities(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapObject> &_objectVisibilityList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewObjectVisibilitiesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewObjectVisibilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getScaleList = This method returns a list of supported map scales
     */
    virtual void getScaleList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScale> &_scaleList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getScaleListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetScaleListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
     */
    virtual void setMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, SetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
     *   value with respect to the currently set ScaleID
     */
    virtual void setMapViewScaleByDelta(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByDeltaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, SetMapViewScaleByDeltaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
     *   the number of meters that a pixel represents
     */
    virtual void setMapViewScaleByMetersPerPixel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewScaleByMetersPerPixelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, SetMapViewScaleByMetersPerPixelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewScale = This method returns the currently used map scale
     */
    virtual void getMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_scaleID, MapViewerControl::MapScaleType &_isMinMax, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewBoundingBox = This method sets the map bounding box
     */
    virtual void setMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, SetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewBoundingBox = This method returns the bounding box of a given map
     *   instance
     */
    virtual void getMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    virtual void setMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, SetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    virtual void getMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewArea &_saveArea, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewPan = This method pans a given map instance
     */
    virtual void setMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, SetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewPan
     */
    virtual void getMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, GetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewRotation = This method rotates the map
     */
    virtual void setMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, SetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewRotation = This method is particularly interesting for debugging
     *   purposes
     */
    virtual void getMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_rotationAngle, int32_t &_rotationAnglePerFrame, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewVisibilityMode = This method sets the current visibility mode
     */
    virtual void setMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, SetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewVisibilityMode = This method returns the current visibility mode
     */
    virtual void getMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Visibility &_visibilityMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
     *   mapview visibility modes
     */
    virtual void getSupportedMapViewVisibilityModes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Visibility> &_visibilityModeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewVisibilityModesAsync(GetSupportedMapViewVisibilityModesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
     *   map instance
     */
    virtual void setMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, SetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
     *   given map instance
     */
    virtual void getMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Level &_performanceLevel, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
     *   perfomance levels
     */
    virtual void getSupportedMapViewPerformanceLevels(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Level> &_performanceLevelList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewPerformanceLevelsAsync(GetSupportedMapViewPerformanceLevelsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: displayRoute = This method visualizes one of the calculated routes
     */
    virtual void displayRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> displayRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, DisplayRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: hideRoute = This method hides one of the visible routes
     */
    virtual void hideRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> hideRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, HideRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplayedRoutes = This method returns a list of displayed routes
     */
    virtual void getDisplayedRoutes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::DisplayedRoute> &_displayedRoutes, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplayedRoutesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedRoutesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
     */
    virtual void getPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map.
                       Any specified category that until now
     *   was displayed with scale limits is now displayed without limits.
     */
    virtual void setPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map, where the POI's are only displayed in a specific range
     *   of scales.
                       Any specified category that until now was
     *   displayed without scale limits is now displayed with limits.
     */
    virtual void setPoiCategoriesVisibleWithinLimits(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesVisibleWithinLimitsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, SetPoiCategoriesVisibleWithinLimitsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
     *   categories displayed on the map.
     */
    virtual void setPoiCategoriesNotVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPoiCategoriesNotVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesNotVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
     *   map.
     */
    virtual void setTrafficIncidentsVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTrafficIncidentsVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, SetTrafficIncidentsVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setMapViewTheme = This method configures the theme of a given map view instance
     */
    virtual void setMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, SetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getMapViewTheme = This method returns the current theme of a given map view
     *   instance
     */
    virtual void getMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapTheme &_mapViewTheme, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
     */
    virtual void getSupportedMapViewThemes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapTheme> &_mapViewThemeList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedMapViewThemesAsync(GetSupportedMapViewThemesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
     *   geographical coordinates
     */
    virtual void convertPixelCoordsToGeoCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> convertPixelCoordsToGeoCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, ConvertPixelCoordsToGeoCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
     *   into pixel coordinates
     */
    virtual void convertGeoCoordsToPixelCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> convertGeoCoordsToPixelCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, ConvertGeoCoordsToPixelCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: displayCustomElements = This method visualizes a set of custom elements on the
     *   map
     */
    virtual void displayCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> displayCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, DisplayCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: hideCustomElements = This method hides a set of custom elements which were
     *   visualized by DisplayCustomElements
     */
    virtual void hideCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> hideCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, HideCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplayedCustomElements = This method retrieves the visualized custom
     *   elements on the map
     */
    virtual void getDisplayedCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::tCustomElementDict &_customElements, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplayedCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: selectElementsOnMap = This method selects elements on the map view which are at
     *   the position specified by user input
     */
    virtual void selectElementsOnMap(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::SelectedMapElement> &_selectedElements, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> selectElementsOnMapAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, SelectElementsOnMapAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<FollowCarModeChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> followCarModeChanged_;
    CommonAPI::DBus::DBusEvent<CameraPositionChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>> cameraPositionChanged_;
    CommonAPI::DBus::DBusEvent<CameraHeadingChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> cameraHeadingChanged_;
    CommonAPI::DBus::DBusEvent<CameraTiltAngleChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> cameraTiltAngleChanged_;
    CommonAPI::DBus::DBusEvent<CameraDistanceFromTargetPointChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>> cameraDistanceFromTargetPointChanged_;
    CommonAPI::DBus::DBusEvent<MapViewScaleChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType, CommonAPI::EmptyDeployment>> mapViewScaleChanged_;
    CommonAPI::DBus::DBusEvent<MapViewPerspectiveChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment>> mapViewPerspectiveChanged_;
    CommonAPI::DBus::DBusEvent<MapViewObjectVisibilityChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t>> mapViewObjectVisibilityChanged_;
    CommonAPI::DBus::DBusEvent<MapViewBoundingBoxChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>> mapViewBoundingBoxChanged_;
    CommonAPI::DBus::DBusEvent<MapViewSaveAreaChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t>> mapViewSaveAreaChanged_;
    CommonAPI::DBus::DBusEvent<MapViewVisibilityChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility, CommonAPI::EmptyDeployment>> mapViewVisibilityChanged_;
    CommonAPI::DBus::DBusEvent<MapViewPerformanceLevelChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level, CommonAPI::EmptyDeployment>> mapViewPerformanceLevelChanged_;
    CommonAPI::DBus::DBusEvent<DisplayedRoutesEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>> displayedRoutes_;
    CommonAPI::DBus::DBusEvent<PoiCategoriesVisibilityChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>> poiCategoriesVisibilityChanged_;
    CommonAPI::DBus::DBusEvent<MapViewThemeChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme, CommonAPI::EmptyDeployment>> mapViewThemeChanged_;

};

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_DBUS_PROXY_HPP_

