/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the navigation core session
 *   functionality of a navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Session_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Session_PROXY_HPP_

#include <v4/org/genivi/navigation/mapviewer/SessionProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

template <typename ... _AttributeExtensions>
class SessionProxy
    : virtual public Session, 
      virtual public SessionProxyBase,
      virtual public _AttributeExtensions... {
public:
    SessionProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SessionProxy();

    typedef Session InterfaceType;



    /**
     * description: sessionDeleted = This signal is emitted when a session is deleted
     */
    /**
     * Returns the wrapper class that provides access to the broadcast sessionDeleted.
     */
    virtual SessionDeletedEvent& getSessionDeletedEvent() {
        return delegate_->getSessionDeletedEvent();
    }

    /**
     * description: This method returns the API version .
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: createSession = This method creates a new session and retrieves a handle .
     * Calls createSession with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createSession(const std::string &_clientApp, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createSession with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createSessionAsync(const std::string &_clientApp, CreateSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: deleteSession = This method deletes a session and its associated resources .
     * Calls deleteSession with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteSession(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteSession with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteSessionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, DeleteSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method returns whether a given session handle is available or not (for
     *   example because it was deleted) .
     * Calls getSessionStatus with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSessionStatus(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::SessionStatus &_sessionStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSessionStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSessionStatusAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, GetSessionStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method returns a list of all available sessions .
     * Calls getAllSessions with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAllSessions(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Session> &_sessionsList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAllSessions with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAllSessionsAsync(GetAllSessionsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<SessionProxyBase> delegate_;
};

typedef SessionProxy<> SessionProxyDefault;


//
// SessionProxy Implementation
//
template <typename ... _AttributeExtensions>
SessionProxy<_AttributeExtensions...>::SessionProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<SessionProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<SessionProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SessionProxy<_AttributeExtensions...>::~SessionProxy() {
}

/**
 * description: This method returns the API version .
 */
template <typename ... _AttributeExtensions>
void SessionProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SessionProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_callback, _info);
}
/**
 * description: createSession = This method creates a new session and retrieves a handle .
 */
template <typename ... _AttributeExtensions>
void SessionProxy<_AttributeExtensions...>::createSession(const std::string &_clientApp, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const CommonAPI::CallInfo *_info) {
    delegate_->createSession(_clientApp, _internalCallStatus, _sessionHandle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SessionProxy<_AttributeExtensions...>::createSessionAsync(const std::string &_clientApp, CreateSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createSessionAsync(_clientApp, _callback, _info);
}
/**
 * description: deleteSession = This method deletes a session and its associated resources .
 */
template <typename ... _AttributeExtensions>
void SessionProxy<_AttributeExtensions...>::deleteSession(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->deleteSession(_sessionHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SessionProxy<_AttributeExtensions...>::deleteSessionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, DeleteSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteSessionAsync(_sessionHandle, _callback, _info);
}
/**
 * description: This method returns whether a given session handle is available or not (for
 *   example because it was deleted) .
 */
template <typename ... _AttributeExtensions>
void SessionProxy<_AttributeExtensions...>::getSessionStatus(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::SessionStatus &_sessionStatus, const CommonAPI::CallInfo *_info) {
    delegate_->getSessionStatus(_sessionHandle, _internalCallStatus, _sessionStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SessionProxy<_AttributeExtensions...>::getSessionStatusAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, GetSessionStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSessionStatusAsync(_sessionHandle, _callback, _info);
}
/**
 * description: This method returns a list of all available sessions .
 */
template <typename ... _AttributeExtensions>
void SessionProxy<_AttributeExtensions...>::getAllSessions(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Session> &_sessionsList, const CommonAPI::CallInfo *_info) {
    delegate_->getAllSessions(_internalCallStatus, _sessionsList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SessionProxy<_AttributeExtensions...>::getAllSessionsAsync(GetAllSessionsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAllSessionsAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SessionProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SessionProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SessionProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SessionProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SessionProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Session_PROXY_HPP_
