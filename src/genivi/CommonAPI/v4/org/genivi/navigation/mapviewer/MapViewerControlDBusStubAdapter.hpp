/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapViewerControl = This interface offers functions to control the MapViewer
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/mapviewer/MapViewerControlStub.hpp>
#include "v4/org/genivi/navigation/mapviewer/MapViewerControlDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/mapviewer/MapViewerControlDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

typedef CommonAPI::DBus::DBusStubAdapterHelper<MapViewerControlStub> MapViewerControlDBusStubAdapterHelper;

class MapViewerControlDBusStubAdapterInternal
    : public virtual MapViewerControlStubAdapter,
      public MapViewerControlDBusStubAdapterHelper
{
public:
    MapViewerControlDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~MapViewerControlDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return MapViewerControl::getInterface();
    }


    /**
     * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
     */
    void fireFollowCarModeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const bool& followCarMode);
    /**
     * description: cameraPositionChanged = This signal is emitted when the position of the camera
     *   changes
     */
    void fireCameraPositionChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D& targetPoint);
    /**
     * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
     *   camera changes
     */
    void fireCameraHeadingChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType& headingType, const int32_t& headingAngle);
    /**
     * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
     *   changes
     */
    void fireCameraTiltAngleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const int32_t& tilt);
    /**
     * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
     *   distance from the target point changes
     */
    void fireCameraDistanceFromTargetPointChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const uint32_t& distance);
    /**
     * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
     */
    void fireMapViewScaleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const uint8_t& scaleID, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType& isMinMax);
    /**
     * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
     *   chnages
     */
    void fireMapViewPerspectiveChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective& perspective);
    /**
     * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
     *   objects shown on the map changes
     */
    void fireMapViewObjectVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility& objectVisibilityList);
    /**
     * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
     *   map instance changes
     */
    void fireMapViewBoundingBoxChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle& boundingBox);
    /**
     * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
     *   guarantees not to cover with other windows or user interface elements chnages
     */
    void fireMapViewSaveAreaChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea& saveArea);
    /**
     * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
     *   changes
     */
    void fireMapViewVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility& visibilityMode);
    /**
     * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
     *   level of a map instance changes
     */
    void fireMapViewPerformanceLevelChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level& performanceLevel);
    /**
     * description: displayedRoutes = This signal is emitted when the list of displayed routes
     *   change
     */
    void fireDisplayedRoutesEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute>& displayedRoutes);
    /**
     * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
     *   POI categories on a map instance changes
     */
    void firePoiCategoriesVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID>& poiCategoryIds, const bool& visible, const uint8_t& minScaleID, const uint8_t& maxScaleID);
    /**
     * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
     *   instance changes
     */
    void fireMapViewThemeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme& mapViewTheme);


    const MapViewerControlDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
        CommonAPI::Version
        > getMapViewerControlInterfaceVersionStubDispatcher;



/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: createMapViewInstance = This method creates a new map instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Dimension, MapViewerControl::MapViewType>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::EmptyDeployment, MapViewerControl_::DimensionDeployment_t, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > createMapViewInstanceStubDispatcher;
/**
 * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
 *   instance. Only invisible map instances can be released
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > releaseMapViewInstanceStubDispatcher;
/**
 * description: getMapViewType = This method returns the map type of a map instance as it was
 *   set using CreateMapViewInstance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapViewType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getMapViewTypeStubDispatcher;
/**
 * description: getSupportedMapViewTypes = This method retrieves the supported map view types
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::MapViewType>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewTypesStubDispatcher;
/**
 * description: setTargetPoint = This method sets the position of the point the camera is
 *   always aimed at
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>,
    std::tuple<>
    
    > setTargetPointStubDispatcher;
/**
 * description: getTargetPoint = This method retrieves the target point position
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
    
    > getTargetPointStubDispatcher;
/**
 * description: setFollowCarMode = This method sets the FollowCar mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setFollowCarModeStubDispatcher;
/**
 * description: getFollowCarMode = This method returns the current FollowCar-mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<bool>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getFollowCarModeStubDispatcher;
/**
 * description: setCameraPosition = This method sets the coordinates of the point at which the
 *   camera must be positioned
		Note: the camera heading will be automatically set
 *   in such a way, that the camera is aimed at the view point
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>,
    std::tuple<>
    
    > setCameraPositionStubDispatcher;
/**
 * description: getCameraPosition = This method returns the coordinates of the point at which
 *   the camera is positioned
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
    
    > getCameraPositionStubDispatcher;
/**
 * description: setCameraHeadingAngle = This method sets the map view heading angle
		Note: the
 *   camera position will be automatically set in such a way, that it looks at the
 *   currently selected target point
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCameraHeadingAngleStubDispatcher;
/**
 * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
 *   that the camera always looks at a given target
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>,
    std::tuple<>
    
    > setCameraHeadingToTargetStubDispatcher;
/**
 * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
 *   that the camera always looks in the direction in which the car is moving
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCameraHeadingTrackUpStubDispatcher;
/**
 * description: getCameraHeading = This method returns the current camera heading
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::HeadingType, int32_t, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>
    
    > getCameraHeadingStubDispatcher;
/**
 * description: setCameraTiltAngle = This method sets the camera tilt angle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCameraTiltAngleStubDispatcher;
/**
 * description: getCameraTiltAngle = This method returns the camera tilt angle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getCameraTiltAngleStubDispatcher;
/**
 * description: setCameraRollAngle = This method sets the camera roll angle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCameraRollAngleStubDispatcher;
/**
 * description: getCameraRollAngle = This method returns the camera roll angle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getCameraRollAngleStubDispatcher;
/**
 * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
 *   distance from the target point
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCameraDistanceFromTargetPointStubDispatcher;
/**
 * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
 *   distance from the target point
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<uint32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getCameraDistanceFromTargetPointStubDispatcher;
/**
 * description: setMapViewScaleMode = This method sets the scaling mode.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapScaleMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewScaleModeStubDispatcher;
/**
 * description: getMapViewScaleMode = This method gets the scaling mode.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapScaleMode>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getMapViewScaleModeStubDispatcher;
/**
 * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::MapScaleMode>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewScaleModesStubDispatcher;
/**
 * description: addMapViewScaleChangedListener = This method adds a listener which is notified
 *   when map view scale changes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > addMapViewScaleChangedListenerStubDispatcher;
/**
 * description: removeMapViewScaleChangedListener = This method removes a listener which is
 *   notified when map view scale changes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > removeMapViewScaleChangedListenerStubDispatcher;
/**
 * description: setCameraHeight = This method sets the camera height
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCameraHeightStubDispatcher;
/**
 * description: getCameraHeight = This method gets the camera height
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<uint32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getCameraHeightStubDispatcher;
/**
 * description: setMapViewPerspective = This method sets the map perspective
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapPerspective>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewPerspectiveStubDispatcher;
/**
 * description: getMapViewPerspective = This method returns the current map perspective
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapPerspective>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getMapViewPerspectiveStubDispatcher;
/**
 * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
 *   perspectives
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::MapPerspective>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewPerspectivesStubDispatcher;
/**
 * description: setMapViewObjectVisibility = This method specifies the type of objects to show
 *   on the map.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapObjectVisibility>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, MapViewerControl_::MapObjectVisibilityDeployment_t>,
    std::tuple<>
    
    > setMapViewObjectVisibilityStubDispatcher;
/**
 * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
 *   map.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapObjectVisibility>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<MapViewerControl_::MapObjectVisibilityDeployment_t>
    
    > getMapViewObjectVisibilityStubDispatcher;
/**
 * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
 *   visibilities.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::MapObject>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewObjectVisibilitiesStubDispatcher;
/**
 * description: getScaleList = This method returns a list of supported map scales
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::MapScale>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>>
    
    > getScaleListStubDispatcher;
/**
 * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewScaleStubDispatcher;
/**
 * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
 *   value with respect to the currently set ScaleID
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewScaleByDeltaStubDispatcher;
/**
 * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
 *   the number of meters that a pixel represents
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, double>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewScaleByMetersPerPixelStubDispatcher;
/**
 * description: getMapViewScale = This method returns the currently used map scale
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<uint8_t, MapViewerControl::MapScaleType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > getMapViewScaleStubDispatcher;
/**
 * description: setMapViewBoundingBox = This method sets the map bounding box
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Rectangle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>,
    std::tuple<>
    
    > setMapViewBoundingBoxStubDispatcher;
/**
 * description: getMapViewBoundingBox = This method returns the bounding box of a given map
 *   instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Rectangle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
    
    > getMapViewBoundingBoxStubDispatcher;
/**
 * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapViewArea>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, MapViewerControl_::MapViewAreaDeployment_t>,
    std::tuple<>
    
    > setMapViewSaveAreaStubDispatcher;
/**
 * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapViewArea>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<MapViewerControl_::MapViewAreaDeployment_t>
    
    > getMapViewSaveAreaStubDispatcher;
/**
 * description: setMapViewPan = This method pans a given map instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::PanAction, std::vector<MapViewerControl::Pixel>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>,
    std::tuple<>
    
    > setMapViewPanStubDispatcher;
/**
 * description: getMapViewPan
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::PanAction>,
    std::tuple<std::vector<MapViewerControl::Pixel>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
    
    > getMapViewPanStubDispatcher;
/**
 * description: setMapViewRotation = This method rotates the map
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewRotationStubDispatcher;
/**
 * description: getMapViewRotation = This method is particularly interesting for debugging
 *   purposes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<int32_t, int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > getMapViewRotationStubDispatcher;
/**
 * description: setMapViewVisibilityMode = This method sets the current visibility mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Visibility>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewVisibilityModeStubDispatcher;
/**
 * description: getMapViewVisibilityMode = This method returns the current visibility mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::Visibility>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getMapViewVisibilityModeStubDispatcher;
/**
 * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
 *   mapview visibility modes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::Visibility>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewVisibilityModesStubDispatcher;
/**
 * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
 *   map instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Level>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewPerformanceLevelStubDispatcher;
/**
 * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
 *   given map instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::Level>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getMapViewPerformanceLevelStubDispatcher;
/**
 * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
 *   perfomance levels
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::Level>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewPerformanceLevelsStubDispatcher;
/**
 * description: displayRoute = This method visualizes one of the calculated routes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > displayRouteStubDispatcher;
/**
 * description: hideRoute = This method hides one of the visible routes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > hideRouteStubDispatcher;
/**
 * description: getDisplayedRoutes = This method returns a list of displayed routes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::DisplayedRoute>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>
    
    > getDisplayedRoutesStubDispatcher;
/**
 * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getPoiCategoriesVisibleStubDispatcher;
/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map.
                   Any specified category that until now
 *   was displayed with scale limits is now displayed without limits.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > setPoiCategoriesVisibleStubDispatcher;
/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map, where the POI's are only displayed in a specific range
 *   of scales.
                   Any specified category that until now was
 *   displayed without scale limits is now displayed with limits.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>, uint8_t, uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setPoiCategoriesVisibleWithinLimitsStubDispatcher;
/**
 * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
 *   categories displayed on the map.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > setPoiCategoriesNotVisibleStubDispatcher;
/**
 * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
 *   map.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setTrafficIncidentsVisibilityStubDispatcher;
/**
 * description: setMapViewTheme = This method configures the theme of a given map view instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapTheme>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setMapViewThemeStubDispatcher;
/**
 * description: getMapViewTheme = This method returns the current theme of a given map view
 *   instance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapTheme>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getMapViewThemeStubDispatcher;
/**
 * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::MapTheme>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedMapViewThemesStubDispatcher;
/**
 * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
 *   geographical coordinates
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<MapViewerControl::Pixel>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>>
    
    > convertPixelCoordsToGeoCoordsStubDispatcher;
/**
 * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
 *   into pixel coordinates
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>>,
    std::tuple<std::vector<MapViewerControl::Pixel>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
    
    > convertGeoCoordsToPixelCoordsStubDispatcher;
/**
 * description: displayCustomElements = This method visualizes a set of custom elements on the
 *   map
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<MapViewerControl::CustomElement>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > displayCustomElementsStubDispatcher;
/**
 * description: hideCustomElements = This method hides a set of custom elements which were
 *   visualized by DisplayCustomElements
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > hideCustomElementsStubDispatcher;
/**
 * description: getDisplayedCustomElements = This method retrieves the visualized custom
 *   elements on the map
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::tCustomElementDict>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<MapViewerControl_::tCustomElementDictDeployment_t>
    
    > getDisplayedCustomElementsStubDispatcher;
/**
 * description: selectElementsOnMap = This method selects elements on the map view which are at
 *   the position specified by user input
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Pixel, std::vector<MapViewerControl::SelectableMapType>, uint16_t>,
    std::tuple<std::vector<MapViewerControl::SelectedMapElement>>,
    std::tuple<CommonAPI::EmptyDeployment, MapViewerControl_::PixelDeployment_t, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>>
    
    > selectElementsOnMapStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    MapViewerControlDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class MapViewerControlDBusStubAdapter
    : public MapViewerControlDBusStubAdapterInternal,
      public std::enable_shared_from_this<MapViewerControlDBusStubAdapter> {
public:
    MapViewerControlDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          MapViewerControlDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_DBUS_STUB_ADAPTER_HPP_
