/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapViewerControl = This interface offers functions to control the MapViewer
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#include <v4/org/genivi/navigation/mapviewer/MapViewerControl.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service MapViewerControl. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class MapViewerControlStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual MapViewerControl {
 public:

    /**
     * Sends a broadcast event for followCarModeChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireFollowCarModeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode) = 0;
    /**
     * Sends a broadcast event for cameraPositionChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCameraPositionChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint) = 0;
    /**
     * Sends a broadcast event for CameraHeadingChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCameraHeadingChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType &_headingType, const int32_t &_headingAngle) = 0;
    /**
     * Sends a broadcast event for cameraTiltAngleChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCameraTiltAngleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt) = 0;
    /**
     * Sends a broadcast event for cameraDistanceFromTargetPointChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCameraDistanceFromTargetPointChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance) = 0;
    /**
     * Sends a broadcast event for mapViewScaleChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewScaleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint8_t &_scaleID, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType &_isMinMax) = 0;
    /**
     * Sends a broadcast event for MapViewPerspectiveChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewPerspectiveChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective &_perspective) = 0;
    /**
     * Sends a broadcast event for mapViewObjectVisibilityChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewObjectVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility &_objectVisibilityList) = 0;
    /**
     * Sends a broadcast event for mapViewBoundingBoxChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewBoundingBoxChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox) = 0;
    /**
     * Sends a broadcast event for mapViewSaveAreaChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewSaveAreaChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea &_saveArea) = 0;
    /**
     * Sends a broadcast event for mapViewVisibilityChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility &_visibilityMode) = 0;
    /**
     * Sends a broadcast event for mapViewPerformanceLevelChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewPerformanceLevelChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level &_performanceLevel) = 0;
    /**
     * Sends a broadcast event for displayedRoutes. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireDisplayedRoutesEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute> &_displayedRoutes) = 0;
    /**
     * Sends a broadcast event for poiCategoriesVisibilityChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePoiCategoriesVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const bool &_visible, const uint8_t &_minScaleID, const uint8_t &_maxScaleID) = 0;
    /**
     * Sends a broadcast event for mapViewThemeChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireMapViewThemeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme &_mapViewTheme) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for MapViewerControl.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MapViewerControlStubRemoteEvent
{
public:
    virtual ~MapViewerControlStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service MapViewerControl to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MapViewerControlStub
    : public virtual CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle)>createMapViewInstanceReply_t;
    typedef std::function<void ()>releaseMapViewInstanceReply_t;
    typedef std::function<void (MapViewerControl::MapViewType _mapViewType)>getMapViewTypeReply_t;
    typedef std::function<void (std::vector<MapViewerControl::MapViewType> _mapViewTypeList)>getSupportedMapViewTypesReply_t;
    typedef std::function<void ()>setTargetPointReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _targetPoint)>getTargetPointReply_t;
    typedef std::function<void ()>setFollowCarModeReply_t;
    typedef std::function<void (bool _followCarMode)>getFollowCarModeReply_t;
    typedef std::function<void ()>setCameraPositionReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _position)>getCameraPositionReply_t;
    typedef std::function<void ()>setCameraHeadingAngleReply_t;
    typedef std::function<void ()>setCameraHeadingToTargetReply_t;
    typedef std::function<void ()>setCameraHeadingTrackUpReply_t;
    typedef std::function<void (MapViewerControl::HeadingType _headingType, int32_t _headingAngle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _target)>getCameraHeadingReply_t;
    typedef std::function<void ()>setCameraTiltAngleReply_t;
    typedef std::function<void (int32_t _tilt)>getCameraTiltAngleReply_t;
    typedef std::function<void ()>setCameraRollAngleReply_t;
    typedef std::function<void (int32_t _roll)>getCameraRollAngleReply_t;
    typedef std::function<void ()>setCameraDistanceFromTargetPointReply_t;
    typedef std::function<void (uint32_t _distance)>getCameraDistanceFromTargetPointReply_t;
    typedef std::function<void ()>setMapViewScaleModeReply_t;
    typedef std::function<void (MapViewerControl::MapScaleMode _scaleMode)>getMapViewScaleModeReply_t;
    typedef std::function<void (std::vector<MapViewerControl::MapScaleMode> _scaleModeList)>getSupportedMapViewScaleModesReply_t;
    typedef std::function<void ()>addMapViewScaleChangedListenerReply_t;
    typedef std::function<void ()>removeMapViewScaleChangedListenerReply_t;
    typedef std::function<void ()>setCameraHeightReply_t;
    typedef std::function<void (uint32_t _height)>getCameraHeightReply_t;
    typedef std::function<void ()>setMapViewPerspectiveReply_t;
    typedef std::function<void (MapViewerControl::MapPerspective _perspective)>getMapViewPerspectiveReply_t;
    typedef std::function<void (std::vector<MapViewerControl::MapPerspective> _perspectiveList)>getSupportedMapViewPerspectivesReply_t;
    typedef std::function<void ()>setMapViewObjectVisibilityReply_t;
    typedef std::function<void (MapViewerControl::MapObjectVisibility _objectVisibilityList)>getMapViewObjectVisibilityReply_t;
    typedef std::function<void (std::vector<MapViewerControl::MapObject> _objectVisibilityList)>getSupportedMapViewObjectVisibilitiesReply_t;
    typedef std::function<void (std::vector<MapViewerControl::MapScale> _scaleList)>getScaleListReply_t;
    typedef std::function<void ()>setMapViewScaleReply_t;
    typedef std::function<void ()>setMapViewScaleByDeltaReply_t;
    typedef std::function<void ()>setMapViewScaleByMetersPerPixelReply_t;
    typedef std::function<void (uint8_t _scaleID, MapViewerControl::MapScaleType _isMinMax)>getMapViewScaleReply_t;
    typedef std::function<void ()>setMapViewBoundingBoxReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Rectangle _boundingBox)>getMapViewBoundingBoxReply_t;
    typedef std::function<void ()>setMapViewSaveAreaReply_t;
    typedef std::function<void (MapViewerControl::MapViewArea _saveArea)>getMapViewSaveAreaReply_t;
    typedef std::function<void ()>setMapViewPanReply_t;
    typedef std::function<void (std::vector<MapViewerControl::Pixel> _pixelCoordinates)>getMapViewPanReply_t;
    typedef std::function<void ()>setMapViewRotationReply_t;
    typedef std::function<void (int32_t _rotationAngle, int32_t _rotationAnglePerFrame)>getMapViewRotationReply_t;
    typedef std::function<void ()>setMapViewVisibilityModeReply_t;
    typedef std::function<void (MapViewerControl::Visibility _visibilityMode)>getMapViewVisibilityModeReply_t;
    typedef std::function<void (std::vector<MapViewerControl::Visibility> _visibilityModeList)>getSupportedMapViewVisibilityModesReply_t;
    typedef std::function<void ()>setMapViewPerformanceLevelReply_t;
    typedef std::function<void (MapViewerControl::Level _performanceLevel)>getMapViewPerformanceLevelReply_t;
    typedef std::function<void (std::vector<MapViewerControl::Level> _performanceLevelList)>getSupportedMapViewPerformanceLevelsReply_t;
    typedef std::function<void ()>displayRouteReply_t;
    typedef std::function<void ()>hideRouteReply_t;
    typedef std::function<void (std::vector<MapViewerControl::DisplayedRoute> _displayedRoutes)>getDisplayedRoutesReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds)>getPoiCategoriesVisibleReply_t;
    typedef std::function<void ()>setPoiCategoriesVisibleReply_t;
    typedef std::function<void ()>setPoiCategoriesVisibleWithinLimitsReply_t;
    typedef std::function<void ()>setPoiCategoriesNotVisibleReply_t;
    typedef std::function<void ()>setTrafficIncidentsVisibilityReply_t;
    typedef std::function<void ()>setMapViewThemeReply_t;
    typedef std::function<void (MapViewerControl::MapTheme _mapViewTheme)>getMapViewThemeReply_t;
    typedef std::function<void (std::vector<MapViewerControl::MapTheme> _mapViewThemeList)>getSupportedMapViewThemesReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> _geoCoordinates)>convertPixelCoordsToGeoCoordsReply_t;
    typedef std::function<void (std::vector<MapViewerControl::Pixel> _pixelCoordinates)>convertGeoCoordsToPixelCoordsReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _customElemenHandles)>displayCustomElementsReply_t;
    typedef std::function<void ()>hideCustomElementsReply_t;
    typedef std::function<void (MapViewerControl::tCustomElementDict _customElements)>getDisplayedCustomElementsReply_t;
    typedef std::function<void (std::vector<MapViewerControl::SelectedMapElement> _selectedElements)>selectElementsOnMapReply_t;

    virtual ~MapViewerControlStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: createMapViewInstance = This method creates a new map instance
     */
    /// This is the method that will be called on remote calls on the method createMapViewInstance.
    virtual void createMapViewInstance(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, MapViewerControl::Dimension _mapViewSize, MapViewerControl::MapViewType _mapViewType, createMapViewInstanceReply_t _reply) = 0;
    /**
     * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
     *   instance. Only invisible map instances can be released
     */
    /// This is the method that will be called on remote calls on the method releaseMapViewInstance.
    virtual void releaseMapViewInstance(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, releaseMapViewInstanceReply_t _reply) = 0;
    /**
     * description: getMapViewType = This method returns the map type of a map instance as it was
     *   set using CreateMapViewInstance
     */
    /// This is the method that will be called on remote calls on the method getMapViewType.
    virtual void getMapViewType(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewTypeReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewTypes = This method retrieves the supported map view types
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewTypes.
    virtual void getSupportedMapViewTypes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewTypesReply_t _reply) = 0;
    /**
     * description: setTargetPoint = This method sets the position of the point the camera is
     *   always aimed at
     */
    /// This is the method that will be called on remote calls on the method setTargetPoint.
    virtual void setTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _targetPoint, setTargetPointReply_t _reply) = 0;
    /**
     * description: getTargetPoint = This method retrieves the target point position
     */
    /// This is the method that will be called on remote calls on the method getTargetPoint.
    virtual void getTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getTargetPointReply_t _reply) = 0;
    /**
     * description: setFollowCarMode = This method sets the FollowCar mode
     */
    /// This is the method that will be called on remote calls on the method setFollowCarMode.
    virtual void setFollowCarMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, bool _followCarMode, setFollowCarModeReply_t _reply) = 0;
    /**
     * description: getFollowCarMode = This method returns the current FollowCar-mode
     */
    /// This is the method that will be called on remote calls on the method getFollowCarMode.
    virtual void getFollowCarMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getFollowCarModeReply_t _reply) = 0;
    /**
     * description: setCameraPosition = This method sets the coordinates of the point at which the
     *   camera must be positioned
    		Note: the camera heading will be automatically set
     *   in such a way, that the camera is aimed at the view point
     */
    /// This is the method that will be called on remote calls on the method setCameraPosition.
    virtual void setCameraPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _position, setCameraPositionReply_t _reply) = 0;
    /**
     * description: getCameraPosition = This method returns the coordinates of the point at which
     *   the camera is positioned
     */
    /// This is the method that will be called on remote calls on the method getCameraPosition.
    virtual void getCameraPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraPositionReply_t _reply) = 0;
    /**
     * description: setCameraHeadingAngle = This method sets the map view heading angle
    		Note: the
     *   camera position will be automatically set in such a way, that it looks at the
     *   currently selected target point
     */
    /// This is the method that will be called on remote calls on the method setCameraHeadingAngle.
    virtual void setCameraHeadingAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _heading, setCameraHeadingAngleReply_t _reply) = 0;
    /**
     * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
     *   that the camera always looks at a given target
     */
    /// This is the method that will be called on remote calls on the method setCameraHeadingToTarget.
    virtual void setCameraHeadingToTarget(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _target, setCameraHeadingToTargetReply_t _reply) = 0;
    /**
     * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
     *   that the camera always looks in the direction in which the car is moving
     */
    /// This is the method that will be called on remote calls on the method setCameraHeadingTrackUp.
    virtual void setCameraHeadingTrackUp(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, setCameraHeadingTrackUpReply_t _reply) = 0;
    /**
     * description: getCameraHeading = This method returns the current camera heading
     */
    /// This is the method that will be called on remote calls on the method getCameraHeading.
    virtual void getCameraHeading(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraHeadingReply_t _reply) = 0;
    /**
     * description: setCameraTiltAngle = This method sets the camera tilt angle
     */
    /// This is the method that will be called on remote calls on the method setCameraTiltAngle.
    virtual void setCameraTiltAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _tilt, setCameraTiltAngleReply_t _reply) = 0;
    /**
     * description: getCameraTiltAngle = This method returns the camera tilt angle
     */
    /// This is the method that will be called on remote calls on the method getCameraTiltAngle.
    virtual void getCameraTiltAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraTiltAngleReply_t _reply) = 0;
    /**
     * description: setCameraRollAngle = This method sets the camera roll angle
     */
    /// This is the method that will be called on remote calls on the method setCameraRollAngle.
    virtual void setCameraRollAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _roll, setCameraRollAngleReply_t _reply) = 0;
    /**
     * description: getCameraRollAngle = This method returns the camera roll angle
     */
    /// This is the method that will be called on remote calls on the method getCameraRollAngle.
    virtual void getCameraRollAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraRollAngleReply_t _reply) = 0;
    /**
     * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
     *   distance from the target point
     */
    /// This is the method that will be called on remote calls on the method setCameraDistanceFromTargetPoint.
    virtual void setCameraDistanceFromTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, uint32_t _distance, setCameraDistanceFromTargetPointReply_t _reply) = 0;
    /**
     * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
     *   distance from the target point
     */
    /// This is the method that will be called on remote calls on the method getCameraDistanceFromTargetPoint.
    virtual void getCameraDistanceFromTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraDistanceFromTargetPointReply_t _reply) = 0;
    /**
     * description: setMapViewScaleMode = This method sets the scaling mode.
     */
    /// This is the method that will be called on remote calls on the method setMapViewScaleMode.
    virtual void setMapViewScaleMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapScaleMode _scaleMode, setMapViewScaleModeReply_t _reply) = 0;
    /**
     * description: getMapViewScaleMode = This method gets the scaling mode.
     */
    /// This is the method that will be called on remote calls on the method getMapViewScaleMode.
    virtual void getMapViewScaleMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewScaleModeReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewScaleModes.
    virtual void getSupportedMapViewScaleModes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getSupportedMapViewScaleModesReply_t _reply) = 0;
    /**
     * description: addMapViewScaleChangedListener = This method adds a listener which is notified
     *   when map view scale changes.
     */
    /// This is the method that will be called on remote calls on the method addMapViewScaleChangedListener.
    virtual void addMapViewScaleChangedListener(const std::shared_ptr<CommonAPI::ClientId> _client, addMapViewScaleChangedListenerReply_t _reply) = 0;
    /**
     * description: removeMapViewScaleChangedListener = This method removes a listener which is
     *   notified when map view scale changes.
     */
    /// This is the method that will be called on remote calls on the method removeMapViewScaleChangedListener.
    virtual void removeMapViewScaleChangedListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeMapViewScaleChangedListenerReply_t _reply) = 0;
    /**
     * description: setCameraHeight = This method sets the camera height
     */
    /// This is the method that will be called on remote calls on the method setCameraHeight.
    virtual void setCameraHeight(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, uint32_t _height, setCameraHeightReply_t _reply) = 0;
    /**
     * description: getCameraHeight = This method gets the camera height
     */
    /// This is the method that will be called on remote calls on the method getCameraHeight.
    virtual void getCameraHeight(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraHeightReply_t _reply) = 0;
    /**
     * description: setMapViewPerspective = This method sets the map perspective
     */
    /// This is the method that will be called on remote calls on the method setMapViewPerspective.
    virtual void setMapViewPerspective(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapPerspective _perspective, setMapViewPerspectiveReply_t _reply) = 0;
    /**
     * description: getMapViewPerspective = This method returns the current map perspective
     */
    /// This is the method that will be called on remote calls on the method getMapViewPerspective.
    virtual void getMapViewPerspective(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewPerspectiveReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
     *   perspectives
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewPerspectives.
    virtual void getSupportedMapViewPerspectives(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewPerspectivesReply_t _reply) = 0;
    /**
     * description: setMapViewObjectVisibility = This method specifies the type of objects to show
     *   on the map.
     */
    /// This is the method that will be called on remote calls on the method setMapViewObjectVisibility.
    virtual void setMapViewObjectVisibility(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapObjectVisibility _objectVisibilityList, setMapViewObjectVisibilityReply_t _reply) = 0;
    /**
     * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
     *   map.
     */
    /// This is the method that will be called on remote calls on the method getMapViewObjectVisibility.
    virtual void getMapViewObjectVisibility(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewObjectVisibilityReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
     *   visibilities.
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewObjectVisibilities.
    virtual void getSupportedMapViewObjectVisibilities(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getSupportedMapViewObjectVisibilitiesReply_t _reply) = 0;
    /**
     * description: getScaleList = This method returns a list of supported map scales
     */
    /// This is the method that will be called on remote calls on the method getScaleList.
    virtual void getScaleList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getScaleListReply_t _reply) = 0;
    /**
     * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
     */
    /// This is the method that will be called on remote calls on the method setMapViewScale.
    virtual void setMapViewScale(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, uint16_t _scaleID, setMapViewScaleReply_t _reply) = 0;
    /**
     * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
     *   value with respect to the currently set ScaleID
     */
    /// This is the method that will be called on remote calls on the method setMapViewScaleByDelta.
    virtual void setMapViewScaleByDelta(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int16_t _scaleDelta, setMapViewScaleByDeltaReply_t _reply) = 0;
    /**
     * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
     *   the number of meters that a pixel represents
     */
    /// This is the method that will be called on remote calls on the method setMapViewScaleByMetersPerPixel.
    virtual void setMapViewScaleByMetersPerPixel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, double _metersPerPixel, setMapViewScaleByMetersPerPixelReply_t _reply) = 0;
    /**
     * description: getMapViewScale = This method returns the currently used map scale
     */
    /// This is the method that will be called on remote calls on the method getMapViewScale.
    virtual void getMapViewScale(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewScaleReply_t _reply) = 0;
    /**
     * description: setMapViewBoundingBox = This method sets the map bounding box
     */
    /// This is the method that will be called on remote calls on the method setMapViewBoundingBox.
    virtual void setMapViewBoundingBox(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Rectangle _boundingBox, setMapViewBoundingBoxReply_t _reply) = 0;
    /**
     * description: getMapViewBoundingBox = This method returns the bounding box of a given map
     *   instance
     */
    /// This is the method that will be called on remote calls on the method getMapViewBoundingBox.
    virtual void getMapViewBoundingBox(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewBoundingBoxReply_t _reply) = 0;
    /**
     * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    /// This is the method that will be called on remote calls on the method setMapViewSaveArea.
    virtual void setMapViewSaveArea(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapViewArea _saveArea, setMapViewSaveAreaReply_t _reply) = 0;
    /**
     * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    /// This is the method that will be called on remote calls on the method getMapViewSaveArea.
    virtual void getMapViewSaveArea(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewSaveAreaReply_t _reply) = 0;
    /**
     * description: setMapViewPan = This method pans a given map instance
     */
    /// This is the method that will be called on remote calls on the method setMapViewPan.
    virtual void setMapViewPan(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::PanAction _panningAction, std::vector<MapViewerControl::Pixel> _pixelCoordinates, setMapViewPanReply_t _reply) = 0;
    /**
     * description: getMapViewPan
     */
    /// This is the method that will be called on remote calls on the method getMapViewPan.
    virtual void getMapViewPan(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::PanAction _valueToReturn, getMapViewPanReply_t _reply) = 0;
    /**
     * description: setMapViewRotation = This method rotates the map
     */
    /// This is the method that will be called on remote calls on the method setMapViewRotation.
    virtual void setMapViewRotation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _rotationAngle, int32_t _rotationAnglePerSecond, setMapViewRotationReply_t _reply) = 0;
    /**
     * description: getMapViewRotation = This method is particularly interesting for debugging
     *   purposes
     */
    /// This is the method that will be called on remote calls on the method getMapViewRotation.
    virtual void getMapViewRotation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewRotationReply_t _reply) = 0;
    /**
     * description: setMapViewVisibilityMode = This method sets the current visibility mode
     */
    /// This is the method that will be called on remote calls on the method setMapViewVisibilityMode.
    virtual void setMapViewVisibilityMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::Visibility _visibilityMode, setMapViewVisibilityModeReply_t _reply) = 0;
    /**
     * description: getMapViewVisibilityMode = This method returns the current visibility mode
     */
    /// This is the method that will be called on remote calls on the method getMapViewVisibilityMode.
    virtual void getMapViewVisibilityMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewVisibilityModeReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
     *   mapview visibility modes
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewVisibilityModes.
    virtual void getSupportedMapViewVisibilityModes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewVisibilityModesReply_t _reply) = 0;
    /**
     * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
     *   map instance
     */
    /// This is the method that will be called on remote calls on the method setMapViewPerformanceLevel.
    virtual void setMapViewPerformanceLevel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::Level _performanceLevel, setMapViewPerformanceLevelReply_t _reply) = 0;
    /**
     * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
     *   given map instance
     */
    /// This is the method that will be called on remote calls on the method getMapViewPerformanceLevel.
    virtual void getMapViewPerformanceLevel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewPerformanceLevelReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
     *   perfomance levels
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewPerformanceLevels.
    virtual void getSupportedMapViewPerformanceLevels(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewPerformanceLevelsReply_t _reply) = 0;
    /**
     * description: displayRoute = This method visualizes one of the calculated routes
     */
    /// This is the method that will be called on remote calls on the method displayRoute.
    virtual void displayRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, bool _highlighted, displayRouteReply_t _reply) = 0;
    /**
     * description: hideRoute = This method hides one of the visible routes
     */
    /// This is the method that will be called on remote calls on the method hideRoute.
    virtual void hideRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, hideRouteReply_t _reply) = 0;
    /**
     * description: getDisplayedRoutes = This method returns a list of displayed routes
     */
    /// This is the method that will be called on remote calls on the method getDisplayedRoutes.
    virtual void getDisplayedRoutes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getDisplayedRoutesReply_t _reply) = 0;
    /**
     * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
     */
    /// This is the method that will be called on remote calls on the method getPoiCategoriesVisible.
    virtual void getPoiCategoriesVisible(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getPoiCategoriesVisibleReply_t _reply) = 0;
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map.
                       Any specified category that until now
     *   was displayed with scale limits is now displayed without limits.
     */
    /// This is the method that will be called on remote calls on the method setPoiCategoriesVisible.
    virtual void setPoiCategoriesVisible(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds, setPoiCategoriesVisibleReply_t _reply) = 0;
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map, where the POI's are only displayed in a specific range
     *   of scales.
                       Any specified category that until now was
     *   displayed without scale limits is now displayed with limits.
     */
    /// This is the method that will be called on remote calls on the method setPoiCategoriesVisibleWithinLimits.
    virtual void setPoiCategoriesVisibleWithinLimits(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds, uint8_t _minScaleID, uint8_t _maxScaleID, setPoiCategoriesVisibleWithinLimitsReply_t _reply) = 0;
    /**
     * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
     *   categories displayed on the map.
     */
    /// This is the method that will be called on remote calls on the method setPoiCategoriesNotVisible.
    virtual void setPoiCategoriesNotVisible(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds, setPoiCategoriesNotVisibleReply_t _reply) = 0;
    /**
     * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
     *   map.
     */
    /// This is the method that will be called on remote calls on the method setTrafficIncidentsVisibility.
    virtual void setTrafficIncidentsVisibility(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, bool _visible, setTrafficIncidentsVisibilityReply_t _reply) = 0;
    /**
     * description: setMapViewTheme = This method configures the theme of a given map view instance
     */
    /// This is the method that will be called on remote calls on the method setMapViewTheme.
    virtual void setMapViewTheme(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapTheme _mapViewTheme, setMapViewThemeReply_t _reply) = 0;
    /**
     * description: getMapViewTheme = This method returns the current theme of a given map view
     *   instance
     */
    /// This is the method that will be called on remote calls on the method getMapViewTheme.
    virtual void getMapViewTheme(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewThemeReply_t _reply) = 0;
    /**
     * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
     */
    /// This is the method that will be called on remote calls on the method getSupportedMapViewThemes.
    virtual void getSupportedMapViewThemes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewThemesReply_t _reply) = 0;
    /**
     * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
     *   geographical coordinates
     */
    /// This is the method that will be called on remote calls on the method convertPixelCoordsToGeoCoords.
    virtual void convertPixelCoordsToGeoCoords(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<MapViewerControl::Pixel> _pixelCoordinates, convertPixelCoordsToGeoCoordsReply_t _reply) = 0;
    /**
     * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
     *   into pixel coordinates
     */
    /// This is the method that will be called on remote calls on the method convertGeoCoordsToPixelCoords.
    virtual void convertGeoCoordsToPixelCoords(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> _geoCoordinates, convertGeoCoordsToPixelCoordsReply_t _reply) = 0;
    /**
     * description: displayCustomElements = This method visualizes a set of custom elements on the
     *   map
     */
    /// This is the method that will be called on remote calls on the method displayCustomElements.
    virtual void displayCustomElements(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<MapViewerControl::CustomElement> _customElements, displayCustomElementsReply_t _reply) = 0;
    /**
     * description: hideCustomElements = This method hides a set of custom elements which were
     *   visualized by DisplayCustomElements
     */
    /// This is the method that will be called on remote calls on the method hideCustomElements.
    virtual void hideCustomElements(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _customElemenHandles, hideCustomElementsReply_t _reply) = 0;
    /**
     * description: getDisplayedCustomElements = This method retrieves the visualized custom
     *   elements on the map
     */
    /// This is the method that will be called on remote calls on the method getDisplayedCustomElements.
    virtual void getDisplayedCustomElements(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getDisplayedCustomElementsReply_t _reply) = 0;
    /**
     * description: selectElementsOnMap = This method selects elements on the map view which are at
     *   the position specified by user input
     */
    /// This is the method that will be called on remote calls on the method selectElementsOnMap.
    virtual void selectElementsOnMap(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::Pixel _pixelCoordinate, std::vector<MapViewerControl::SelectableMapType> _selectableTypes, uint16_t _maxNumberOfSelectedElements, selectElementsOnMapReply_t _reply) = 0;
    /**
     * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
     */
    /// Sends a broadcast event for followCarModeChanged.
    virtual void fireFollowCarModeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode) = 0;
    /**
     * description: cameraPositionChanged = This signal is emitted when the position of the camera
     *   changes
     */
    /// Sends a broadcast event for cameraPositionChanged.
    virtual void fireCameraPositionChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint) = 0;
    /**
     * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
     *   camera changes
     */
    /// Sends a broadcast event for CameraHeadingChanged.
    virtual void fireCameraHeadingChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType &_headingType, const int32_t &_headingAngle) = 0;
    /**
     * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
     *   changes
     */
    /// Sends a broadcast event for cameraTiltAngleChanged.
    virtual void fireCameraTiltAngleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt) = 0;
    /**
     * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
     *   distance from the target point changes
     */
    /// Sends a broadcast event for cameraDistanceFromTargetPointChanged.
    virtual void fireCameraDistanceFromTargetPointChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance) = 0;
    /**
     * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
     */
    /// Sends a broadcast event for mapViewScaleChanged.
    virtual void fireMapViewScaleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint8_t &_scaleID, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType &_isMinMax) = 0;
    /**
     * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
     *   chnages
     */
    /// Sends a broadcast event for MapViewPerspectiveChanged.
    virtual void fireMapViewPerspectiveChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective &_perspective) = 0;
    /**
     * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
     *   objects shown on the map changes
     */
    /// Sends a broadcast event for mapViewObjectVisibilityChanged.
    virtual void fireMapViewObjectVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility &_objectVisibilityList) = 0;
    /**
     * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
     *   map instance changes
     */
    /// Sends a broadcast event for mapViewBoundingBoxChanged.
    virtual void fireMapViewBoundingBoxChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox) = 0;
    /**
     * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
     *   guarantees not to cover with other windows or user interface elements chnages
     */
    /// Sends a broadcast event for mapViewSaveAreaChanged.
    virtual void fireMapViewSaveAreaChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea &_saveArea) = 0;
    /**
     * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
     *   changes
     */
    /// Sends a broadcast event for mapViewVisibilityChanged.
    virtual void fireMapViewVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility &_visibilityMode) = 0;
    /**
     * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
     *   level of a map instance changes
     */
    /// Sends a broadcast event for mapViewPerformanceLevelChanged.
    virtual void fireMapViewPerformanceLevelChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level &_performanceLevel) = 0;
    /**
     * description: displayedRoutes = This signal is emitted when the list of displayed routes
     *   change
     */
    /// Sends a broadcast event for displayedRoutes.
    virtual void fireDisplayedRoutesEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute> &_displayedRoutes) = 0;
    /**
     * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
     *   POI categories on a map instance changes
     */
    /// Sends a broadcast event for poiCategoriesVisibilityChanged.
    virtual void firePoiCategoriesVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const bool &_visible, const uint8_t &_minScaleID, const uint8_t &_maxScaleID) = 0;
    /**
     * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
     *   instance changes
     */
    /// Sends a broadcast event for mapViewThemeChanged.
    virtual void fireMapViewThemeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme &_mapViewTheme) = 0;

    using CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef MapViewerControlStubRemoteEvent RemoteEventType;
    typedef MapViewerControl StubInterface;
};

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Map_Viewer_Control_STUB_HPP_
