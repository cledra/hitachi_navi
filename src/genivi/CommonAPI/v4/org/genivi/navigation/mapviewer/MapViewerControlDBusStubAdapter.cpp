/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/mapviewer/MapViewerControl.hpp>
#include <v4/org/genivi/navigation/mapviewer/MapViewerControlDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createMapViewerControlDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<MapViewerControlDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerMapViewerControlDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	MapViewerControl::getInterface(), &createMapViewerControlDBusStubAdapter);
}

MapViewerControlDBusStubAdapterInternal::~MapViewerControlDBusStubAdapterInternal() {
    deactivateManagedInstances();
    MapViewerControlDBusStubAdapterHelper::deinit();
}

void MapViewerControlDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* MapViewerControlDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
         */
        "<signal name=\"followCarModeChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"followCarMode\" type=\"b\" />\n"
        "</signal>\n"
        /**
         * description: cameraPositionChanged = This signal is emitted when the position of the camera
         *   changes
         */
        "<signal name=\"cameraPositionChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"targetPoint\" type=\"(ddd)\" />\n"
        "</signal>\n"
        /**
         * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
         *   camera changes
         */
        "<signal name=\"CameraHeadingChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"headingType\" type=\"i\" />\n"
            "<arg name=\"headingAngle\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
         *   changes
         */
        "<signal name=\"cameraTiltAngleChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"tilt\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
         *   distance from the target point changes
         */
        "<signal name=\"cameraDistanceFromTargetPointChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"distance\" type=\"u\" />\n"
        "</signal>\n"
        /**
         * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
         */
        "<signal name=\"mapViewScaleChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"scaleID\" type=\"y\" />\n"
            "<arg name=\"isMinMax\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
         *   chnages
         */
        "<signal name=\"MapViewPerspectiveChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"perspective\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
         *   objects shown on the map changes
         */
        "<signal name=\"mapViewObjectVisibilityChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"objectVisibilityList\" type=\"a{ib}\" />\n"
        "</signal>\n"
        /**
         * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
         *   map instance changes
         */
        "<signal name=\"mapViewBoundingBoxChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"boundingBox\" type=\"((dd)(dd))\" />\n"
        "</signal>\n"
        /**
         * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
         *   guarantees not to cover with other windows or user interface elements chnages
         */
        "<signal name=\"mapViewSaveAreaChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"saveArea\" type=\"(dddd)\" />\n"
        "</signal>\n"
        /**
         * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
         *   changes
         */
        "<signal name=\"mapViewVisibilityChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"visibilityMode\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
         *   level of a map instance changes
         */
        "<signal name=\"mapViewPerformanceLevelChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"performanceLevel\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: displayedRoutes = This signal is emitted when the list of displayed routes
         *   change
         */
        "<signal name=\"displayedRoutes\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"displayedRoutes\" type=\"a(ub)\" />\n"
        "</signal>\n"
        /**
         * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
         *   POI categories on a map instance changes
         */
        "<signal name=\"poiCategoriesVisibilityChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"poiCategoryIds\" type=\"au\" />\n"
            "<arg name=\"visible\" type=\"b\" />\n"
            "<arg name=\"minScaleID\" type=\"y\" />\n"
            "<arg name=\"maxScaleID\" type=\"y\" />\n"
        "</signal>\n"
        /**
         * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
         *   instance changes
         */
        "<signal name=\"mapViewThemeChanged\">\n"
            "<arg name=\"mapViewInstanceHandle\" type=\"u\" />\n"
            "<arg name=\"mapViewTheme\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: getVersion = This method returns the API version implemented by the server
         *   application
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: createMapViewInstance = This method creates a new map instance
         */
        "<method name=\"createMapViewInstance\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewSize\" type=\"(qq)\" direction=\"in\" />\n"
            "<arg name=\"_mapViewType\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
         *   instance. Only invisible map instances can be released
         */
        "<method name=\"releaseMapViewInstance\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewType = This method returns the map type of a map instance as it was
         *   set using CreateMapViewInstance
         */
        "<method name=\"getMapViewType\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewType\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewTypes = This method retrieves the supported map view types
         */
        "<method name=\"getSupportedMapViewTypes\">\n"
            "<arg name=\"_mapViewTypeList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setTargetPoint = This method sets the position of the point the camera is
         *   always aimed at
         */
        "<method name=\"setTargetPoint\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_targetPoint\" type=\"(ddd)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getTargetPoint = This method retrieves the target point position
         */
        "<method name=\"getTargetPoint\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_targetPoint\" type=\"(ddd)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setFollowCarMode = This method sets the FollowCar mode
         */
        "<method name=\"setFollowCarMode\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_followCarMode\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getFollowCarMode = This method returns the current FollowCar-mode
         */
        "<method name=\"getFollowCarMode\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_followCarMode\" type=\"b\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setCameraPosition = This method sets the coordinates of the point at which the
         *   camera must be positioned
        		Note: the camera heading will be automatically set
         *   in such a way, that the camera is aimed at the view point
         */
        "<method name=\"setCameraPosition\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_position\" type=\"(ddd)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getCameraPosition = This method returns the coordinates of the point at which
         *   the camera is positioned
         */
        "<method name=\"getCameraPosition\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_position\" type=\"(ddd)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setCameraHeadingAngle = This method sets the map view heading angle
        		Note: the
         *   camera position will be automatically set in such a way, that it looks at the
         *   currently selected target point
         */
        "<method name=\"setCameraHeadingAngle\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_heading\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
         *   that the camera always looks at a given target
         */
        "<method name=\"setCameraHeadingToTarget\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_target\" type=\"(dd)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
         *   that the camera always looks in the direction in which the car is moving
         */
        "<method name=\"setCameraHeadingTrackUp\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getCameraHeading = This method returns the current camera heading
         */
        "<method name=\"getCameraHeading\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_headingType\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_headingAngle\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_target\" type=\"(dd)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setCameraTiltAngle = This method sets the camera tilt angle
         */
        "<method name=\"setCameraTiltAngle\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_tilt\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getCameraTiltAngle = This method returns the camera tilt angle
         */
        "<method name=\"getCameraTiltAngle\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_tilt\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setCameraRollAngle = This method sets the camera roll angle
         */
        "<method name=\"setCameraRollAngle\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_roll\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getCameraRollAngle = This method returns the camera roll angle
         */
        "<method name=\"getCameraRollAngle\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_roll\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
         *   distance from the target point
         */
        "<method name=\"setCameraDistanceFromTargetPoint\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_distance\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
         *   distance from the target point
         */
        "<method name=\"getCameraDistanceFromTargetPoint\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_distance\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewScaleMode = This method sets the scaling mode.
         */
        "<method name=\"setMapViewScaleMode\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleMode\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewScaleMode = This method gets the scaling mode.
         */
        "<method name=\"getMapViewScaleMode\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleMode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
         */
        "<method name=\"getSupportedMapViewScaleModes\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleModeList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: addMapViewScaleChangedListener = This method adds a listener which is notified
         *   when map view scale changes.
         */
        "<method name=\"addMapViewScaleChangedListener\">\n"
        "</method>\n"
        /**
         * description: removeMapViewScaleChangedListener = This method removes a listener which is
         *   notified when map view scale changes.
         */
        "<method name=\"removeMapViewScaleChangedListener\">\n"
        "</method>\n"
        /**
         * description: setCameraHeight = This method sets the camera height
         */
        "<method name=\"setCameraHeight\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_height\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getCameraHeight = This method gets the camera height
         */
        "<method name=\"getCameraHeight\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_height\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewPerspective = This method sets the map perspective
         */
        "<method name=\"setMapViewPerspective\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_perspective\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewPerspective = This method returns the current map perspective
         */
        "<method name=\"getMapViewPerspective\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_perspective\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
         *   perspectives
         */
        "<method name=\"getSupportedMapViewPerspectives\">\n"
            "<arg name=\"_perspectiveList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewObjectVisibility = This method specifies the type of objects to show
         *   on the map.
         */
        "<method name=\"setMapViewObjectVisibility\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_objectVisibilityList\" type=\"a{ib}\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
         *   map.
         */
        "<method name=\"getMapViewObjectVisibility\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_objectVisibilityList\" type=\"a{ib}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
         *   visibilities.
         */
        "<method name=\"getSupportedMapViewObjectVisibilities\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_objectVisibilityList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getScaleList = This method returns a list of supported map scales
         */
        "<method name=\"getScaleList\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleList\" type=\"a(qqiu)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
         */
        "<method name=\"setMapViewScale\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleID\" type=\"q\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
         *   value with respect to the currently set ScaleID
         */
        "<method name=\"setMapViewScaleByDelta\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleDelta\" type=\"n\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
         *   the number of meters that a pixel represents
         */
        "<method name=\"setMapViewScaleByMetersPerPixel\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_metersPerPixel\" type=\"d\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewScale = This method returns the currently used map scale
         */
        "<method name=\"getMapViewScale\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_scaleID\" type=\"y\" direction=\"out\" />\n"
            "<arg name=\"_isMinMax\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewBoundingBox = This method sets the map bounding box
         */
        "<method name=\"setMapViewBoundingBox\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_boundingBox\" type=\"((dd)(dd))\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewBoundingBox = This method returns the bounding box of a given map
         *   instance
         */
        "<method name=\"getMapViewBoundingBox\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_boundingBox\" type=\"((dd)(dd))\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
         *   to 
        		cover with other windows or user interface elements
         */
        "<method name=\"setMapViewSaveArea\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_saveArea\" type=\"(dddd)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
         *   to 
        		cover with other windows or user interface elements
         */
        "<method name=\"getMapViewSaveArea\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_saveArea\" type=\"(dddd)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewPan = This method pans a given map instance
         */
        "<method name=\"setMapViewPan\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_panningAction\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_pixelCoordinates\" type=\"a(qq)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewPan
         */
        "<method name=\"getMapViewPan\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_valueToReturn\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_pixelCoordinates\" type=\"a(qq)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewRotation = This method rotates the map
         */
        "<method name=\"setMapViewRotation\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_rotationAngle\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_rotationAnglePerSecond\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewRotation = This method is particularly interesting for debugging
         *   purposes
         */
        "<method name=\"getMapViewRotation\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_rotationAngle\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_rotationAnglePerFrame\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewVisibilityMode = This method sets the current visibility mode
         */
        "<method name=\"setMapViewVisibilityMode\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_visibilityMode\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewVisibilityMode = This method returns the current visibility mode
         */
        "<method name=\"getMapViewVisibilityMode\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_visibilityMode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
         *   mapview visibility modes
         */
        "<method name=\"getSupportedMapViewVisibilityModes\">\n"
            "<arg name=\"_visibilityModeList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
         *   map instance
         */
        "<method name=\"setMapViewPerformanceLevel\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_performanceLevel\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
         *   given map instance
         */
        "<method name=\"getMapViewPerformanceLevel\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_performanceLevel\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
         *   perfomance levels
         */
        "<method name=\"getSupportedMapViewPerformanceLevels\">\n"
            "<arg name=\"_performanceLevelList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: displayRoute = This method visualizes one of the calculated routes
         */
        "<method name=\"displayRoute\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_highlighted\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: hideRoute = This method hides one of the visible routes
         */
        "<method name=\"hideRoute\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getDisplayedRoutes = This method returns a list of displayed routes
         */
        "<method name=\"getDisplayedRoutes\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_displayedRoutes\" type=\"a(ub)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
         */
        "<method name=\"getPoiCategoriesVisible\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_poiCategoryIds\" type=\"au\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
         *   displayed on the map.
                           Any specified category that until now
         *   was displayed with scale limits is now displayed without limits.
         */
        "<method name=\"setPoiCategoriesVisible\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_poiCategoryIds\" type=\"au\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
         *   displayed on the map, where the POI's are only displayed in a specific range
         *   of scales.
                           Any specified category that until now was
         *   displayed without scale limits is now displayed with limits.
         */
        "<method name=\"setPoiCategoriesVisibleWithinLimits\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_poiCategoryIds\" type=\"au\" direction=\"in\" />\n"
            "<arg name=\"_minScaleID\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_maxScaleID\" type=\"y\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
         *   categories displayed on the map.
         */
        "<method name=\"setPoiCategoriesNotVisible\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_poiCategoryIds\" type=\"au\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
         *   map.
         */
        "<method name=\"setTrafficIncidentsVisibility\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_visible\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setMapViewTheme = This method configures the theme of a given map view instance
         */
        "<method name=\"setMapViewTheme\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewTheme\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getMapViewTheme = This method returns the current theme of a given map view
         *   instance
         */
        "<method name=\"getMapViewTheme\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewTheme\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
         */
        "<method name=\"getSupportedMapViewThemes\">\n"
            "<arg name=\"_mapViewThemeList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
         *   geographical coordinates
         */
        "<method name=\"convertPixelCoordsToGeoCoords\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_pixelCoordinates\" type=\"a(qq)\" direction=\"in\" />\n"
            "<arg name=\"_geoCoordinates\" type=\"a(dd)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
         *   into pixel coordinates
         */
        "<method name=\"convertGeoCoordsToPixelCoords\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_geoCoordinates\" type=\"a(dd)\" direction=\"in\" />\n"
            "<arg name=\"_pixelCoordinates\" type=\"a(qq)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: displayCustomElements = This method visualizes a set of custom elements on the
         *   map
         */
        "<method name=\"displayCustomElements\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_customElements\" type=\"a(ss(dd)(nn))\" direction=\"in\" />\n"
            "<arg name=\"_customElemenHandles\" type=\"au\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: hideCustomElements = This method hides a set of custom elements which were
         *   visualized by DisplayCustomElements
         */
        "<method name=\"hideCustomElements\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_customElemenHandles\" type=\"au\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getDisplayedCustomElements = This method retrieves the visualized custom
         *   elements on the map
         */
        "<method name=\"getDisplayedCustomElements\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_customElements\" type=\"a{u(ss(dd)(nn))}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: selectElementsOnMap = This method selects elements on the map view which are at
         *   the position specified by user input
         */
        "<method name=\"selectElementsOnMap\">\n"
            "<arg name=\"_mapViewInstanceHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_pixelCoordinate\" type=\"(qq)\" direction=\"in\" />\n"
            "<arg name=\"_selectableTypes\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_maxNumberOfSelectedElements\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_selectedElements\" type=\"a(i(dd)(yv))\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
        CommonAPI::Version
        > MapViewerControlDBusStubAdapterInternal::getMapViewerControlInterfaceVersionStubDispatcher(&MapViewerControlStub::getInterfaceVersion, "uu");




/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getVersionStubDispatcher(
    &MapViewerControlStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: createMapViewInstance = This method creates a new map instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Dimension, MapViewerControl::MapViewType>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::EmptyDeployment, MapViewerControl_::DimensionDeployment_t, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::createMapViewInstanceStubDispatcher(
    &MapViewerControlStub::createMapViewInstance, "u",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapViewerControl_::DimensionDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
 *   instance. Only invisible map instances can be released
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::releaseMapViewInstanceStubDispatcher(
    &MapViewerControlStub::releaseMapViewInstance, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewType = This method returns the map type of a map instance as it was
 *   set using CreateMapViewInstance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapViewType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewTypeStubDispatcher(
    &MapViewerControlStub::getMapViewType, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getSupportedMapViewTypes = This method retrieves the supported map view types
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::MapViewType>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewTypesStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewTypes, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: setTargetPoint = This method sets the position of the point the camera is
 *   always aimed at
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setTargetPointStubDispatcher(
    &MapViewerControlStub::setTargetPoint, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: getTargetPoint = This method retrieves the target point position
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getTargetPointStubDispatcher(
    &MapViewerControlStub::getTargetPoint, "(ddd)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr)));

/**
 * description: setFollowCarMode = This method sets the FollowCar mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setFollowCarModeStubDispatcher(
    &MapViewerControlStub::setFollowCarMode, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getFollowCarMode = This method returns the current FollowCar-mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<bool>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getFollowCarModeStubDispatcher(
    &MapViewerControlStub::getFollowCarMode, "b",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setCameraPosition = This method sets the coordinates of the point at which the
 *   camera must be positioned
		Note: the camera heading will be automatically set
 *   in such a way, that the camera is aimed at the view point
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraPositionStubDispatcher(
    &MapViewerControlStub::setCameraPosition, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: getCameraPosition = This method returns the coordinates of the point at which
 *   the camera is positioned
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getCameraPositionStubDispatcher(
    &MapViewerControlStub::getCameraPosition, "(ddd)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr)));

/**
 * description: setCameraHeadingAngle = This method sets the map view heading angle
		Note: the
 *   camera position will be automatically set in such a way, that it looks at the
 *   currently selected target point
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraHeadingAngleStubDispatcher(
    &MapViewerControlStub::setCameraHeadingAngle, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
 *   that the camera always looks at a given target
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraHeadingToTargetStubDispatcher(
    &MapViewerControlStub::setCameraHeadingToTarget, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
 *   that the camera always looks in the direction in which the car is moving
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraHeadingTrackUpStubDispatcher(
    &MapViewerControlStub::setCameraHeadingTrackUp, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getCameraHeading = This method returns the current camera heading
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::HeadingType, int32_t, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getCameraHeadingStubDispatcher(
    &MapViewerControlStub::getCameraHeading, "ii(dd)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr)));

/**
 * description: setCameraTiltAngle = This method sets the camera tilt angle
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraTiltAngleStubDispatcher(
    &MapViewerControlStub::setCameraTiltAngle, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getCameraTiltAngle = This method returns the camera tilt angle
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getCameraTiltAngleStubDispatcher(
    &MapViewerControlStub::getCameraTiltAngle, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setCameraRollAngle = This method sets the camera roll angle
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraRollAngleStubDispatcher(
    &MapViewerControlStub::setCameraRollAngle, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getCameraRollAngle = This method returns the camera roll angle
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getCameraRollAngleStubDispatcher(
    &MapViewerControlStub::getCameraRollAngle, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
 *   distance from the target point
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraDistanceFromTargetPointStubDispatcher(
    &MapViewerControlStub::setCameraDistanceFromTargetPoint, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
 *   distance from the target point
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<uint32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getCameraDistanceFromTargetPointStubDispatcher(
    &MapViewerControlStub::getCameraDistanceFromTargetPoint, "u",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setMapViewScaleMode = This method sets the scaling mode.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapScaleMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewScaleModeStubDispatcher(
    &MapViewerControlStub::setMapViewScaleMode, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewScaleMode = This method gets the scaling mode.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapScaleMode>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewScaleModeStubDispatcher(
    &MapViewerControlStub::getMapViewScaleMode, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::MapScaleMode>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewScaleModesStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewScaleModes, "ai",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: addMapViewScaleChangedListener = This method adds a listener which is notified
 *   when map view scale changes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::addMapViewScaleChangedListenerStubDispatcher(
    &MapViewerControlStub::addMapViewScaleChangedListener, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: removeMapViewScaleChangedListener = This method removes a listener which is
 *   notified when map view scale changes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::removeMapViewScaleChangedListenerStubDispatcher(
    &MapViewerControlStub::removeMapViewScaleChangedListener, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: setCameraHeight = This method sets the camera height
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setCameraHeightStubDispatcher(
    &MapViewerControlStub::setCameraHeight, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getCameraHeight = This method gets the camera height
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<uint32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getCameraHeightStubDispatcher(
    &MapViewerControlStub::getCameraHeight, "u",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setMapViewPerspective = This method sets the map perspective
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapPerspective>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewPerspectiveStubDispatcher(
    &MapViewerControlStub::setMapViewPerspective, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewPerspective = This method returns the current map perspective
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapPerspective>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewPerspectiveStubDispatcher(
    &MapViewerControlStub::getMapViewPerspective, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
 *   perspectives
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::MapPerspective>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewPerspectivesStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewPerspectives, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: setMapViewObjectVisibility = This method specifies the type of objects to show
 *   on the map.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapObjectVisibility>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, MapViewerControl_::MapObjectVisibilityDeployment_t>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewObjectVisibilityStubDispatcher(
    &MapViewerControlStub::setMapViewObjectVisibility, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
 *   map.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapObjectVisibility>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<MapViewerControl_::MapObjectVisibilityDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewObjectVisibilityStubDispatcher(
    &MapViewerControlStub::getMapViewObjectVisibility, "a{ib}",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr)));

/**
 * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
 *   visibilities.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::MapObject>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewObjectVisibilitiesStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewObjectVisibilities, "ai",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: getScaleList = This method returns a list of supported map scales
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::MapScale>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>>
    
    > MapViewerControlDBusStubAdapterInternal::getScaleListStubDispatcher(
    &MapViewerControlStub::getScaleList, "a(qqiu)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>*>(nullptr)));

/**
 * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewScaleStubDispatcher(
    &MapViewerControlStub::setMapViewScale, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
 *   value with respect to the currently set ScaleID
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewScaleByDeltaStubDispatcher(
    &MapViewerControlStub::setMapViewScaleByDelta, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
 *   the number of meters that a pixel represents
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, double>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewScaleByMetersPerPixelStubDispatcher(
    &MapViewerControlStub::setMapViewScaleByMetersPerPixel, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewScale = This method returns the currently used map scale
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<uint8_t, MapViewerControl::MapScaleType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewScaleStubDispatcher(
    &MapViewerControlStub::getMapViewScale, "yi",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setMapViewBoundingBox = This method sets the map bounding box
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Rectangle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewBoundingBoxStubDispatcher(
    &MapViewerControlStub::setMapViewBoundingBox, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewBoundingBox = This method returns the bounding box of a given map
 *   instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Rectangle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewBoundingBoxStubDispatcher(
    &MapViewerControlStub::getMapViewBoundingBox, "((dd)(dd))",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr)));

/**
 * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapViewArea>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, MapViewerControl_::MapViewAreaDeployment_t>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewSaveAreaStubDispatcher(
    &MapViewerControlStub::setMapViewSaveArea, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapViewArea>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<MapViewerControl_::MapViewAreaDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewSaveAreaStubDispatcher(
    &MapViewerControlStub::getMapViewSaveArea, "(dddd)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr)));

/**
 * description: setMapViewPan = This method pans a given map instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::PanAction, std::vector<MapViewerControl::Pixel>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewPanStubDispatcher(
    &MapViewerControlStub::setMapViewPan, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewPan
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::PanAction>,
    std::tuple<std::vector<MapViewerControl::Pixel>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewPanStubDispatcher(
    &MapViewerControlStub::getMapViewPan, "a(qq)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr)));

/**
 * description: setMapViewRotation = This method rotates the map
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, int32_t, int32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewRotationStubDispatcher(
    &MapViewerControlStub::setMapViewRotation, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewRotation = This method is particularly interesting for debugging
 *   purposes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<int32_t, int32_t>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewRotationStubDispatcher(
    &MapViewerControlStub::getMapViewRotation, "ii",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setMapViewVisibilityMode = This method sets the current visibility mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Visibility>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewVisibilityModeStubDispatcher(
    &MapViewerControlStub::setMapViewVisibilityMode, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewVisibilityMode = This method returns the current visibility mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::Visibility>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewVisibilityModeStubDispatcher(
    &MapViewerControlStub::getMapViewVisibilityMode, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
 *   mapview visibility modes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::Visibility>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewVisibilityModesStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewVisibilityModes, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
 *   map instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Level>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewPerformanceLevelStubDispatcher(
    &MapViewerControlStub::setMapViewPerformanceLevel, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
 *   given map instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::Level>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewPerformanceLevelStubDispatcher(
    &MapViewerControlStub::getMapViewPerformanceLevel, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
 *   perfomance levels
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::Level>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewPerformanceLevelsStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewPerformanceLevels, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: displayRoute = This method visualizes one of the calculated routes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::displayRouteStubDispatcher(
    &MapViewerControlStub::displayRoute, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: hideRoute = This method hides one of the visible routes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::hideRouteStubDispatcher(
    &MapViewerControlStub::hideRoute, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getDisplayedRoutes = This method returns a list of displayed routes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<MapViewerControl::DisplayedRoute>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>
    
    > MapViewerControlDBusStubAdapterInternal::getDisplayedRoutesStubDispatcher(
    &MapViewerControlStub::getDisplayedRoutes, "a(ub)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>*>(nullptr)));

/**
 * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getPoiCategoriesVisibleStubDispatcher(
    &MapViewerControlStub::getPoiCategoriesVisible, "au",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map.
                   Any specified category that until now
 *   was displayed with scale limits is now displayed without limits.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setPoiCategoriesVisibleStubDispatcher(
    &MapViewerControlStub::setPoiCategoriesVisible, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple());

/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map, where the POI's are only displayed in a specific range
 *   of scales.
                   Any specified category that until now was
 *   displayed without scale limits is now displayed with limits.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>, uint8_t, uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setPoiCategoriesVisibleWithinLimitsStubDispatcher(
    &MapViewerControlStub::setPoiCategoriesVisibleWithinLimits, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
 *   categories displayed on the map.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setPoiCategoriesNotVisibleStubDispatcher(
    &MapViewerControlStub::setPoiCategoriesNotVisible, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple());

/**
 * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
 *   map.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setTrafficIncidentsVisibilityStubDispatcher(
    &MapViewerControlStub::setTrafficIncidentsVisibility, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: setMapViewTheme = This method configures the theme of a given map view instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::MapTheme>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::setMapViewThemeStubDispatcher(
    &MapViewerControlStub::setMapViewTheme, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getMapViewTheme = This method returns the current theme of a given map view
 *   instance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::MapTheme>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapViewerControlDBusStubAdapterInternal::getMapViewThemeStubDispatcher(
    &MapViewerControlStub::getMapViewTheme, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<>,
    std::tuple<std::vector<MapViewerControl::MapTheme>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::getSupportedMapViewThemesStubDispatcher(
    &MapViewerControlStub::getSupportedMapViewThemes, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
 *   geographical coordinates
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<MapViewerControl::Pixel>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>>
    
    > MapViewerControlDBusStubAdapterInternal::convertPixelCoordsToGeoCoordsStubDispatcher(
    &MapViewerControlStub::convertPixelCoordsToGeoCoords, "a(dd)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>*>(nullptr)));

/**
 * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
 *   into pixel coordinates
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>>,
    std::tuple<std::vector<MapViewerControl::Pixel>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
    
    > MapViewerControlDBusStubAdapterInternal::convertGeoCoordsToPixelCoordsStubDispatcher(
    &MapViewerControlStub::convertGeoCoordsToPixelCoords, "a(qq)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr)));

/**
 * description: displayCustomElements = This method visualizes a set of custom elements on the
 *   map
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<MapViewerControl::CustomElement>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > MapViewerControlDBusStubAdapterInternal::displayCustomElementsStubDispatcher(
    &MapViewerControlStub::displayCustomElements, "au",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: hideCustomElements = This method hides a set of custom elements which were
 *   visualized by DisplayCustomElements
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > MapViewerControlDBusStubAdapterInternal::hideCustomElementsStubDispatcher(
    &MapViewerControlStub::hideCustomElements, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple());

/**
 * description: getDisplayedCustomElements = This method retrieves the visualized custom
 *   elements on the map
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<MapViewerControl::tCustomElementDict>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<MapViewerControl_::tCustomElementDictDeployment_t>
    
    > MapViewerControlDBusStubAdapterInternal::getDisplayedCustomElementsStubDispatcher(
    &MapViewerControlStub::getDisplayedCustomElements, "a{u(ss(dd)(nn))}",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<MapViewerControl_::tCustomElementDictDeployment_t*>(nullptr)));

/**
 * description: selectElementsOnMap = This method selects elements on the map view which are at
 *   the position specified by user input
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::MapViewerControlStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapViewerControl::Pixel, std::vector<MapViewerControl::SelectableMapType>, uint16_t>,
    std::tuple<std::vector<MapViewerControl::SelectedMapElement>>,
    std::tuple<CommonAPI::EmptyDeployment, MapViewerControl_::PixelDeployment_t, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>>
    
    > MapViewerControlDBusStubAdapterInternal::selectElementsOnMapStubDispatcher(
    &MapViewerControlStub::selectElementsOnMap, "a(i(dd)(yv))",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapViewerControl_::PixelDeployment_t*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>*>(nullptr)));



/**
 * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
 */
void MapViewerControlDBusStubAdapterInternal::fireFollowCarModeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const bool& followCarMode) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    bool
    >>::sendSignal(
            *this,
            "followCarModeChanged",
            "ub",
    mapViewInstanceHandle,
    followCarMode
    );
}
/**
 * description: cameraPositionChanged = This signal is emitted when the position of the camera
 *   changes
 */
void MapViewerControlDBusStubAdapterInternal::fireCameraPositionChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D& targetPoint) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
    >>::sendSignal(
            *this,
            "cameraPositionChanged",
            "u(ddd)",
    mapViewInstanceHandle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>(targetPoint, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr))
    );
}
/**
 * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
 *   camera changes
 */
void MapViewerControlDBusStubAdapterInternal::fireCameraHeadingChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType& headingType, const int32_t& headingAngle) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType,
    int32_t
    >>::sendSignal(
            *this,
            "CameraHeadingChanged",
            "uii",
    mapViewInstanceHandle,
    headingType,
    headingAngle
    );
}
/**
 * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
 *   changes
 */
void MapViewerControlDBusStubAdapterInternal::fireCameraTiltAngleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const int32_t& tilt) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    int32_t
    >>::sendSignal(
            *this,
            "cameraTiltAngleChanged",
            "ui",
    mapViewInstanceHandle,
    tilt
    );
}
/**
 * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
 *   distance from the target point changes
 */
void MapViewerControlDBusStubAdapterInternal::fireCameraDistanceFromTargetPointChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const uint32_t& distance) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    uint32_t
    >>::sendSignal(
            *this,
            "cameraDistanceFromTargetPointChanged",
            "uu",
    mapViewInstanceHandle,
    distance
    );
}
/**
 * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewScaleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const uint8_t& scaleID, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType& isMinMax) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    uint8_t,
    ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType
    >>::sendSignal(
            *this,
            "mapViewScaleChanged",
            "uyi",
    mapViewInstanceHandle,
    scaleID,
    isMinMax
    );
}
/**
 * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
 *   chnages
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewPerspectiveChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective& perspective) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective
    >>::sendSignal(
            *this,
            "MapViewPerspectiveChanged",
            "ui",
    mapViewInstanceHandle,
    perspective
    );
}
/**
 * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
 *   objects shown on the map changes
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewObjectVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility& objectVisibilityList) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t>
    >>::sendSignal(
            *this,
            "mapViewObjectVisibilityChanged",
            "ua{ib}",
    mapViewInstanceHandle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t>(objectVisibilityList, static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr))
    );
}
/**
 * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
 *   map instance changes
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewBoundingBoxChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle& boundingBox) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
    >>::sendSignal(
            *this,
            "mapViewBoundingBoxChanged",
            "u((dd)(dd))",
    mapViewInstanceHandle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>(boundingBox, static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr))
    );
}
/**
 * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
 *   guarantees not to cover with other windows or user interface elements chnages
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewSaveAreaChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea& saveArea) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t>
    >>::sendSignal(
            *this,
            "mapViewSaveAreaChanged",
            "u(dddd)",
    mapViewInstanceHandle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t>(saveArea, static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr))
    );
}
/**
 * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
 *   changes
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility& visibilityMode) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility
    >>::sendSignal(
            *this,
            "mapViewVisibilityChanged",
            "ui",
    mapViewInstanceHandle,
    visibilityMode
    );
}
/**
 * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
 *   level of a map instance changes
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewPerformanceLevelChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level& performanceLevel) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level
    >>::sendSignal(
            *this,
            "mapViewPerformanceLevelChanged",
            "ui",
    mapViewInstanceHandle,
    performanceLevel
    );
}
/**
 * description: displayedRoutes = This signal is emitted when the list of displayed routes
 *   change
 */
void MapViewerControlDBusStubAdapterInternal::fireDisplayedRoutesEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute>& displayedRoutes) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>
    >>::sendSignal(
            *this,
            "displayedRoutes",
            "ua(ub)",
    mapViewInstanceHandle,
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>(displayedRoutes, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>*>(nullptr))
    );
}
/**
 * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
 *   POI categories on a map instance changes
 */
void MapViewerControlDBusStubAdapterInternal::firePoiCategoriesVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID>& poiCategoryIds, const bool& visible, const uint8_t& minScaleID, const uint8_t& maxScaleID) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    bool,
    uint8_t,
    uint8_t
    >>::sendSignal(
            *this,
            "poiCategoriesVisibilityChanged",
            "uaubyy",
    mapViewInstanceHandle,
    CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
    visible,
    minScaleID,
    maxScaleID
    );
}
/**
 * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
 *   instance changes
 */
void MapViewerControlDBusStubAdapterInternal::fireMapViewThemeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme& mapViewTheme) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme
    >>::sendSignal(
            *this,
            "mapViewThemeChanged",
            "ui",
    mapViewInstanceHandle,
    mapViewTheme
    );
}


const MapViewerControlDBusStubAdapterHelper::StubDispatcherTable& MapViewerControlDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& MapViewerControlDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

MapViewerControlDBusStubAdapterInternal::MapViewerControlDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      MapViewerControlDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<MapViewerControlStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: getVersion = This method returns the API version implemented by the server
             *   application
             */
            { { "getVersion", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: createMapViewInstance = This method creates a new map instance
             */
            { { "createMapViewInstance", "u(qq)i" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::createMapViewInstanceStubDispatcher },
            /**
             * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
             *   instance. Only invisible map instances can be released
             */
            { { "releaseMapViewInstance", "uu" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::releaseMapViewInstanceStubDispatcher },
            /**
             * description: getMapViewType = This method returns the map type of a map instance as it was
             *   set using CreateMapViewInstance
             */
            { { "getMapViewType", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewTypeStubDispatcher },
            /**
             * description: getSupportedMapViewTypes = This method retrieves the supported map view types
             */
            { { "getSupportedMapViewTypes", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewTypesStubDispatcher },
            /**
             * description: setTargetPoint = This method sets the position of the point the camera is
             *   always aimed at
             */
            { { "setTargetPoint", "uu(ddd)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setTargetPointStubDispatcher },
            /**
             * description: getTargetPoint = This method retrieves the target point position
             */
            { { "getTargetPoint", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getTargetPointStubDispatcher },
            /**
             * description: setFollowCarMode = This method sets the FollowCar mode
             */
            { { "setFollowCarMode", "uub" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setFollowCarModeStubDispatcher },
            /**
             * description: getFollowCarMode = This method returns the current FollowCar-mode
             */
            { { "getFollowCarMode", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getFollowCarModeStubDispatcher },
            /**
             * description: setCameraPosition = This method sets the coordinates of the point at which the
             *   camera must be positioned
            		Note: the camera heading will be automatically set
             *   in such a way, that the camera is aimed at the view point
             */
            { { "setCameraPosition", "uu(ddd)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraPositionStubDispatcher },
            /**
             * description: getCameraPosition = This method returns the coordinates of the point at which
             *   the camera is positioned
             */
            { { "getCameraPosition", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getCameraPositionStubDispatcher },
            /**
             * description: setCameraHeadingAngle = This method sets the map view heading angle
            		Note: the
             *   camera position will be automatically set in such a way, that it looks at the
             *   currently selected target point
             */
            { { "setCameraHeadingAngle", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraHeadingAngleStubDispatcher },
            /**
             * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
             *   that the camera always looks at a given target
             */
            { { "setCameraHeadingToTarget", "uu(dd)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraHeadingToTargetStubDispatcher },
            /**
             * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
             *   that the camera always looks in the direction in which the car is moving
             */
            { { "setCameraHeadingTrackUp", "uu" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraHeadingTrackUpStubDispatcher },
            /**
             * description: getCameraHeading = This method returns the current camera heading
             */
            { { "getCameraHeading", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getCameraHeadingStubDispatcher },
            /**
             * description: setCameraTiltAngle = This method sets the camera tilt angle
             */
            { { "setCameraTiltAngle", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraTiltAngleStubDispatcher },
            /**
             * description: getCameraTiltAngle = This method returns the camera tilt angle
             */
            { { "getCameraTiltAngle", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getCameraTiltAngleStubDispatcher },
            /**
             * description: setCameraRollAngle = This method sets the camera roll angle
             */
            { { "setCameraRollAngle", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraRollAngleStubDispatcher },
            /**
             * description: getCameraRollAngle = This method returns the camera roll angle
             */
            { { "getCameraRollAngle", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getCameraRollAngleStubDispatcher },
            /**
             * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
             *   distance from the target point
             */
            { { "setCameraDistanceFromTargetPoint", "uuu" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraDistanceFromTargetPointStubDispatcher },
            /**
             * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
             *   distance from the target point
             */
            { { "getCameraDistanceFromTargetPoint", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getCameraDistanceFromTargetPointStubDispatcher },
            /**
             * description: setMapViewScaleMode = This method sets the scaling mode.
             */
            { { "setMapViewScaleMode", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewScaleModeStubDispatcher },
            /**
             * description: getMapViewScaleMode = This method gets the scaling mode.
             */
            { { "getMapViewScaleMode", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewScaleModeStubDispatcher },
            /**
             * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
             */
            { { "getSupportedMapViewScaleModes", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewScaleModesStubDispatcher },
            /**
             * description: addMapViewScaleChangedListener = This method adds a listener which is notified
             *   when map view scale changes.
             */
            { { "addMapViewScaleChangedListener", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::addMapViewScaleChangedListenerStubDispatcher },
            /**
             * description: removeMapViewScaleChangedListener = This method removes a listener which is
             *   notified when map view scale changes.
             */
            { { "removeMapViewScaleChangedListener", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::removeMapViewScaleChangedListenerStubDispatcher },
            /**
             * description: setCameraHeight = This method sets the camera height
             */
            { { "setCameraHeight", "uuu" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setCameraHeightStubDispatcher },
            /**
             * description: getCameraHeight = This method gets the camera height
             */
            { { "getCameraHeight", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getCameraHeightStubDispatcher },
            /**
             * description: setMapViewPerspective = This method sets the map perspective
             */
            { { "setMapViewPerspective", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewPerspectiveStubDispatcher },
            /**
             * description: getMapViewPerspective = This method returns the current map perspective
             */
            { { "getMapViewPerspective", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewPerspectiveStubDispatcher },
            /**
             * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
             *   perspectives
             */
            { { "getSupportedMapViewPerspectives", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewPerspectivesStubDispatcher },
            /**
             * description: setMapViewObjectVisibility = This method specifies the type of objects to show
             *   on the map.
             */
            { { "setMapViewObjectVisibility", "uua{ib}" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewObjectVisibilityStubDispatcher },
            /**
             * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
             *   map.
             */
            { { "getMapViewObjectVisibility", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewObjectVisibilityStubDispatcher },
            /**
             * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
             *   visibilities.
             */
            { { "getSupportedMapViewObjectVisibilities", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewObjectVisibilitiesStubDispatcher },
            /**
             * description: getScaleList = This method returns a list of supported map scales
             */
            { { "getScaleList", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getScaleListStubDispatcher },
            /**
             * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
             */
            { { "setMapViewScale", "uuq" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewScaleStubDispatcher },
            /**
             * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
             *   value with respect to the currently set ScaleID
             */
            { { "setMapViewScaleByDelta", "uun" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewScaleByDeltaStubDispatcher },
            /**
             * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
             *   the number of meters that a pixel represents
             */
            { { "setMapViewScaleByMetersPerPixel", "uud" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewScaleByMetersPerPixelStubDispatcher },
            /**
             * description: getMapViewScale = This method returns the currently used map scale
             */
            { { "getMapViewScale", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewScaleStubDispatcher },
            /**
             * description: setMapViewBoundingBox = This method sets the map bounding box
             */
            { { "setMapViewBoundingBox", "uu((dd)(dd))" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewBoundingBoxStubDispatcher },
            /**
             * description: getMapViewBoundingBox = This method returns the bounding box of a given map
             *   instance
             */
            { { "getMapViewBoundingBox", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewBoundingBoxStubDispatcher },
            /**
             * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
             *   to 
            		cover with other windows or user interface elements
             */
            { { "setMapViewSaveArea", "uu(dddd)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewSaveAreaStubDispatcher },
            /**
             * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
             *   to 
            		cover with other windows or user interface elements
             */
            { { "getMapViewSaveArea", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewSaveAreaStubDispatcher },
            /**
             * description: setMapViewPan = This method pans a given map instance
             */
            { { "setMapViewPan", "uuia(qq)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewPanStubDispatcher },
            /**
             * description: getMapViewPan
             */
            { { "getMapViewPan", "ui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewPanStubDispatcher },
            /**
             * description: setMapViewRotation = This method rotates the map
             */
            { { "setMapViewRotation", "uuii" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewRotationStubDispatcher },
            /**
             * description: getMapViewRotation = This method is particularly interesting for debugging
             *   purposes
             */
            { { "getMapViewRotation", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewRotationStubDispatcher },
            /**
             * description: setMapViewVisibilityMode = This method sets the current visibility mode
             */
            { { "setMapViewVisibilityMode", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewVisibilityModeStubDispatcher },
            /**
             * description: getMapViewVisibilityMode = This method returns the current visibility mode
             */
            { { "getMapViewVisibilityMode", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewVisibilityModeStubDispatcher },
            /**
             * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
             *   mapview visibility modes
             */
            { { "getSupportedMapViewVisibilityModes", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewVisibilityModesStubDispatcher },
            /**
             * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
             *   map instance
             */
            { { "setMapViewPerformanceLevel", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewPerformanceLevelStubDispatcher },
            /**
             * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
             *   given map instance
             */
            { { "getMapViewPerformanceLevel", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewPerformanceLevelStubDispatcher },
            /**
             * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
             *   perfomance levels
             */
            { { "getSupportedMapViewPerformanceLevels", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewPerformanceLevelsStubDispatcher },
            /**
             * description: displayRoute = This method visualizes one of the calculated routes
             */
            { { "displayRoute", "uuub" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::displayRouteStubDispatcher },
            /**
             * description: hideRoute = This method hides one of the visible routes
             */
            { { "hideRoute", "uuu" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::hideRouteStubDispatcher },
            /**
             * description: getDisplayedRoutes = This method returns a list of displayed routes
             */
            { { "getDisplayedRoutes", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getDisplayedRoutesStubDispatcher },
            /**
             * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
             */
            { { "getPoiCategoriesVisible", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getPoiCategoriesVisibleStubDispatcher },
            /**
             * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
             *   displayed on the map.
                               Any specified category that until now
             *   was displayed with scale limits is now displayed without limits.
             */
            { { "setPoiCategoriesVisible", "uuau" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setPoiCategoriesVisibleStubDispatcher },
            /**
             * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
             *   displayed on the map, where the POI's are only displayed in a specific range
             *   of scales.
                               Any specified category that until now was
             *   displayed without scale limits is now displayed with limits.
             */
            { { "setPoiCategoriesVisibleWithinLimits", "uuauyy" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setPoiCategoriesVisibleWithinLimitsStubDispatcher },
            /**
             * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
             *   categories displayed on the map.
             */
            { { "setPoiCategoriesNotVisible", "uuau" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setPoiCategoriesNotVisibleStubDispatcher },
            /**
             * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
             *   map.
             */
            { { "setTrafficIncidentsVisibility", "uub" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setTrafficIncidentsVisibilityStubDispatcher },
            /**
             * description: setMapViewTheme = This method configures the theme of a given map view instance
             */
            { { "setMapViewTheme", "uui" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::setMapViewThemeStubDispatcher },
            /**
             * description: getMapViewTheme = This method returns the current theme of a given map view
             *   instance
             */
            { { "getMapViewTheme", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewThemeStubDispatcher },
            /**
             * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
             */
            { { "getSupportedMapViewThemes", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getSupportedMapViewThemesStubDispatcher },
            /**
             * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
             *   geographical coordinates
             */
            { { "convertPixelCoordsToGeoCoords", "uua(qq)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::convertPixelCoordsToGeoCoordsStubDispatcher },
            /**
             * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
             *   into pixel coordinates
             */
            { { "convertGeoCoordsToPixelCoords", "uua(dd)" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::convertGeoCoordsToPixelCoordsStubDispatcher },
            /**
             * description: displayCustomElements = This method visualizes a set of custom elements on the
             *   map
             */
            { { "displayCustomElements", "uua(ss(dd)(nn))" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::displayCustomElementsStubDispatcher },
            /**
             * description: hideCustomElements = This method hides a set of custom elements which were
             *   visualized by DisplayCustomElements
             */
            { { "hideCustomElements", "uuau" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::hideCustomElementsStubDispatcher },
            /**
             * description: getDisplayedCustomElements = This method retrieves the visualized custom
             *   elements on the map
             */
            { { "getDisplayedCustomElements", "u" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getDisplayedCustomElementsStubDispatcher },
            /**
             * description: selectElementsOnMap = This method selects elements on the map view which are at
             *   the position specified by user input
             */
            { { "selectElementsOnMap", "u(qq)aiq" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::selectElementsOnMapStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::mapviewer::MapViewerControlDBusStubAdapterInternal::getMapViewerControlInterfaceVersionStubDispatcher });
}

bool MapViewerControlDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
