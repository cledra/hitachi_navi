/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/poiservice/POIContentAccessModuleStub.hpp>
#include "v4/org/genivi/navigation/poiservice/POIContentAccessModuleDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/poiservice/POIServiceTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

typedef CommonAPI::DBus::DBusStubAdapterHelper<POIContentAccessModuleStub> POIContentAccessModuleDBusStubAdapterHelper;

class POIContentAccessModuleDBusStubAdapterInternal
    : public virtual POIContentAccessModuleStubAdapter,
      public POIContentAccessModuleDBusStubAdapterHelper
{
public:
    POIContentAccessModuleDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~POIContentAccessModuleDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return POIContentAccessModule::getInterface();
    }


    /**
     * description: ConfigurationChanged = This signal is sent to the clients when one or more
     *   configuration settings changes.
     */
    void fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings>& changedSettings);
    /**
     * description: CategoriesRemoved = This signal is emitted when a list of categories and
     *   associated content has been removed from the database.
     */
    void fireCategoriesRemovedEvent(const std::vector<::v4::org::genivi::CommonTypes::CategoryID>& categories);
    /**
     * description: POIAdded = This signal is emitted when a list of POIs and associated content
     *   has been added to the database. It returns the ids.
     */
    void firePOIAddedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>& pois);
    /**
     * description: POIRemoved = This signal is emitted when a list of POIs and associated content
     *   has been removed from the database.
     */
    void firePOIRemovedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>& pois);
    /**
     * description: SearchStatusChanged = This signal updates the search or proximity alert status
     *   of the specified handle.
     */
    void fireSearchStatusChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState& statusValue, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>& pois);


    const POIContentAccessModuleDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
        CommonAPI::Version
        > getPOIContentAccessModuleInterfaceVersionStubDispatcher;



/**
 * description: This method returns the API version implemented by the content access module.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: Set the current language set for the search by poi provider module.         The
 *   language defines the poi and categories name and details language. If the
 *   language is not supported, the default details will be returned in the native
 *   language.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<std::string, std::string, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > setLocaleStubDispatcher;
/**
 * description: Get the current language set for the search by poi provider module.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<>,
    std::tuple<std::string, std::string, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>
    
    > getLocaleStubDispatcher;
/**
 * description: Get the supported set of locales for the search by poi provider module.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>>
    
    > getSupportedLocalesStubDispatcher;
/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
    
    > getAvailableCategoriesStubDispatcher;
/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getRootCategoryStubDispatcher;
/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
    
    > getChildrenCategoriesStubDispatcher;
/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
    
    > getParentCategoriesStubDispatcher;
/**
 * description: Creates a category by name and return an unique id.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > createCategoryStubDispatcher;
/**
 * description: Removes a list of categories. Because of required time to remove it from the
 *   database, a signal is emitted when the deletion is done.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > removeCategoriesStubDispatcher;
/**
 * description: Adds a list of POIs to a category. Because of required time to add it to the
 *   database, a signal is emitted when the update is done, that gives the id of
 *   the elements added
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t>>,
    std::tuple<>
    
    > addPOIsStubDispatcher;
/**
 * description: Removes a list of POIs to a category. Because of required time to remove it
 *   from the database, a signal is emitted when the update is done.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > removePOIsStubDispatcher;
/**
 * description: This method is sent by the POI service component to inform all the CAM that a
 *   new POI search was started.         It provides all the relevant search
 *   parameters. Of course the CAM will only be aware of the search if it registers
 *   one of the search categories.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, uint16_t, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, std::string, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > poiSearchStartedStubDispatcher;
/**
 * description: This method cancels the search for the current id.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > poiSearchCanceledStubDispatcher;
/**
 * description: This method provides the poi results list found by the CAM.         As the POI
 *   unique id is managed by the POI component, the CAM only provides the POI name,
 *   the category and coordinates as well as all the relevant detailed information.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>>,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, uint16_t, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>>
    
    > resultListRequestedStubDispatcher;
/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessModuleStub,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
    
    > poiDetailsRequestedStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    POIContentAccessModuleDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class POIContentAccessModuleDBusStubAdapter
    : public POIContentAccessModuleDBusStubAdapterInternal,
      public std::enable_shared_from_this<POIContentAccessModuleDBusStubAdapter> {
public:
    POIContentAccessModuleDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          POIContentAccessModuleDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_DBUS_STUB_ADAPTER_HPP_
