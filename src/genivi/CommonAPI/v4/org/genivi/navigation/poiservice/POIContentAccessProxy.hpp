/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers a set of common methods for Content Access Modules (CAM).
 *   The CAM provide and update POI and categories information from remote sources
 *   to the POIService modules.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_PROXY_HPP_

#include <v4/org/genivi/navigation/poiservice/POIContentAccessProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

template <typename ... _AttributeExtensions>
class POIContentAccessProxy
    : virtual public POIContentAccess, 
      virtual public POIContentAccessProxyBase,
      virtual public _AttributeExtensions... {
public:
    POIContentAccessProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~POIContentAccessProxy();

    typedef POIContentAccess InterfaceType;




    /**
     * description: Register to the POI provider module          When the CAM registers, it
     *   provides a name and then get a unique id. This id must be used everytime the
     *   CAM communicates with the POI service component.         After the
     *   registration is done, the CAM can start to update POI categories and POI
     *   attributes as well as registers POI categories to search for.
     * Calls registerContentAccessModule with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void registerContentAccessModule(const std::string &_moduleName, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls registerContentAccessModule with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> registerContentAccessModuleAsync(const std::string &_moduleName, RegisterContentAccessModuleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Remove CAM from POI provider module.
     * Calls unRegisterContentAccessModule with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void unRegisterContentAccessModule(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls unRegisterContentAccessModule with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> unRegisterContentAccessModuleAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, UnRegisterContentAccessModuleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Register to the POI provider module the categories you can search for POI.     
     *      The categories could be predifined one or customized ones. In order to
     *   register a customized category, you might need to create it before and add it
     *   to the POI service component.
     * Calls registerPoiCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void registerPoiCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls registerPoiCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> registerPoiCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RegisterPoiCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Update categories in the POI service component. It could be a predifined or a
     *   customed one.         The CAM provides for each categories the list of
     *   attributes (mandatories like name or optional) it wants to update.        
     *   Depending on the local database write policy, the CAM might only be able to
     *   update customized attributes for a category and not the predefined ones so
     *   some update could be rejected.
     * Calls updateCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, UpdateCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Add new categories to the POI service component.         The CAM provides for
     *   each categories the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ...  .
     * Calls addCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoriesId, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls addCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, AddCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Remove categories from the POI service component. It could be a predifined or a
     *   customed one.         Depending on the local database write policy, the CAM
     *   might only not be able to remove some categories.
     * Calls removeCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void removeCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls removeCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> removeCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RemoveCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<POIContentAccessProxyBase> delegate_;
};

typedef POIContentAccessProxy<> POIContentAccessProxyDefault;


//
// POIContentAccessProxy Implementation
//
template <typename ... _AttributeExtensions>
POIContentAccessProxy<_AttributeExtensions...>::POIContentAccessProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<POIContentAccessProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<POIContentAccessProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
POIContentAccessProxy<_AttributeExtensions...>::~POIContentAccessProxy() {
}

/**
 * description: Register to the POI provider module          When the CAM registers, it
 *   provides a name and then get a unique id. This id must be used everytime the
 *   CAM communicates with the POI service component.         After the
 *   registration is done, the CAM can start to update POI categories and POI
 *   attributes as well as registers POI categories to search for.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessProxy<_AttributeExtensions...>::registerContentAccessModule(const std::string &_moduleName, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const CommonAPI::CallInfo *_info) {
    delegate_->registerContentAccessModule(_moduleName, _internalCallStatus, _camId, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessProxy<_AttributeExtensions...>::registerContentAccessModuleAsync(const std::string &_moduleName, RegisterContentAccessModuleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->registerContentAccessModuleAsync(_moduleName, _callback, _info);
}
/**
 * description: Remove CAM from POI provider module.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessProxy<_AttributeExtensions...>::unRegisterContentAccessModule(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->unRegisterContentAccessModule(_camId, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessProxy<_AttributeExtensions...>::unRegisterContentAccessModuleAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, UnRegisterContentAccessModuleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->unRegisterContentAccessModuleAsync(_camId, _callback, _info);
}
/**
 * description: Register to the POI provider module the categories you can search for POI.     
 *      The categories could be predifined one or customized ones. In order to
 *   register a customized category, you might need to create it before and add it
 *   to the POI service component.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessProxy<_AttributeExtensions...>::registerPoiCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->registerPoiCategories(_camId, _poiCategories, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessProxy<_AttributeExtensions...>::registerPoiCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RegisterPoiCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->registerPoiCategoriesAsync(_camId, _poiCategories, _callback, _info);
}
/**
 * description: Update categories in the POI service component. It could be a predifined or a
 *   customed one.         The CAM provides for each categories the list of
 *   attributes (mandatories like name or optional) it wants to update.        
 *   Depending on the local database write policy, the CAM might only be able to
 *   update customized attributes for a category and not the predefined ones so
 *   some update could be rejected.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessProxy<_AttributeExtensions...>::updateCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->updateCategories(_camId, _poiCategories, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessProxy<_AttributeExtensions...>::updateCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, UpdateCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateCategoriesAsync(_camId, _poiCategories, _callback, _info);
}
/**
 * description: Add new categories to the POI service component.         The CAM provides for
 *   each categories the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ...  .
 */
template <typename ... _AttributeExtensions>
void POIContentAccessProxy<_AttributeExtensions...>::addCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoriesId, const CommonAPI::CallInfo *_info) {
    delegate_->addCategories(_camId, _poiCategories, _internalCallStatus, _poiCategoriesId, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessProxy<_AttributeExtensions...>::addCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, AddCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->addCategoriesAsync(_camId, _poiCategories, _callback, _info);
}
/**
 * description: Remove categories from the POI service component. It could be a predifined or a
 *   customed one.         Depending on the local database write policy, the CAM
 *   might only not be able to remove some categories.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessProxy<_AttributeExtensions...>::removeCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->removeCategories(_camId, _poiCategories, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessProxy<_AttributeExtensions...>::removeCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RemoveCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->removeCategoriesAsync(_camId, _poiCategories, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &POIContentAccessProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool POIContentAccessProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool POIContentAccessProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& POIContentAccessProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& POIContentAccessProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_PROXY_HPP_
