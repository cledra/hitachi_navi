/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/poiservice/POISearchStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

/**
 * Provides a default implementation for POISearchStubRemoteEvent and
 * POISearchStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class POISearchStubDefault
    : public virtual POISearchStub {
public:
    POISearchStubDefault();

    POISearchStubRemoteEvent* initStubAdapter(const std::shared_ptr<POISearchStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply);
    /**
     * description: This method allows the application to validate that POI categories are
     *   supported by the POI component and the Content access modules.
     */
    virtual void validateCategories(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _categories, validateCategoriesReply_t _reply);
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     */
    virtual void getAvailableCategories(const std::shared_ptr<CommonAPI::ClientId> _client, getAvailableCategoriesReply_t _reply);
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     */
    virtual void getRootCategory(const std::shared_ptr<CommonAPI::ClientId> _client, getRootCategoryReply_t _reply);
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     */
    virtual void getChildrenCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getChildrenCategoriesReply_t _reply);
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     */
    virtual void getParentCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getParentCategoriesReply_t _reply);
    /**
     * description: This method retrieves the details associated to one or more POI categories.    
     *       It contains the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ... .
     */
    virtual void getCategoriesDetails(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _categories, getCategoriesDetailsReply_t _reply);
    /**
     * description: This method creates a new search input and retrieves a handle .
     */
    virtual void createPoiSearchHandle(const std::shared_ptr<CommonAPI::ClientId> _client, createPoiSearchHandleReply_t _reply);
    /**
     * description: This method deletes a search input and its associated resources.
     */
    virtual void deletePoiSearchHandle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, deletePoiSearchHandleReply_t _reply);
    /**
     * description: This method sets the location to start the search around.         If a route
     *   handle was defined before, it will be replaced by this location.
     */
    virtual void setCenter(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _location, setCenterReply_t _reply);
    /**
     * description: This method allows to start a POI search along a guided route.         The
     *   route handle must be valid or the POI search will failed.         If a search
     *   location was defined before, it will be replaced by the route.
     */
    virtual void setRouteHandle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, uint32_t _startSearchOffset, uint32_t _endSearchOffset, setRouteHandleReply_t _reply);
    /**
     * description: This method sets the POI categories for the current search input and the
     *   corresponding result-lists for the current session .
     */
    virtual void setCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> _poiCategories, setCategoriesReply_t _reply);
    /**
     * description: This method set POI attributes (optional) for the current search input and the
     *   corresponding result-lists for the current session         An attribute is
     *   attached to a category.
     */
    virtual void setAttributes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> _poiAttributes, setAttributesReply_t _reply);
    /**
     * description: This method sends the search input for the search handle.         The search
     *   will start with the either the location or the route handle.         If no
     *   positon or route handle were configured, the search will use the vehicle
     *   position are center location.
     */
    virtual void startPoiSearch(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::string _inputString, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption _sortOption, startPoiSearchReply_t _reply);
    /**
     * description: This method cancels the search for the current session.
     */
    virtual void cancelPoiSearch(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, cancelPoiSearchReply_t _reply);
    /**
     * description: This method starts to check for POI aound vehicle according to the criteria
     *   defined with the unique handle.         By default, it will search for POI
     *   around vehicle position with default radius defined for each categories.      
     *     If a route handle was defined, it will search along the route with default
     *   categorie's radius.
     */
    virtual void startPoiProximityAlert(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::string _inputString, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption _sortOption, startPoiProximityAlertReply_t _reply);
    /**
     * description: This method cancels the search for the current session.
     */
    virtual void cancelPoiProximityAlert(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, cancelPoiProximityAlertReply_t _reply);
    /**
     * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
     */
    virtual void requestResultList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, uint16_t _offset, uint16_t _maxWindowSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> _attributeList, requestResultListReply_t _reply);
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... ..
     */
    virtual void getPoiDetails(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> _id, getPoiDetailsReply_t _reply);

/**
 * description: This signal indicates that one or more POI categories were added, updated or
 *   removed.
 */
virtual void fireCategoriesUpdatedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason> &_poiCategories);
/**
 * description: This signal updates the search or proximity alert status of the specified
 *   handle.
 */
virtual void firePoiStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue);
/**
 * description: This signal updates in the poi results list.
 */
virtual void fireResultListChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_resultListSize);


protected:
    class RemoteEventHandler: public virtual POISearchStubRemoteEvent {
    public:
        RemoteEventHandler(POISearchStubDefault *_defaultStub);


    private:
        POISearchStubDefault *defaultStub_;
    };
private:
    POISearchStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_STUB_DEFAULT
