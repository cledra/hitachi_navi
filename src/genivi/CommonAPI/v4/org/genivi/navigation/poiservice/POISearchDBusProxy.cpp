/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#include <v4/org/genivi/navigation/poiservice/POISearchDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPOISearchDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<POISearchDBusProxy>(_address, _connection);
}

INITIALIZER(registerPOISearchDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		POISearch::getInterface(),
		&createPOISearchDBusProxy);
}

POISearchDBusProxy::POISearchDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		categoriesUpdated_(*this, "CategoriesUpdated", "a(ui)", std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndReasonDeployment_t>*>(nullptr))),
		poiStatus_(*this, "PoiStatus", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		resultListChanged_(*this, "ResultListChanged", "uq", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


POISearchDBusProxy::CategoriesUpdatedEvent& POISearchDBusProxy::getCategoriesUpdatedEvent() {
    return categoriesUpdated_;
}
POISearchDBusProxy::PoiStatusEvent& POISearchDBusProxy::getPoiStatusEvent() {
    return poiStatus_;
}
POISearchDBusProxy::ResultListChangedEvent& POISearchDBusProxy::getResultListChangedEvent() {
    return resultListChanged_;
}
    
    /**
     * description: This method returns the API version implemented by the content access module.
     */
    void POISearchDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: This method allows the application to validate that POI categories are
     *   supported by the POI component and the Content access modules.
     */
    void POISearchDBusProxy::validateCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus> &_results, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_categories(_categories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "validateCategories",
        "au",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_categories,
_internalCallStatus,
deploy_results);
_results = deploy_results.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::validateCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, ValidateCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_categories(_categories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "validateCategories",
        "au",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_categories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>> _results) {
        	if (_callback)
        		_callback(_internalCallStatus, _results.getValue());
        },
        std::make_tuple(deploy_results));
    }
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     */
    void POISearchDBusProxy::getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getAvailableCategories",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_categories);
_categories = deploy_categories.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getAvailableCategories",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>> _categories) {
        	if (_callback)
        		_callback(_internalCallStatus, _categories.getValue());
        },
        std::make_tuple(deploy_categories));
    }
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     */
    void POISearchDBusProxy::getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getRootCategory",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_category);
_category = deploy_category.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getRootCategoryAsync(GetRootCategoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getRootCategory",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> _category) {
        	if (_callback)
        		_callback(_internalCallStatus, _category.getValue());
        },
        std::make_tuple(deploy_category));
    }
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     */
    void POISearchDBusProxy::getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getChildrenCategories",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_category,
_internalCallStatus,
deploy_categories);
_categories = deploy_categories.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getChildrenCategories",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_category,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> _categories) {
        	if (_callback)
        		_callback(_internalCallStatus, _categories.getValue());
        },
        std::make_tuple(deploy_categories));
    }
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     */
    void POISearchDBusProxy::getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getParentCategories",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_category,
_internalCallStatus,
deploy_categories);
_categories = deploy_categories.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getParentCategories",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_category,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> _categories) {
        	if (_callback)
        		_callback(_internalCallStatus, _categories.getValue());
        },
        std::make_tuple(deploy_categories));
    }
    /**
     * description: This method retrieves the details associated to one or more POI categories.    
     *       It contains the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ... .
     */
    void POISearchDBusProxy::getCategoriesDetails(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category> &_results, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_categories(_categories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getCategoriesDetails",
        "au",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_categories,
_internalCallStatus,
deploy_results);
_results = deploy_results.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getCategoriesDetailsAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, GetCategoriesDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_categories(_categories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getCategoriesDetails",
        "au",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_categories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>> _results) {
        	if (_callback)
        		_callback(_internalCallStatus, _results.getValue());
        },
        std::make_tuple(deploy_results));
    }
    /**
     * description: This method creates a new search input and retrieves a handle .
     */
    void POISearchDBusProxy::createPoiSearchHandle(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createPoiSearchHandle",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_poiSearchHandle);
_poiSearchHandle = deploy_poiSearchHandle.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::createPoiSearchHandleAsync(CreatePoiSearchHandleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createPoiSearchHandle",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> _poiSearchHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _poiSearchHandle.getValue());
        },
        std::make_tuple(deploy_poiSearchHandle));
    }
    /**
     * description: This method deletes a search input and its associated resources.
     */
    void POISearchDBusProxy::deletePoiSearchHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "deletePoiSearchHandle",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::deletePoiSearchHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, DeletePoiSearchHandleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "deletePoiSearchHandle",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method sets the location to start the search around.         If a route
     *   handle was defined before, it will be replaced by this location.
     */
    void POISearchDBusProxy::setCenter(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_location(_location, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCenter",
        "u(ddd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_location,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::setCenterAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, SetCenterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_location(_location, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCenter",
        "u(ddd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_location,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method allows to start a POI search along a guided route.         The
     *   route handle must be valid or the POI search will failed.         If a search
     *   location was defined before, it will be replaced by the route.
     */
    void POISearchDBusProxy::setRouteHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_startSearchOffset(_startSearchOffset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_endSearchOffset(_endSearchOffset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setRouteHandle",
        "uuuuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_sessionHandle, deploy_routeHandle, deploy_startSearchOffset, deploy_endSearchOffset,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::setRouteHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, SetRouteHandleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_startSearchOffset(_startSearchOffset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_endSearchOffset(_endSearchOffset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setRouteHandle",
        "uuuuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_sessionHandle, deploy_routeHandle, deploy_startSearchOffset, deploy_endSearchOffset,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method sets the POI categories for the current search input and the
     *   corresponding result-lists for the current session .
     */
    void POISearchDBusProxy::setCategories(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCategories",
        "ua(uu)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_poiCategories,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::setCategoriesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, SetCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCategories",
        "ua(uu)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_poiCategories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method set POI attributes (optional) for the current search input and the
     *   corresponding result-lists for the current session         An attribute is
     *   attached to a category.
     */
    void POISearchDBusProxy::setAttributes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>> deploy_poiAttributes(_poiAttributes, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setAttributes",
        "ua(uui(yv)ib)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_poiAttributes,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::setAttributesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, SetAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>> deploy_poiAttributes(_poiAttributes, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setAttributes",
        "ua(uui(yv)ib)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_poiAttributes,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method sends the search input for the search handle.         The search
     *   will start with the either the location or the route handle.         If no
     *   positon or route handle were configured, the search will use the vehicle
     *   position are center location.
     */
    void POISearchDBusProxy::startPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment> deploy_sortOption(_sortOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "startPoiSearch",
        "usi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_inputString, deploy_sortOption,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::startPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment> deploy_sortOption(_sortOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "startPoiSearch",
        "usi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_inputString, deploy_sortOption,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method cancels the search for the current session.
     */
    void POISearchDBusProxy::cancelPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "cancelPoiSearch",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::cancelPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "cancelPoiSearch",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method starts to check for POI aound vehicle according to the criteria
     *   defined with the unique handle.         By default, it will search for POI
     *   around vehicle position with default radius defined for each categories.      
     *     If a route handle was defined, it will search along the route with default
     *   categorie's radius.
     */
    void POISearchDBusProxy::startPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment> deploy_sortOption(_sortOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "startPoiProximityAlert",
        "usi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_inputString, deploy_sortOption,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::startPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiProximityAlertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment> deploy_sortOption(_sortOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "startPoiProximityAlert",
        "usi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_inputString, deploy_sortOption,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method cancels the search for the current session.
     */
    void POISearchDBusProxy::cancelPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "cancelPoiProximityAlert",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::cancelPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiProximityAlertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "cancelPoiProximityAlert",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
     */
    void POISearchDBusProxy::requestResultList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult> &_resultListWindow, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_attributeList(_attributeList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, CommonAPI::EmptyDeployment> deploy_statusValue(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_resultListSize(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>> deploy_resultListWindow(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "requestResultList",
        "uqqau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_offset, deploy_maxWindowSize, deploy_attributeList,
_internalCallStatus,
deploy_statusValue, deploy_resultListSize, deploy_resultListWindow);
_statusValue = deploy_statusValue.getValue();
_resultListSize = deploy_resultListSize.getValue();
_resultListWindow = deploy_resultListWindow.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::requestResultListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, RequestResultListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_attributeList(_attributeList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, CommonAPI::EmptyDeployment> deploy_statusValue(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_resultListSize(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>> deploy_resultListWindow(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "requestResultList",
        "uqqau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_offset, deploy_maxWindowSize, deploy_attributeList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, CommonAPI::EmptyDeployment> _statusValue, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> _resultListSize, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>> _resultListWindow) {
        	if (_callback)
        		_callback(_internalCallStatus, _statusValue.getValue(), _resultListSize.getValue(), _resultListWindow.getValue());
        },
        std::make_tuple(deploy_statusValue, deploy_resultListSize, deploy_resultListWindow));
    }
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... ..
     */
    void POISearchDBusProxy::getPoiDetails(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_id(_id, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getPoiDetails",
        "au",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_id,
_internalCallStatus,
deploy_results);
_results = deploy_results.getValue();
}
    std::future<CommonAPI::CallStatus> POISearchDBusProxy::getPoiDetailsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, GetPoiDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_id(_id, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getPoiDetails",
        "au",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_id,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>> _results) {
        	if (_callback)
        		_callback(_internalCallStatus, _results.getValue());
        },
        std::make_tuple(deploy_results));
    }


void POISearchDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace poiservice
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
