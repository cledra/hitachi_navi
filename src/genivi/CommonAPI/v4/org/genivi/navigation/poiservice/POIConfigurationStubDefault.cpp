/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/poiservice/POIConfigurationStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

POIConfigurationStubDefault::POIConfigurationStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(POIConfiguration::getInterfaceVersion()) {
}

const CommonAPI::Version& POIConfigurationStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

POIConfigurationStubRemoteEvent* POIConfigurationStubDefault::initStubAdapter(const std::shared_ptr<POIConfigurationStubAdapter> &_adapter) {
    CommonAPI::Stub<POIConfigurationStubAdapter, POIConfigurationStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: This method returns the API version .
 */
void POIConfigurationStubDefault::getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::Version version = {};
    _reply(version);
}

/**
 * description: Set the current language set. If the language is not supported, the default
 *   details will be returned in the native language.
 */
void POIConfigurationStubDefault::setLocale(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _languageCode, std::string _countryCode, std::string _scriptCode, setLocaleReply_t _reply) {
    (void)_client;
    (void) _languageCode;
    (void) _countryCode;
    (void) _scriptCode;
    _reply();
}

/**
 * description: Get the current language set .
 */
void POIConfigurationStubDefault::getLocale(const std::shared_ptr<CommonAPI::ClientId> _client, getLocaleReply_t _reply) {
    (void)_client;
    std::string languageCode = "";
    std::string countryCode = "";
    std::string scriptCode = "";
    _reply(languageCode, countryCode, scriptCode);
}

/**
 * description: Get the supported set of locales .
 */
void POIConfigurationStubDefault::getSupportedLocales(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedLocalesReply_t _reply) {
    (void)_client;
    std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> localeList = {};
    _reply(localeList);
}

/**
 * description: Set the time format.
 */
void POIConfigurationStubDefault::setTimeFormat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::TimeFormat _format, setTimeFormatReply_t _reply) {
    (void)_client;
    (void) _format;
    _reply();
}

/**
 * description: Get the current time format .
 */
void POIConfigurationStubDefault::getTimeFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getTimeFormatReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::navigation::NavigationTypes::TimeFormat format = ::v4::org::genivi::navigation::NavigationTypes::TimeFormat::TWELVEH;
    if (!format.validate()) {
        return;
    }
    _reply(format);
}

/**
 * description: Get the supported set of time format .
 */
void POIConfigurationStubDefault::getSupportedTimeFormats(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedTimeFormatsReply_t _reply) {
    (void)_client;
    std::vector<::v4::org::genivi::navigation::NavigationTypes::TimeFormat> timeFormatList = {};
    _reply(timeFormatList);
}

/**
 * description: Set the coordinates format.
 */
void POIConfigurationStubDefault::setCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, POIConfiguration::CoordinatesFormat _coordinatesFormat, setCoordinatesFormatReply_t _reply) {
    (void)_client;
    (void) _coordinatesFormat;
    _reply();
}

/**
 * description: Get the coordinates format .
 */
void POIConfigurationStubDefault::getCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getCoordinatesFormatReply_t _reply) {
    (void)_client;
    POIConfiguration::CoordinatesFormat coordinatesFormat = POIConfiguration::CoordinatesFormat::INVALID;
    if (!coordinatesFormat.validate()) {
        return;
    }
    _reply(coordinatesFormat);
}

/**
 * description: Get the supported set of coordinates format .
 */
void POIConfigurationStubDefault::getSupportedCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedCoordinatesFormatReply_t _reply) {
    (void)_client;
    std::vector<POIConfiguration::CoordinatesFormat> coordinatesFormatList = {};
    _reply(coordinatesFormatList);
}

/**
 * description: Set the units of measurement .
 */
void POIConfigurationStubDefault::setUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, POIConfiguration::UnitsOfMeasurement _unitsOfMeasurementList, setUnitsOfMeasurementReply_t _reply) {
    (void)_client;
    (void) _unitsOfMeasurementList;
    _reply();
}

/**
 * description: Get the units of measurement .
 */
void POIConfigurationStubDefault::getUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, getUnitsOfMeasurementReply_t _reply) {
    (void)_client;
    POIConfiguration::UnitsOfMeasurement unitsOfMeasurementList;
    _reply(unitsOfMeasurementList);
}

/**
 * description: Get the supported set of units of measurement .
 */
void POIConfigurationStubDefault::getSupportedUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedUnitsOfMeasurementReply_t _reply) {
    (void)_client;
    POIConfiguration::UnitsOfMeasurement unitsOfMeasurementList;
    _reply(unitsOfMeasurementList);
}


/**
 * description: ConfigurationChanged = This signal is sent to the clients when one or more
 *   configuration settings changes
 */
void POIConfigurationStubDefault::fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings> &_changedSettings) {
    assert((CommonAPI::Stub<POIConfigurationStubAdapter, POIConfigurationStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POIConfigurationStubAdapter, POIConfigurationStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireConfigurationChangedEvent(_changedSettings);
}


POIConfigurationStubDefault::RemoteEventHandler::RemoteEventHandler(POIConfigurationStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
