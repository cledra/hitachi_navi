/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Service_Types_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Service_Types_HPP_


#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

struct POIServiceTypes {
    /**
     * description: Unique ID for a POI results
     */
    typedef uint32_t POI_ID;
    /**
     * description: Unique ID for a POI Icon Resource
     */
    typedef uint32_t ResourceID;
    /**
     * description: Unique ID for an attribute
     */
    typedef uint32_t AttributeID;
    typedef uint8_t ContentAccessModuleID;
    
    struct CategoryIDSet : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            AIRPORT = 1,
            SPORTING = 2,
            FERRY_TERMINAL = 3,
            ENTERTAINMENT = 4,
            HOTEL_MOTEL = 5,
            RESTAURANT = 6,
            PARKING = 7,
            FUEL_STATION = 8,
            SERVICE_AREA = 9,
            CAR_REPAIR_SHOP = 10,
            CAR_DEALER = 11,
            CAR_RENTAL_AGENCY = 12,
            MEDICAL = 13,
            SHOPPING = 14,
            BUSINESS_AREA = 15,
            LANDMARK = 16,
            FLASH_RADAR = 17,
            POI_TRUCK = 18,
            SANCTUARY = 19,
            TOLLBOOTH = 20,
            KIOSK = 21,
            WATER_CLOSET = 22,
            BANK_AND_FINANCIAL = 23,
            TRAVEL = 24,
            TOURIST = 25,
            PUBLIC_BUILDING = 26,
            RAILWAY_STATION = 27
        };
        
        CategoryIDSet() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        CategoryIDSet(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        CategoryIDSet &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::AIRPORT):
                case static_cast<int32_t>(Literal::SPORTING):
                case static_cast<int32_t>(Literal::FERRY_TERMINAL):
                case static_cast<int32_t>(Literal::ENTERTAINMENT):
                case static_cast<int32_t>(Literal::HOTEL_MOTEL):
                case static_cast<int32_t>(Literal::RESTAURANT):
                case static_cast<int32_t>(Literal::PARKING):
                case static_cast<int32_t>(Literal::FUEL_STATION):
                case static_cast<int32_t>(Literal::SERVICE_AREA):
                case static_cast<int32_t>(Literal::CAR_REPAIR_SHOP):
                case static_cast<int32_t>(Literal::CAR_DEALER):
                case static_cast<int32_t>(Literal::CAR_RENTAL_AGENCY):
                case static_cast<int32_t>(Literal::MEDICAL):
                case static_cast<int32_t>(Literal::SHOPPING):
                case static_cast<int32_t>(Literal::BUSINESS_AREA):
                case static_cast<int32_t>(Literal::LANDMARK):
                case static_cast<int32_t>(Literal::FLASH_RADAR):
                case static_cast<int32_t>(Literal::POI_TRUCK):
                case static_cast<int32_t>(Literal::SANCTUARY):
                case static_cast<int32_t>(Literal::TOLLBOOTH):
                case static_cast<int32_t>(Literal::KIOSK):
                case static_cast<int32_t>(Literal::WATER_CLOSET):
                case static_cast<int32_t>(Literal::BANK_AND_FINANCIAL):
                case static_cast<int32_t>(Literal::TRAVEL):
                case static_cast<int32_t>(Literal::TOURIST):
                case static_cast<int32_t>(Literal::PUBLIC_BUILDING):
                case static_cast<int32_t>(Literal::RAILWAY_STATION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CategoryIDSet &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CategoryIDSet &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CategoryIDSet &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CategoryIDSet &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CategoryIDSet &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CategoryIDSet &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AttributeType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            STRING = 1280,
            INTEGER = 1281,
            BOOLEAN = 1282,
            COORDINATES = 1283
        };
        
        AttributeType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::STRING)) {}
        AttributeType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::STRING):
                case static_cast<int32_t>(Literal::INTEGER):
                case static_cast<int32_t>(Literal::BOOLEAN):
                case static_cast<int32_t>(Literal::COORDINATES):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AttributeType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AttributeType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AttributeType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AttributeType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AttributeType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AttributeType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SearchStatusState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            NOT_STARTED = 1296,
            SEARCHING = 1297,
            FINISHED = 1298
        };
        
        SearchStatusState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        SearchStatusState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SearchStatusState &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::NOT_STARTED):
                case static_cast<int32_t>(Literal::SEARCHING):
                case static_cast<int32_t>(Literal::FINISHED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SearchStatusState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SearchStatusState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SearchStatusState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SearchStatusState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SearchStatusState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SearchStatusState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct OperatorType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            MORE_THAN = 1312,
            LESS_THAN = 1313,
            EQUAL = 1314
        };
        
        OperatorType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        OperatorType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        OperatorType &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::MORE_THAN):
                case static_cast<int32_t>(Literal::LESS_THAN):
                case static_cast<int32_t>(Literal::EQUAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const OperatorType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const OperatorType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const OperatorType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const OperatorType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const OperatorType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const OperatorType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SortOption : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SORT_DEFAULT = 1376,
            SORT_BY_DISTANCE = 1377,
            SORT_BY_TIME = 1378,
            ATTRIBUTE_CUSTOM = 1379
        };
        
        SortOption() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SORT_DEFAULT)) {}
        SortOption(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SORT_DEFAULT):
                case static_cast<int32_t>(Literal::SORT_BY_DISTANCE):
                case static_cast<int32_t>(Literal::SORT_BY_TIME):
                case static_cast<int32_t>(Literal::ATTRIBUTE_CUSTOM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SortOption &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SortOption &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SortOption &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SortOption &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SortOption &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SortOption &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct UpdateReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ADDED = 1792,
            REMOVED = 1793,
            ATTR_ADDED = 1794,
            ATTR_MODIFIED = 1795,
            ATTR_REMOVED = 1796
        };
        
        UpdateReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ADDED)) {}
        UpdateReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ADDED):
                case static_cast<int32_t>(Literal::REMOVED):
                case static_cast<int32_t>(Literal::ATTR_ADDED):
                case static_cast<int32_t>(Literal::ATTR_MODIFIED):
                case static_cast<int32_t>(Literal::ATTR_REMOVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UpdateReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UpdateReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UpdateReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UpdateReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UpdateReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UpdateReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RouteStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OFF_ROUTE = 1536,
            ON_ROUTE = 1537,
            INSIDE_CORRIDOR = 1538
        };
        
        RouteStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::OFF_ROUTE)) {}
        RouteStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::OFF_ROUTE):
                case static_cast<int32_t>(Literal::ON_ROUTE):
                case static_cast<int32_t>(Literal::INSIDE_CORRIDOR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RouteStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RouteStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RouteStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RouteStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RouteStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RouteStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ConfigurationChangedReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            LOCALES = 0
        };
        
        ConfigurationChangedReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::LOCALES)) {}
        ConfigurationChangedReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::LOCALES):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ConfigurationChangedReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ConfigurationChangedReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ConfigurationChangedReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ConfigurationChangedReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ConfigurationChangedReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ConfigurationChangedReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Settings : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            UNITS_OF_MEASUREMENT = 48,
            LOCALE = 37,
            TIME_FORMAT = 3,
            COORDINATES_FORMAT = 6
        };
        
        Settings() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        Settings(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::UNITS_OF_MEASUREMENT):
                case static_cast<int32_t>(Literal::LOCALE):
                case static_cast<int32_t>(Literal::TIME_FORMAT):
                case static_cast<int32_t>(Literal::COORDINATES_FORMAT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Settings &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Settings &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Settings &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Settings &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Settings &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Settings &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Different types of resources for icons
     */
    typedef CommonAPI::Variant<std::vector<ResourceID>, std::string>  Icon;
    /**
     * description: Different type of media
     */
    typedef CommonAPI::Variant<std::vector<ResourceID>, std::string>  Media;
    /**
     * description: values for attribute.
     */
    typedef CommonAPI::Variant<int32_t, std::string, bool>  AttributeValue;
    /**
     * description: 
     */
    struct Details : CommonAPI::Struct<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, Icon, std::string, std::string, Media> {
    	
    	Details() {
    	}
    	Details(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_parentsId, const Icon &_icons, const std::string &_name, const std::string &_shortDesc, const Media &_media)
    	{
    		std::get<0>(values_) = _parentsId;
    		std::get<1>(values_) = _icons;
    		std::get<2>(values_) = _name;
    		std::get<3>(values_) = _shortDesc;
    		std::get<4>(values_) = _media;
    	}
    	/**
    	 * description: list of parent categories unique id.
    	 */
    	inline const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &getParentsId() const { return std::get<0>(values_); }
    	inline void setParentsId(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: visual icons set.
    	 */
    	inline const Icon &getIcons() const { return std::get<1>(values_); }
    	inline void setIcons(const Icon &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: name.
    	 */
    	inline const std::string &getName() const { return std::get<2>(values_); }
    	inline void setName(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: short category description (optional).
    	 */
    	inline const std::string &getShortDesc() const { return std::get<3>(values_); }
    	inline void setShortDesc(const std::string &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: media associated (html web site, audio, video, ...) (optional).
    	 */
    	inline const Media &getMedia() const { return std::get<4>(values_); }
    	inline void setMedia(const Media &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const Details& _other) const {
                return (getParentsId() == _other.getParentsId() && getIcons() == _other.getIcons() && getName() == _other.getName() && getShortDesc() == _other.getShortDesc() && getMedia() == _other.getMedia());
        }
    	inline bool operator!=(const Details &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct Operator : CommonAPI::Struct<OperatorType, std::string, AttributeValue> {
    	
    	Operator() {
    	}
    	Operator(const OperatorType &_type, const std::string &_name, const AttributeValue &_value)
    	{
    		std::get<0>(values_) = _type;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _value;
    	}
    	/**
    	 * description: enum(INVALID,MORE_THAN,LESS_THAN,EQUAL, ....).
    	 */
    	inline const OperatorType &getType() const { return std::get<0>(values_); }
    	inline void setType(const OperatorType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: localized display name.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: value to use if this comparator is selected.
    	 */
    	inline const AttributeValue &getValue() const { return std::get<2>(values_); }
    	inline void setValue(const AttributeValue &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Operator& _other) const {
                return (getType() == _other.getType() && getName() == _other.getName() && getValue() == _other.getValue());
        }
    	inline bool operator!=(const Operator &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Describes an attribte which is associcated to an category. Use more than one
     *   operator to specify choice options i.e. differtent accpeted credid cards 
     *   	used in categor details and update category
     */
    struct CategoryAttribute : CommonAPI::Struct<AttributeID, std::string, AttributeType, std::vector<Operator>> {
    	
    	CategoryAttribute() {
    	}
    	CategoryAttribute(const AttributeID &_id, const std::string &_name, const AttributeType &_type, const std::vector<Operator> &_operators)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _type;
    		std::get<3>(values_) = _operators;
    	}
    	/**
    	 * description: id of attribute .
    	 */
    	inline const AttributeID &getId() const { return std::get<0>(values_); }
    	inline void setId(const AttributeID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: localized display name.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: enum(INVALID,STRING,INTEGER,COORDINATES ...).
    	 */
    	inline const AttributeType &getType() const { return std::get<2>(values_); }
    	inline void setType(const AttributeType &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: 
    	 */
    	inline const std::vector<Operator> &getOperators() const { return std::get<3>(values_); }
    	inline void setOperators(const std::vector<Operator> &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const CategoryAttribute& _other) const {
                return (getId() == _other.getId() && getName() == _other.getName() && getType() == _other.getType() && getOperators() == _other.getOperators());
        }
    	inline bool operator!=(const CategoryAttribute &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct CategorySortOption : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, std::string> {
    	
    	CategorySortOption() {
    	}
    	CategorySortOption(const ::v4::org::genivi::CommonTypes::CategoryID &_id, const std::string &_name)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _name;
    	}
    	/**
    	 * description: enum(SORT_DEFAULT,SORT_BY_DISTANCE,SORT_BY_TIME,ATTRIBUTE_CUSTOM, ... ).
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getId() const { return std::get<0>(values_); }
    	inline void setId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: localized name to be displayed by application.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CategorySortOption& _other) const {
                return (getId() == _other.getId() && getName() == _other.getName());
        }
    	inline bool operator!=(const CategorySortOption &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct CAMCategory : CommonAPI::Struct<Details, std::vector<CategoryAttribute>, std::vector<CategorySortOption>> {
    	
    	CAMCategory() {
    	}
    	CAMCategory(const Details &_details, const std::vector<CategoryAttribute> &_attributeList, const std::vector<CategorySortOption> &_sortOptions)
    	{
    		std::get<0>(values_) = _details;
    		std::get<1>(values_) = _attributeList;
    		std::get<2>(values_) = _sortOptions;
    	}
    	/**
    	 * description: struct(list of parents_id, icons, name, short_desc, media).
    	 */
    	inline const Details &getDetails() const { return std::get<0>(values_); }
    	inline void setDetails(const Details &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: array[struct(name, type, array[struct(operator_id, operator_name)])].
    	 */
    	inline const std::vector<CategoryAttribute> &getAttributeList() const { return std::get<1>(values_); }
    	inline void setAttributeList(const std::vector<CategoryAttribute> &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: array[struct(id, name)].
    	 */
    	inline const std::vector<CategorySortOption> &getSortOptions() const { return std::get<2>(values_); }
    	inline void setSortOptions(const std::vector<CategorySortOption> &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const CAMCategory& _other) const {
                return (getDetails() == _other.getDetails() && getAttributeList() == _other.getAttributeList() && getSortOptions() == _other.getSortOptions());
        }
    	inline bool operator!=(const CAMCategory &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct CAMCategoryUpdate : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, std::vector<CategoryAttribute>, std::vector<CategorySortOption>> {
    	
    	CAMCategoryUpdate() {
    	}
    	CAMCategoryUpdate(const ::v4::org::genivi::CommonTypes::CategoryID &_id, const std::vector<CategoryAttribute> &_attributeList, const std::vector<CategorySortOption> &_sortOptions)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _attributeList;
    		std::get<2>(values_) = _sortOptions;
    	}
    	/**
    	 * description: enum(INVALID,ALL_CATEGORIES,AIRPORT,RESTAURANT,HOTEL,GAZ_STATION,CAR_PARK,
    	 *   ...). Note: A POI category is a unique ID. It could be a predefined category
    	 *   or a custom one defined by a POI plug-in
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getId() const { return std::get<0>(values_); }
    	inline void setId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: array[struct(name, type, array[struct(operator_id, operator_name)])].
    	 */
    	inline const std::vector<CategoryAttribute> &getAttributeList() const { return std::get<1>(values_); }
    	inline void setAttributeList(const std::vector<CategoryAttribute> &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: array[struct(id, name)].
    	 */
    	inline const std::vector<CategorySortOption> &getSortOptions() const { return std::get<2>(values_); }
    	inline void setSortOptions(const std::vector<CategorySortOption> &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const CAMCategoryUpdate& _other) const {
                return (getId() == _other.getId() && getAttributeList() == _other.getAttributeList() && getSortOptions() == _other.getSortOptions());
        }
    	inline bool operator!=(const CAMCategoryUpdate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Attribute associcated to an POI used in addPOI and POI Search Result(both CAM
     *   and Service)
     */
    struct PoiAttribute : CommonAPI::Struct<AttributeID, AttributeType, AttributeValue> {
    	
    	PoiAttribute() {
    	}
    	PoiAttribute(const AttributeID &_id, const AttributeType &_type, const AttributeValue &_value)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _type;
    		std::get<2>(values_) = _value;
    	}
    	/**
    	 * description: attribute unique id (see data model)
    	 */
    	inline const AttributeID &getId() const { return std::get<0>(values_); }
    	inline void setId(const AttributeID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: enum(INVALID,STRING,INTEGER,COORDINATES ...)
    	 */
    	inline const AttributeType &getType() const { return std::get<1>(values_); }
    	inline void setType(const AttributeType &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: The value depends on the attribute specifications and type
    	 */
    	inline const AttributeValue &getValue() const { return std::get<2>(values_); }
    	inline void setValue(const AttributeValue &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const PoiAttribute& _other) const {
                return (getId() == _other.getId() && getType() == _other.getType() && getValue() == _other.getValue());
        }
    	inline bool operator!=(const PoiAttribute &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct CategoryAndRadius : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, uint32_t> {
    	
    	CategoryAndRadius() {
    	}
    	CategoryAndRadius(const ::v4::org::genivi::CommonTypes::CategoryID &_id, const uint32_t &_radius)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _radius;
    	}
    	/**
    	 * description: enum(INVALID,ALL_CATEGORIES,AIRPORT,RESTAURANT,HOTEL,GAZ_STATION,CAR_PARK,
    	 *   ...). Note: A POI category is a unique ID. It could be a predefined category
    	 *   or a custom one defined by a POI plug-in
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getId() const { return std::get<0>(values_); }
    	inline void setId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: activation or search radius around the position (in 10 meters) for the
    	 *   category. If value is 0 (zero), the default radius (defined for a category) is
    	 *   applied.
    	 */
    	inline const uint32_t &getRadius() const { return std::get<1>(values_); }
    	inline void setRadius(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CategoryAndRadius& _other) const {
                return (getId() == _other.getId() && getRadius() == _other.getRadius());
        }
    	inline bool operator!=(const CategoryAndRadius &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct PoiDetails : CommonAPI::Struct<POI_ID, std::string, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D> {
    	
    	PoiDetails() {
    	}
    	PoiDetails(const POI_ID &_id, const std::string &_name, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _location;
    	}
    	/**
    	 * description: POI id
    	 */
    	inline const POI_ID &getId() const { return std::get<0>(values_); }
    	inline void setId(const POI_ID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: POI name
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: POI location.
    	 */
    	inline const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &getLocation() const { return std::get<2>(values_); }
    	inline void setLocation(const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const PoiDetails& _other) const {
                return (getId() == _other.getId() && getName() == _other.getName() && getLocation() == _other.getLocation());
        }
    	inline bool operator!=(const PoiDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct SearchResultDetails : CommonAPI::Struct<PoiDetails, std::vector<::v4::org::genivi::CommonTypes::CategoryID>, std::vector<PoiAttribute>> {
    	
    	SearchResultDetails() {
    	}
    	SearchResultDetails(const PoiDetails &_details, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, const std::vector<PoiAttribute> &_attributeList)
    	{
    		std::get<0>(values_) = _details;
    		std::get<1>(values_) = _categories;
    		std::get<2>(values_) = _attributeList;
    	}
    	/**
    	 * description: struct(id,name,latitude,longitude,altitude).
    	 */
    	inline const PoiDetails &getDetails() const { return std::get<0>(values_); }
    	inline void setDetails(const PoiDetails &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: array[unique_id].
    	 */
    	inline const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &getCategories() const { return std::get<1>(values_); }
    	inline void setCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: array[struct(name,type,value)].
    	 */
    	inline const std::vector<PoiAttribute> &getAttributeList() const { return std::get<2>(values_); }
    	inline void setAttributeList(const std::vector<PoiAttribute> &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const SearchResultDetails& _other) const {
                return (getDetails() == _other.getDetails() && getCategories() == _other.getCategories() && getAttributeList() == _other.getAttributeList());
        }
    	inline bool operator!=(const SearchResultDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct SearchResult : CommonAPI::Struct<POI_ID, uint32_t, RouteStatus, std::vector<PoiAttribute>> {
    	
    	SearchResult() {
    	}
    	SearchResult(const POI_ID &_id, const uint32_t &_distance, const RouteStatus &_routeStatus, const std::vector<PoiAttribute> &_attributeList)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _distance;
    		std::get<2>(values_) = _routeStatus;
    		std::get<3>(values_) = _attributeList;
    	}
    	/**
    	 * description: POI id
    	 */
    	inline const POI_ID &getId() const { return std::get<0>(values_); }
    	inline void setId(const POI_ID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: distance in meters to poi from center of the search or from vehicle if search
    	 *   along
    	 */
    	inline const uint32_t &getDistance() const { return std::get<1>(values_); }
    	inline void setDistance(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: enum(OFF_ROUTE,ON_ROUTE,INSIDE_CORRIDOR, ... )
    	 */
    	inline const RouteStatus &getRouteStatus() const { return std::get<2>(values_); }
    	inline void setRouteStatus(const RouteStatus &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: List of attributes requested. It could be empty
    	 */
    	inline const std::vector<PoiAttribute> &getAttributeList() const { return std::get<3>(values_); }
    	inline void setAttributeList(const std::vector<PoiAttribute> &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const SearchResult& _other) const {
                return (getId() == _other.getId() && getDistance() == _other.getDistance() && getRouteStatus() == _other.getRouteStatus() && getAttributeList() == _other.getAttributeList());
        }
    	inline bool operator!=(const SearchResult &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct PoiCAMDetails : CommonAPI::Struct<POI_ID, std::string, ::v4::org::genivi::CommonTypes::CategoryID, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, uint16_t, std::vector<PoiAttribute>> {
    	
    	PoiCAMDetails() {
    	}
    	PoiCAMDetails(const POI_ID &_sourceId, const std::string &_name, const ::v4::org::genivi::CommonTypes::CategoryID &_category, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const uint16_t &_distance, const std::vector<PoiAttribute> &_attributeList)
    	{
    		std::get<0>(values_) = _sourceId;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _category;
    		std::get<3>(values_) = _location;
    		std::get<4>(values_) = _distance;
    		std::get<5>(values_) = _attributeList;
    	}
    	/**
    	 * description: POI unique id as known by the content access module. This id will be used by
    	 *   POI service to request POI details.
    	 */
    	inline const POI_ID &getSourceId() const { return std::get<0>(values_); }
    	inline void setSourceId(const POI_ID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: POI name.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: POI category unique id.
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getCategory() const { return std::get<2>(values_); }
    	inline void setCategory(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: POI location.
    	 */
    	inline const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &getLocation() const { return std::get<3>(values_); }
    	inline void setLocation(const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: distance in meters to poi from center of the search.
    	 */
    	inline const uint16_t &getDistance() const { return std::get<4>(values_); }
    	inline void setDistance(const uint16_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: List of attributes requested. It could be empty.
    	 */
    	inline const std::vector<PoiAttribute> &getAttributeList() const { return std::get<5>(values_); }
    	inline void setAttributeList(const std::vector<PoiAttribute> &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const PoiCAMDetails& _other) const {
                return (getSourceId() == _other.getSourceId() && getName() == _other.getName() && getCategory() == _other.getCategory() && getLocation() == _other.getLocation() && getDistance() == _other.getDistance() && getAttributeList() == _other.getAttributeList());
        }
    	inline bool operator!=(const PoiCAMDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: used in setAttrbutes and CAM startPOISearch
     */
    struct AttributeDetails : CommonAPI::Struct<AttributeID, ::v4::org::genivi::CommonTypes::CategoryID, AttributeType, AttributeValue, OperatorType, bool> {
    	
    	AttributeDetails() {
    		std::get<5>(values_) = false;
    	}
    	AttributeDetails(const AttributeID &_id, const ::v4::org::genivi::CommonTypes::CategoryID &_categoryId, const AttributeType &_type, const AttributeValue &_value, const OperatorType &_oper, const bool &_mandatory)
    	{
    		std::get<0>(values_) = _id;
    		std::get<1>(values_) = _categoryId;
    		std::get<2>(values_) = _type;
    		std::get<3>(values_) = _value;
    		std::get<4>(values_) = _oper;
    		std::get<5>(values_) = _mandatory;
    	}
    	/**
    	 * description: id of attribute .
    	 */
    	inline const AttributeID &getId() const { return std::get<0>(values_); }
    	inline void setId(const AttributeID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: enum(INVALID,ALL_CATEGORIES,AIRPORT,RESTAURANT,HOTEL,GAZ_STATION,CAR_PARK,
    	 *   ...). Note: A POI category is a unique ID. It could be a predefined category
    	 *   or a custom one defined by a POI plug-in
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getCategoryId() const { return std::get<1>(values_); }
    	inline void setCategoryId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: enum(INVALID,STRING,INTEGER,COORDINATES ...).
    	 */
    	inline const AttributeType &getType() const { return std::get<2>(values_); }
    	inline void setType(const AttributeType &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: value or partial value. The value depends on the attribute specifications and
    	 *   type.
    	 */
    	inline const AttributeValue &getValue() const { return std::get<3>(values_); }
    	inline void setValue(const AttributeValue &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: enum(INVALID,MORE_THAN,LESS_THAN,EQUAL, ....).
    	 */
    	inline const OperatorType &getOper() const { return std::get<4>(values_); }
    	inline void setOper(const OperatorType &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: true if the attribute is mandatory for the search and false for optional.
    	 */
    	inline const bool &getMandatory() const { return std::get<5>(values_); }
    	inline void setMandatory(const bool _value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const AttributeDetails& _other) const {
                return (getId() == _other.getId() && getCategoryId() == _other.getCategoryId() && getType() == _other.getType() && getValue() == _other.getValue() && getOper() == _other.getOper() && getMandatory() == _other.getMandatory());
        }
    	inline bool operator!=(const AttributeDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Detailed descripton of a category
     */
    struct CategoryDetails : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, std::vector<::v4::org::genivi::CommonTypes::CategoryID>, Icon, std::string, bool, std::string, Media> {
    	
    	CategoryDetails() {
    		std::get<4>(values_) = false;
    	}
    	CategoryDetails(const ::v4::org::genivi::CommonTypes::CategoryID &_uniqueId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_parentsId, const Icon &_icons, const std::string &_name, const bool &_topLevel, const std::string &_description, const Media &_media)
    	{
    		std::get<0>(values_) = _uniqueId;
    		std::get<1>(values_) = _parentsId;
    		std::get<2>(values_) = _icons;
    		std::get<3>(values_) = _name;
    		std::get<4>(values_) = _topLevel;
    		std::get<5>(values_) = _description;
    		std::get<6>(values_) = _media;
    	}
    	/**
    	 * description: Category unique id.
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getUniqueId() const { return std::get<0>(values_); }
    	inline void setUniqueId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: list of parent categories unique id.
    	 */
    	inline const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &getParentsId() const { return std::get<1>(values_); }
    	inline void setParentsId(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: visual icons set.
    	 */
    	inline const Icon &getIcons() const { return std::get<2>(values_); }
    	inline void setIcons(const Icon &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: name.
    	 */
    	inline const std::string &getName() const { return std::get<3>(values_); }
    	inline void setName(const std::string &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: true if the category is a pre-defined one (top level), false for customized
    	 *   categories created by plug-in.
    	 */
    	inline const bool &getTopLevel() const { return std::get<4>(values_); }
    	inline void setTopLevel(const bool _value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: short category description (optional).
    	 */
    	inline const std::string &getDescription() const { return std::get<5>(values_); }
    	inline void setDescription(const std::string &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: media associated (html web site, audio, video, ...) (optional).
    	 */
    	inline const Media &getMedia() const { return std::get<6>(values_); }
    	inline void setMedia(const Media &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const CategoryDetails& _other) const {
                return (getUniqueId() == _other.getUniqueId() && getParentsId() == _other.getParentsId() && getIcons() == _other.getIcons() && getName() == _other.getName() && getTopLevel() == _other.getTopLevel() && getDescription() == _other.getDescription() && getMedia() == _other.getMedia());
        }
    	inline bool operator!=(const CategoryDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Detailed description of a category including attributes and sort options
     */
    struct Category : CommonAPI::Struct<CategoryDetails, std::vector<CategoryAttribute>, std::vector<CategorySortOption>> {
    	
    	Category() {
    	}
    	Category(const CategoryDetails &_details, const std::vector<CategoryAttribute> &_attributeList, const std::vector<CategorySortOption> &_sortOptions)
    	{
    		std::get<0>(values_) = _details;
    		std::get<1>(values_) = _attributeList;
    		std::get<2>(values_) = _sortOptions;
    	}
    	/**
    	 * description: struct(unique_id, list of parents_id, icons, name, top_level, short_desc,
    	 *   media).
    	 */
    	inline const CategoryDetails &getDetails() const { return std::get<0>(values_); }
    	inline void setDetails(const CategoryDetails &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: array[struct(name, type, array[struct(operator_id, operator_name)].
    	 */
    	inline const std::vector<CategoryAttribute> &getAttributeList() const { return std::get<1>(values_); }
    	inline void setAttributeList(const std::vector<CategoryAttribute> &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: array[struct(id, name)].
    	 */
    	inline const std::vector<CategorySortOption> &getSortOptions() const { return std::get<2>(values_); }
    	inline void setSortOptions(const std::vector<CategorySortOption> &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Category& _other) const {
                return (getDetails() == _other.getDetails() && getAttributeList() == _other.getAttributeList() && getSortOptions() == _other.getSortOptions());
        }
    	inline bool operator!=(const Category &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Pair of catgory and description of level
     */
    struct CategoryAndLevel : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, bool> {
    	
    	CategoryAndLevel() {
    		std::get<1>(values_) = false;
    	}
    	CategoryAndLevel(const ::v4::org::genivi::CommonTypes::CategoryID &_uniqueId, const bool &_topLevel)
    	{
    		std::get<0>(values_) = _uniqueId;
    		std::get<1>(values_) = _topLevel;
    	}
    	/**
    	 * description: Category unique id.
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getUniqueId() const { return std::get<0>(values_); }
    	inline void setUniqueId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: true if the category is a pre-defined one (top level), false for customized
    	 *   categories created by plug-in.
    	 */
    	inline const bool &getTopLevel() const { return std::get<1>(values_); }
    	inline void setTopLevel(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CategoryAndLevel& _other) const {
                return (getUniqueId() == _other.getUniqueId() && getTopLevel() == _other.getTopLevel());
        }
    	inline bool operator!=(const CategoryAndLevel &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: pair of category and name
     */
    struct CategoryAndName : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, std::string, bool> {
    	
    	CategoryAndName() {
    		std::get<2>(values_) = false;
    	}
    	CategoryAndName(const ::v4::org::genivi::CommonTypes::CategoryID &_uniqueId, const std::string &_name, const bool &_topLevel)
    	{
    		std::get<0>(values_) = _uniqueId;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _topLevel;
    	}
    	/**
    	 * description: Category unique id.
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getUniqueId() const { return std::get<0>(values_); }
    	inline void setUniqueId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: name.
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: true if the category is a pre-defined one (top level), false for customized
    	 *   categories created by plug-in.
    	 */
    	inline const bool &getTopLevel() const { return std::get<2>(values_); }
    	inline void setTopLevel(const bool _value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const CategoryAndName& _other) const {
                return (getUniqueId() == _other.getUniqueId() && getName() == _other.getName() && getTopLevel() == _other.getTopLevel());
        }
    	inline bool operator!=(const CategoryAndName &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: pair of category and reson for update
     */
    struct CategoryAndReason : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, UpdateReason> {
    	
    	CategoryAndReason() {
    	}
    	CategoryAndReason(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const UpdateReason &_reason)
    	{
    		std::get<0>(values_) = _unique_id;
    		std::get<1>(values_) = _reason;
    	}
    	/**
    	 * description: Category unique id.
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getUnique_id() const { return std::get<0>(values_); }
    	inline void setUnique_id(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: enum(ADDED,REMOVED,ATTR_ADDED,ATTR_MODIFIED,ATTR_REMOVED, ... ) .
    	 */
    	inline const UpdateReason &getReason() const { return std::get<1>(values_); }
    	inline void setReason(const UpdateReason &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CategoryAndReason& _other) const {
                return (getUnique_id() == _other.getUnique_id() && getReason() == _other.getReason());
        }
    	inline bool operator!=(const CategoryAndReason &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: pair of category and the this category is available
     */
    struct CategoryAndStatus : CommonAPI::Struct<::v4::org::genivi::CommonTypes::CategoryID, bool> {
    	
    	CategoryAndStatus() {
    		std::get<1>(values_) = false;
    	}
    	CategoryAndStatus(const ::v4::org::genivi::CommonTypes::CategoryID &_uniqueId, const bool &_status)
    	{
    		std::get<0>(values_) = _uniqueId;
    		std::get<1>(values_) = _status;
    	}
    	/**
    	 * description: Category unique id.
    	 */
    	inline const ::v4::org::genivi::CommonTypes::CategoryID &getUniqueId() const { return std::get<0>(values_); }
    	inline void setUniqueId(const ::v4::org::genivi::CommonTypes::CategoryID &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: true if the category is available .
    	 */
    	inline const bool &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const CategoryAndStatus& _other) const {
                return (getUniqueId() == _other.getUniqueId() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const CategoryAndStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: 
     */
    struct PoiAddedDetails : CommonAPI::Struct<std::string, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, std::vector<PoiAttribute>> {
    	
    	PoiAddedDetails() {
    	}
    	PoiAddedDetails(const std::string &_name, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<PoiAttribute> &_attributeList)
    	{
    		std::get<0>(values_) = _name;
    		std::get<1>(values_) = _location;
    		std::get<2>(values_) = _attributeList;
    	}
    	/**
    	 * description: POI name
    	 */
    	inline const std::string &getName() const { return std::get<0>(values_); }
    	inline void setName(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: POI location.
    	 */
    	inline const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &getLocation() const { return std::get<1>(values_); }
    	inline void setLocation(const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: array[struct(id,type,value)].
    	 */
    	inline const std::vector<PoiAttribute> &getAttributeList() const { return std::get<2>(values_); }
    	inline void setAttributeList(const std::vector<PoiAttribute> &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const PoiAddedDetails& _other) const {
                return (getName() == _other.getName() && getLocation() == _other.getLocation() && getAttributeList() == _other.getAttributeList());
        }
    	inline bool operator!=(const PoiAddedDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.navigation.poiservice.POIServiceTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(4, 0);
}

}; // struct POIServiceTypes

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

namespace CommonAPI {
}


namespace std {
    //Hash for CategoryIDSet
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryIDSet> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryIDSet& categoryIDSet) const {
            return static_cast<int32_t>(categoryIDSet);
        }
    };
    //Hash for AttributeType
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeType> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeType& attributeType) const {
            return static_cast<int32_t>(attributeType);
        }
    };
    //Hash for SearchStatusState
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState& searchStatusState) const {
            return static_cast<int32_t>(searchStatusState);
        }
    };
    //Hash for OperatorType
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::OperatorType> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::OperatorType& operatorType) const {
            return static_cast<int32_t>(operatorType);
        }
    };
    //Hash for SortOption
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption& sortOption) const {
            return static_cast<int32_t>(sortOption);
        }
    };
    //Hash for UpdateReason
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::UpdateReason> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::UpdateReason& updateReason) const {
            return static_cast<int32_t>(updateReason);
        }
    };
    //Hash for RouteStatus
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::RouteStatus> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::RouteStatus& routeStatus) const {
            return static_cast<int32_t>(routeStatus);
        }
    };
    //Hash for ConfigurationChangedReason
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ConfigurationChangedReason> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ConfigurationChangedReason& configurationChangedReason) const {
            return static_cast<int32_t>(configurationChangedReason);
        }
    };
    //Hash for Settings
    template<>
    struct hash<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings> {
        inline size_t operator()(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings& settings) const {
            return static_cast<int32_t>(settings);
        }
    };
}


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Service_Types_HPP_
