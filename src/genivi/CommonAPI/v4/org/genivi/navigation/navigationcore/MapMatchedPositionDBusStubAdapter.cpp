/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/navigationcore/MapMatchedPosition.hpp>
#include <v4/org/genivi/navigation/navigationcore/MapMatchedPositionDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createMapMatchedPositionDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<MapMatchedPositionDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerMapMatchedPositionDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	MapMatchedPosition::getInterface(), &createMapMatchedPositionDBusStubAdapter);
}

MapMatchedPositionDBusStubAdapterInternal::~MapMatchedPositionDBusStubAdapterInternal() {
    deactivateManagedInstances();
    MapMatchedPositionDBusStubAdapterHelper::deinit();
}

void MapMatchedPositionDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* MapMatchedPositionDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
         *   changed
         */
        "<signal name=\"simulationStatusChanged\">\n"
            "<arg name=\"simulationStatus\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: simulationSpeedChanged = This signal is emitted when the simulation speed
         *   factor has changed
         */
        "<signal name=\"simulationSpeedChanged\">\n"
            "<arg name=\"speedFactor\" type=\"y\" />\n"
        "</signal>\n"
        /**
         * description: positionUpdate = This signal is called to notify a client application of a
         *   position change. The update frequency is implementation specific. The maximal
         *   allowed frequency is 10Hz
         */
        "<signal name=\"positionUpdate\">\n"
            "<arg name=\"changedValues\" type=\"ai\" />\n"
        "</signal>\n"
        /**
         * description: addressUpdate = This signal is called to notify a client application that the
         *   current address changed
         */
        "<signal name=\"addressUpdate\">\n"
            "<arg name=\"changedValues\" type=\"ai\" />\n"
        "</signal>\n"
        /**
         * description: positionOnSegmentUpdate = This signal is called to notify the client that the
         *   vehicle position on the route segment changed
         */
        "<signal name=\"positionOnSegmentUpdate\">\n"
            "<arg name=\"changedValues\" type=\"ai\" />\n"
        "</signal>\n"
        /**
         * description: statusUpdate = This signal is emitted to notifiy a client application that the
         *   current status changed
         */
        "<signal name=\"statusUpdate\">\n"
            "<arg name=\"changedValues\" type=\"ai\" />\n"
        "</signal>\n"
        /**
         * description: offroadPositionChanged = This signal is emitted when the heading and the
         *   distance to the closest point on the road network changes
         */
        "<signal name=\"offRoadPositionChanged\">\n"
            "<arg name=\"distance\" type=\"u\" />\n"
            "<arg name=\"direction\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: getVersion = This method returns the API version implemented by the server
         *   application
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setSimulationMode = This method activates or deactivates the simulation mode
         */
        "<method name=\"setSimulationMode\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_activate\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getSimulationStatus = This method retrieves the simulation status
         */
        "<method name=\"getSimulationStatus\">\n"
            "<arg name=\"_simulationStatus\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
         *   changes.
         */
        "<method name=\"addSimulationStatusListener\">\n"
        "</method>\n"
        /**
         * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
         *   Status changes.
         */
        "<method name=\"removeSimulationStatusListener\">\n"
        "</method>\n"
        /**
         * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
         */
        "<method name=\"setSimulationSpeed\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_speedFactor\" type=\"y\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getSimulationSpeed = returns the speed factor for the simulation mode
         */
        "<method name=\"getSimulationSpeed\">\n"
            "<arg name=\"_speedFactor\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
         *   factor changes.
         */
        "<method name=\"addSimulationSpeedListener\">\n"
        "</method>\n"
        /**
         * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
         *   speed factor changes.
         */
        "<method name=\"removeSimulationSpeedListener\">\n"
        "</method>\n"
        /**
         * description: startSimulation = This method starts, or resumes, a Follow Active Route
         *   simulation
         */
        "<method name=\"startSimulation\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: pauseSimulation = This method freezes the current location
         */
        "<method name=\"pauseSimulation\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getPosition = This method returns the current position
         */
        "<method name=\"getPosition\">\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_position\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setPosition = This method sets the position to a specific location
         */
        "<method name=\"setPosition\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_position\" type=\"a{i(yv)}\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getAddress = This method returns the current address
         */
        "<method name=\"getCurrentAddress\">\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_address\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: positionOnSegment = This method returns the vehicle position on a route segment
         */
        "<method name=\"getPositionOnSegment\">\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_positionOnSegment\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getStatus = This method returns the current status
         */
        "<method name=\"getStatus\">\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_status\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
        CommonAPI::Version
        > MapMatchedPositionDBusStubAdapterInternal::getMapMatchedPositionInterfaceVersionStubDispatcher(&MapMatchedPositionStub::getInterfaceVersion, "uu");




/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > MapMatchedPositionDBusStubAdapterInternal::getVersionStubDispatcher(
    &MapMatchedPositionStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: setSimulationMode = This method activates or deactivates the simulation mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::setSimulationModeStubDispatcher(
    &MapMatchedPositionStub::setSimulationMode, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getSimulationStatus = This method retrieves the simulation status
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<MapMatchedPosition::SimulationStatus>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapMatchedPositionDBusStubAdapterInternal::getSimulationStatusStubDispatcher(
    &MapMatchedPositionStub::getSimulationStatus, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
 *   changes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::addSimulationStatusListenerStubDispatcher(
    &MapMatchedPositionStub::addSimulationStatusListener, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
 *   Status changes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::removeSimulationStatusListenerStubDispatcher(
    &MapMatchedPositionStub::removeSimulationStatusListener, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::setSimulationSpeedStubDispatcher(
    &MapMatchedPositionStub::setSimulationSpeed, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getSimulationSpeed = returns the speed factor for the simulation mode
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > MapMatchedPositionDBusStubAdapterInternal::getSimulationSpeedStubDispatcher(
    &MapMatchedPositionStub::getSimulationSpeed, "y",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
 *   factor changes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::addSimulationSpeedListenerStubDispatcher(
    &MapMatchedPositionStub::addSimulationSpeedListener, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
 *   speed factor changes.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::removeSimulationSpeedListenerStubDispatcher(
    &MapMatchedPositionStub::removeSimulationSpeedListener, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: startSimulation = This method starts, or resumes, a Follow Active Route
 *   simulation
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::startSimulationStubDispatcher(
    &MapMatchedPositionStub::startSimulation, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: pauseSimulation = This method freezes the current location
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::pauseSimulationStubDispatcher(
    &MapMatchedPositionStub::pauseSimulation, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getPosition = This method returns the current position
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::PositionItemKey>>,
    std::tuple<MapMatchedPosition::PositionItemDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::PositionItemDictDeployment_t>
    
    > MapMatchedPositionDBusStubAdapterInternal::getPositionStubDispatcher(
    &MapMatchedPositionStub::getPosition, "a{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<MapMatchedPosition_::PositionItemDictDeployment_t*>(nullptr)));

/**
 * description: setPosition = This method sets the position to a specific location
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapMatchedPosition::PositionItemDict>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, MapMatchedPosition_::PositionItemDictDeployment_t>,
    std::tuple<>
    
    > MapMatchedPositionDBusStubAdapterInternal::setPositionStubDispatcher(
    &MapMatchedPositionStub::setPosition, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapMatchedPosition_::PositionItemDictDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: getAddress = This method returns the current address
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::AddressItemKey>>,
    std::tuple<MapMatchedPosition::AddressItemDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::AddressItemDictDeployment_t>
    
    > MapMatchedPositionDBusStubAdapterInternal::getCurrentAddressStubDispatcher(
    &MapMatchedPositionStub::getCurrentAddress, "a{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<MapMatchedPosition_::AddressItemDictDeployment_t*>(nullptr)));

/**
 * description: positionOnSegment = This method returns the vehicle position on a route segment
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::PositionOnSegmentKey>>,
    std::tuple<MapMatchedPosition::PositionOnSegmentDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::PositionOnSegmentDictDeployment_t>
    
    > MapMatchedPositionDBusStubAdapterInternal::getPositionOnSegmentStubDispatcher(
    &MapMatchedPositionStub::getPositionOnSegment, "a{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<MapMatchedPosition_::PositionOnSegmentDictDeployment_t*>(nullptr)));

/**
 * description: getStatus = This method returns the current status
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::PositionStatus>>,
    std::tuple<MapMatchedPosition::PositionStatusDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::PositionStatusDictDeployment_t>
    
    > MapMatchedPositionDBusStubAdapterInternal::getStatusStubDispatcher(
    &MapMatchedPositionStub::getStatus, "a{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<MapMatchedPosition_::PositionStatusDictDeployment_t*>(nullptr)));



/**
 * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
 *   changed
 */
void MapMatchedPositionDBusStubAdapterInternal::fireSimulationStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus& simulationStatus) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus
    >>::sendSignal(
            *this,
            "simulationStatusChanged",
            "i",
    simulationStatus
    );
}
/**
 * description: simulationSpeedChanged = This signal is emitted when the simulation speed
 *   factor has changed
 */
void MapMatchedPositionDBusStubAdapterInternal::fireSimulationSpeedChangedEvent(const uint8_t& speedFactor) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint8_t
    >>::sendSignal(
            *this,
            "simulationSpeedChanged",
            "y",
    speedFactor
    );
}
/**
 * description: positionUpdate = This signal is called to notify a client application of a
 *   position change. The update frequency is implementation specific. The maximal
 *   allowed frequency is 10Hz
 */
void MapMatchedPositionDBusStubAdapterInternal::firePositionUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>& changedValues) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    >>::sendSignal(
            *this,
            "positionUpdate",
            "ai",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(changedValues, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))
    );
}
/**
 * description: addressUpdate = This signal is called to notify a client application that the
 *   current address changed
 */
void MapMatchedPositionDBusStubAdapterInternal::fireAddressUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>& changedValues) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    >>::sendSignal(
            *this,
            "addressUpdate",
            "ai",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(changedValues, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))
    );
}
/**
 * description: positionOnSegmentUpdate = This signal is called to notify the client that the
 *   vehicle position on the route segment changed
 */
void MapMatchedPositionDBusStubAdapterInternal::firePositionOnSegmentUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>& changedValues) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    >>::sendSignal(
            *this,
            "positionOnSegmentUpdate",
            "ai",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(changedValues, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))
    );
}
/**
 * description: statusUpdate = This signal is emitted to notifiy a client application that the
 *   current status changed
 */
void MapMatchedPositionDBusStubAdapterInternal::fireStatusUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>& changedValues) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    >>::sendSignal(
            *this,
            "statusUpdate",
            "ai",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(changedValues, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))
    );
}
/**
 * description: offroadPositionChanged = This signal is emitted when the heading and the
 *   distance to the closest point on the road network changes
 */
void MapMatchedPositionDBusStubAdapterInternal::fireOffRoadPositionChangedEvent(const uint32_t& distance, const int32_t& direction) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint32_t,
    int32_t
    >>::sendSignal(
            *this,
            "offRoadPositionChanged",
            "ui",
    distance,
    direction
    );
}


const MapMatchedPositionDBusStubAdapterHelper::StubDispatcherTable& MapMatchedPositionDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& MapMatchedPositionDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

MapMatchedPositionDBusStubAdapterInternal::MapMatchedPositionDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      MapMatchedPositionDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<MapMatchedPositionStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: getVersion = This method returns the API version implemented by the server
             *   application
             */
            { { "getVersion", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: setSimulationMode = This method activates or deactivates the simulation mode
             */
            { { "setSimulationMode", "ub" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::setSimulationModeStubDispatcher },
            /**
             * description: getSimulationStatus = This method retrieves the simulation status
             */
            { { "getSimulationStatus", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getSimulationStatusStubDispatcher },
            /**
             * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
             *   changes.
             */
            { { "addSimulationStatusListener", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::addSimulationStatusListenerStubDispatcher },
            /**
             * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
             *   Status changes.
             */
            { { "removeSimulationStatusListener", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::removeSimulationStatusListenerStubDispatcher },
            /**
             * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
             */
            { { "setSimulationSpeed", "uy" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::setSimulationSpeedStubDispatcher },
            /**
             * description: getSimulationSpeed = returns the speed factor for the simulation mode
             */
            { { "getSimulationSpeed", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getSimulationSpeedStubDispatcher },
            /**
             * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
             *   factor changes.
             */
            { { "addSimulationSpeedListener", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::addSimulationSpeedListenerStubDispatcher },
            /**
             * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
             *   speed factor changes.
             */
            { { "removeSimulationSpeedListener", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::removeSimulationSpeedListenerStubDispatcher },
            /**
             * description: startSimulation = This method starts, or resumes, a Follow Active Route
             *   simulation
             */
            { { "startSimulation", "u" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::startSimulationStubDispatcher },
            /**
             * description: pauseSimulation = This method freezes the current location
             */
            { { "pauseSimulation", "u" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::pauseSimulationStubDispatcher },
            /**
             * description: getPosition = This method returns the current position
             */
            { { "getPosition", "ai" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getPositionStubDispatcher },
            /**
             * description: setPosition = This method sets the position to a specific location
             */
            { { "setPosition", "ua{i(yv)}" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::setPositionStubDispatcher },
            /**
             * description: getAddress = This method returns the current address
             */
            { { "getCurrentAddress", "ai" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getCurrentAddressStubDispatcher },
            /**
             * description: positionOnSegment = This method returns the vehicle position on a route segment
             */
            { { "getPositionOnSegment", "ai" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getPositionOnSegmentStubDispatcher },
            /**
             * description: getStatus = This method returns the current status
             */
            { { "getStatus", "ai" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getStatusStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::navigationcore::MapMatchedPositionDBusStubAdapterInternal::getMapMatchedPositionInterfaceVersionStubDispatcher });
}

bool MapMatchedPositionDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
