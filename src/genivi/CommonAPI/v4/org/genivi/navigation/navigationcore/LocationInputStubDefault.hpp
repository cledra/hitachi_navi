/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/navigationcore/LocationInputStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Provides a default implementation for LocationInputStubRemoteEvent and
 * LocationInputStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class LocationInputStubDefault
    : public virtual LocationInputStub {
public:
    LocationInputStubDefault();

    LocationInputStubRemoteEvent* initStubAdapter(const std::shared_ptr<LocationInputStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply);
    /**
     * description: createLocationInput = This method creates a new location input and retrieves a
     *   handle
     */
    virtual void createLocationInput(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, createLocationInputReply_t _reply);
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     */
    virtual void deleteLocationInput(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, deleteLocationInputReply_t _reply);
    /**
     * description: getSupportedAddressAttributes = This method retrieves the supported address
     *   attributes
     */
    virtual void getSupportedAddressAttributes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedAddressAttributesReply_t _reply);
    /**
     * description: setAddress = This method sets the address to start with for the LocationInput
     *   identified by the given handle
     */
    virtual void setAddress(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::Address _address, setAddressReply_t _reply);
    /**
     * description: setSelectionCriterion = This method sets the selection criterion for the
     *   current speller, search input and the corresponding result-lists for the
     *   current session
     */
    virtual void setSelectionCriterion(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::AddressAttribute _selectionCriterion, setSelectionCriterionReply_t _reply);
    /**
     * description: spell = This method sends the next spell input for the current session
     */
    virtual void spell(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, std::string _inputCharacter, uint16_t _maxWindowSize, spellReply_t _reply);
    /**
     * description: search = This method sends the search input for the current session
     */
    virtual void search(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, std::string _inputString, uint16_t _maxWindowSize, searchReply_t _reply);
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
     */
    virtual void requestListUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _offset, uint16_t _maxWindowSize, requestListUpdateReply_t _reply);
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     */
    virtual void selectEntry(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _index, selectEntryReply_t _reply);
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     */
    virtual void getEntry(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _index, getEntryReply_t _reply);
    /**
     * description: validateAddress = This method validates an address from different sources than
     *   Navigation
     */
    virtual void validateAddress(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::Address _inputAddress, validateAddressReply_t _reply);
    /**
     * description: reverseGeocode = This method transforms a geocoordinate into an address
     */
    virtual void reverseGeocode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _coordinate, reverseGeocodeReply_t _reply);

/**
 * description: currentSelectionCriterion = This signal notifies the SelectionCriterion for the
 *   current speller input or search.
 */
virtual void fireCurrentSelectionCriterionEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute &_selectionCriterion);
/**
 * description: searchStatus = This signal updates the search status of the specified session
 */
virtual void fireSearchStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::SearchStatus &_statusValue);
/**
 * description: spellResult = This signal notifies the result of the previous Spell method
 */
virtual void fireSpellResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_uniqueString, const std::string &_validCharacters, const bool &_fullMatch);
/**
 * description: searchResultList = This signal updates the address result list (e.g. after a
 *   Search/Spell/Scroll call)
 */
virtual void fireSearchResultListEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize, const uint16_t &_windowOffset, const uint16_t &_windowSize, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_resultListWindow);
/**
 * description: searchResultListSizeChanged = This signal updates the size of the address
 *   result list
 */
virtual void fireSearchResultListSizeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize);
/**
 * description: contentUpdated = This signal updates the input content data for the specified
 *   session
 */
virtual void fireContentUpdatedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const bool &_guidable, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute> &_availableSelectionCriteria, const ::v4::org::genivi::navigation::navigationcore::LocationInput::Address &_address);
/**
 * description: addressValidationResult = This signal notifies the validation result of a
 *   former ValidateAddress call
 */
virtual void fireAddressValidationResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_validatedAddressList, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::ValidationStatus> &_validationStatusList);


protected:
    class RemoteEventHandler: public virtual LocationInputStubRemoteEvent {
    public:
        RemoteEventHandler(LocationInputStubDefault *_defaultStub);


    private:
        LocationInputStubDefault *defaultStub_;
    };
private:
    LocationInputStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_STUB_DEFAULT
