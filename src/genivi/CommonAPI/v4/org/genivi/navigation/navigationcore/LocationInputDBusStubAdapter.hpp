/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/navigationcore/LocationInputStub.hpp>
#include "v4/org/genivi/navigation/navigationcore/LocationInputDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/navigationcore/LocationInputDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

typedef CommonAPI::DBus::DBusStubAdapterHelper<LocationInputStub> LocationInputDBusStubAdapterHelper;

class LocationInputDBusStubAdapterInternal
    : public virtual LocationInputStubAdapter,
      public LocationInputDBusStubAdapterHelper
{
public:
    LocationInputDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~LocationInputDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return LocationInput::getInterface();
    }


    /**
     * description: currentSelectionCriterion = This signal notifies the SelectionCriterion for the
     *   current speller input or search.
     */
    void fireCurrentSelectionCriterionEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute& selectionCriterion);
    /**
     * description: searchStatus = This signal updates the search status of the specified session
     */
    void fireSearchStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::SearchStatus& statusValue);
    /**
     * description: spellResult = This signal notifies the result of the previous Spell method
     */
    void fireSpellResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const std::string& uniqueString, const std::string& validCharacters, const bool& fullMatch);
    /**
     * description: searchResultList = This signal updates the address result list (e.g. after a
     *   Search/Spell/Scroll call)
     */
    void fireSearchResultListEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const uint16_t& totalSize, const uint16_t& windowOffset, const uint16_t& windowSize, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address>& resultListWindow);
    /**
     * description: searchResultListSizeChanged = This signal updates the size of the address
     *   result list
     */
    void fireSearchResultListSizeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const uint16_t& totalSize);
    /**
     * description: contentUpdated = This signal updates the input content data for the specified
     *   session
     */
    void fireContentUpdatedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const bool& guidable, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute>& availableSelectionCriteria, const ::v4::org::genivi::navigation::navigationcore::LocationInput::Address& address);
    /**
     * description: addressValidationResult = This signal notifies the validation result of a
     *   former ValidateAddress call
     */
    void fireAddressValidationResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle& locationInputHandle, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address>& validatedAddressList, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::ValidationStatus>& validationStatusList);


    const LocationInputDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
        CommonAPI::Version
        > getLocationInputInterfaceVersionStubDispatcher;



/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: createLocationInput = This method creates a new location input and retrieves a
 *   handle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::LocationHandle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > createLocationInputStubDispatcher;
/**
 * description: deleteLocationInput = This method deletes a location input and its associated
 *   resources
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > deleteLocationInputStubDispatcher;
/**
 * description: getSupportedAddressAttributes = This method retrieves the supported address
 *   attributes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<>,
    std::tuple<LocationInput::AddressAttributeList>,
    std::tuple<>,
    std::tuple<LocationInput_::AddressAttributeListDeployment_t>
    
    > getSupportedAddressAttributesStubDispatcher;
/**
 * description: setAddress = This method sets the address to start with for the LocationInput
 *   identified by the given handle
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, LocationInput::Address>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, LocationInput_::AddressDeployment_t>,
    std::tuple<>
    
    > setAddressStubDispatcher;
/**
 * description: setSelectionCriterion = This method sets the selection criterion for the
 *   current speller, search input and the corresponding result-lists for the
 *   current session
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, LocationInput::AddressAttribute>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setSelectionCriterionStubDispatcher;
/**
 * description: spell = This method sends the next spell input for the current session
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, std::string, uint16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > spellStubDispatcher;
/**
 * description: search = This method sends the search input for the current session
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, std::string, uint16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > searchStubDispatcher;
/**
 * description: requestListUpdate = This method sends a request for more list elements for the
 *   current session
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, uint16_t, uint16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > requestListUpdateStubDispatcher;
/**
 * description: selectEntry = This method triggers selection of a result list entry by index
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, uint16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > selectEntryStubDispatcher;
/**
 * description: getEntry = This method synchronously gets the address for the given result list
 *   entry
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, uint16_t>,
    std::tuple<LocationInput::Address>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<LocationInput_::AddressDeployment_t>
    
    > getEntryStubDispatcher;
/**
 * description: validateAddress = This method validates an address from different sources than
 *   Navigation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, LocationInput::Address>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, LocationInput_::AddressDeployment_t>,
    std::tuple<>
    
    > validateAddressStubDispatcher;
/**
 * description: reverseGeocode = This method transforms a geocoordinate into an address
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::LocationInputStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>,
    std::tuple<>
    
    > reverseGeocodeStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    LocationInputDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class LocationInputDBusStubAdapter
    : public LocationInputDBusStubAdapterInternal,
      public std::enable_shared_from_this<LocationInputDBusStubAdapter> {
public:
    LocationInputDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          LocationInputDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_DBUS_STUB_ADAPTER_HPP_
