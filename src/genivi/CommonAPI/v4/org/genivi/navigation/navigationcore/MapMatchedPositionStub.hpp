/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapMatchedPosition = This interface offers functions to retrieve the map
 *   matched position and to simulate positioning
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>
#include <v4/org/genivi/navigation/navigationcore/NavigationCoreTypes.hpp>

#include <v4/org/genivi/navigation/navigationcore/MapMatchedPosition.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service MapMatchedPosition. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class MapMatchedPositionStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual MapMatchedPosition {
 public:

    /**
     * Sends a broadcast event for simulationStatusChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSimulationStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus &_simulationStatus) = 0;
    /**
     * Sends a broadcast event for simulationSpeedChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSimulationSpeedChangedEvent(const uint8_t &_speedFactor) = 0;
    /**
     * Sends a broadcast event for positionUpdate. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePositionUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey> &_changedValues) = 0;
    /**
     * Sends a broadcast event for addressUpdate. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireAddressUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey> &_changedValues) = 0;
    /**
     * Sends a broadcast event for positionOnSegmentUpdate. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePositionOnSegmentUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey> &_changedValues) = 0;
    /**
     * Sends a broadcast event for statusUpdate. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireStatusUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus> &_changedValues) = 0;
    /**
     * Sends a broadcast event for offRoadPositionChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireOffRoadPositionChangedEvent(const uint32_t &_distance, const int32_t &_direction) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for MapMatchedPosition.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MapMatchedPositionStubRemoteEvent
{
public:
    virtual ~MapMatchedPositionStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service MapMatchedPosition to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class MapMatchedPositionStub
    : public virtual CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void ()>setSimulationModeReply_t;
    typedef std::function<void (MapMatchedPosition::SimulationStatus _simulationStatus)>getSimulationStatusReply_t;
    typedef std::function<void ()>addSimulationStatusListenerReply_t;
    typedef std::function<void ()>removeSimulationStatusListenerReply_t;
    typedef std::function<void ()>setSimulationSpeedReply_t;
    typedef std::function<void (uint8_t _speedFactor)>getSimulationSpeedReply_t;
    typedef std::function<void ()>addSimulationSpeedListenerReply_t;
    typedef std::function<void ()>removeSimulationSpeedListenerReply_t;
    typedef std::function<void ()>startSimulationReply_t;
    typedef std::function<void ()>pauseSimulationReply_t;
    typedef std::function<void (MapMatchedPosition::PositionItemDict _position)>getPositionReply_t;
    typedef std::function<void ()>setPositionReply_t;
    typedef std::function<void (MapMatchedPosition::AddressItemDict _address)>getCurrentAddressReply_t;
    typedef std::function<void (MapMatchedPosition::PositionOnSegmentDict _positionOnSegment)>getPositionOnSegmentReply_t;
    typedef std::function<void (MapMatchedPosition::PositionStatusDict _status)>getStatusReply_t;

    virtual ~MapMatchedPositionStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: setSimulationMode = This method activates or deactivates the simulation mode
     */
    /// This is the method that will be called on remote calls on the method setSimulationMode.
    virtual void setSimulationMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, bool _activate, setSimulationModeReply_t _reply) = 0;
    /**
     * description: getSimulationStatus = This method retrieves the simulation status
     */
    /// This is the method that will be called on remote calls on the method getSimulationStatus.
    virtual void getSimulationStatus(const std::shared_ptr<CommonAPI::ClientId> _client, getSimulationStatusReply_t _reply) = 0;
    /**
     * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
     *   changes.
     */
    /// This is the method that will be called on remote calls on the method addSimulationStatusListener.
    virtual void addSimulationStatusListener(const std::shared_ptr<CommonAPI::ClientId> _client, addSimulationStatusListenerReply_t _reply) = 0;
    /**
     * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
     *   Status changes.
     */
    /// This is the method that will be called on remote calls on the method removeSimulationStatusListener.
    virtual void removeSimulationStatusListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeSimulationStatusListenerReply_t _reply) = 0;
    /**
     * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
     */
    /// This is the method that will be called on remote calls on the method setSimulationSpeed.
    virtual void setSimulationSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, uint8_t _speedFactor, setSimulationSpeedReply_t _reply) = 0;
    /**
     * description: getSimulationSpeed = returns the speed factor for the simulation mode
     */
    /// This is the method that will be called on remote calls on the method getSimulationSpeed.
    virtual void getSimulationSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, getSimulationSpeedReply_t _reply) = 0;
    /**
     * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
     *   factor changes.
     */
    /// This is the method that will be called on remote calls on the method addSimulationSpeedListener.
    virtual void addSimulationSpeedListener(const std::shared_ptr<CommonAPI::ClientId> _client, addSimulationSpeedListenerReply_t _reply) = 0;
    /**
     * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
     *   speed factor changes.
     */
    /// This is the method that will be called on remote calls on the method removeSimulationSpeedListener.
    virtual void removeSimulationSpeedListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeSimulationSpeedListenerReply_t _reply) = 0;
    /**
     * description: startSimulation = This method starts, or resumes, a Follow Active Route
     *   simulation
     */
    /// This is the method that will be called on remote calls on the method startSimulation.
    virtual void startSimulation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, startSimulationReply_t _reply) = 0;
    /**
     * description: pauseSimulation = This method freezes the current location
     */
    /// This is the method that will be called on remote calls on the method pauseSimulation.
    virtual void pauseSimulation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, pauseSimulationReply_t _reply) = 0;
    /**
     * description: getPosition = This method returns the current position
     */
    /// This is the method that will be called on remote calls on the method getPosition.
    virtual void getPosition(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionItemKey> _valuesToReturn, getPositionReply_t _reply) = 0;
    /**
     * description: setPosition = This method sets the position to a specific location
     */
    /// This is the method that will be called on remote calls on the method setPosition.
    virtual void setPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, MapMatchedPosition::PositionItemDict _position, setPositionReply_t _reply) = 0;
    /**
     * description: getAddress = This method returns the current address
     */
    /// This is the method that will be called on remote calls on the method getCurrentAddress.
    virtual void getCurrentAddress(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::AddressItemKey> _valuesToReturn, getCurrentAddressReply_t _reply) = 0;
    /**
     * description: positionOnSegment = This method returns the vehicle position on a route segment
     */
    /// This is the method that will be called on remote calls on the method getPositionOnSegment.
    virtual void getPositionOnSegment(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionOnSegmentKey> _valuesToReturn, getPositionOnSegmentReply_t _reply) = 0;
    /**
     * description: getStatus = This method returns the current status
     */
    /// This is the method that will be called on remote calls on the method getStatus.
    virtual void getStatus(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionStatus> _valuesToReturn, getStatusReply_t _reply) = 0;
    /**
     * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
     *   changed
     */
    /// Sends a broadcast event for simulationStatusChanged.
    virtual void fireSimulationStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus &_simulationStatus) = 0;
    /**
     * description: simulationSpeedChanged = This signal is emitted when the simulation speed
     *   factor has changed
     */
    /// Sends a broadcast event for simulationSpeedChanged.
    virtual void fireSimulationSpeedChangedEvent(const uint8_t &_speedFactor) = 0;
    /**
     * description: positionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    /// Sends a broadcast event for positionUpdate.
    virtual void firePositionUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey> &_changedValues) = 0;
    /**
     * description: addressUpdate = This signal is called to notify a client application that the
     *   current address changed
     */
    /// Sends a broadcast event for addressUpdate.
    virtual void fireAddressUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey> &_changedValues) = 0;
    /**
     * description: positionOnSegmentUpdate = This signal is called to notify the client that the
     *   vehicle position on the route segment changed
     */
    /// Sends a broadcast event for positionOnSegmentUpdate.
    virtual void firePositionOnSegmentUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey> &_changedValues) = 0;
    /**
     * description: statusUpdate = This signal is emitted to notifiy a client application that the
     *   current status changed
     */
    /// Sends a broadcast event for statusUpdate.
    virtual void fireStatusUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus> &_changedValues) = 0;
    /**
     * description: offroadPositionChanged = This signal is emitted when the heading and the
     *   distance to the closest point on the road network changes
     */
    /// Sends a broadcast event for offRoadPositionChanged.
    virtual void fireOffRoadPositionChangedEvent(const uint32_t &_distance, const int32_t &_direction) = 0;

    using CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef MapMatchedPositionStubRemoteEvent RemoteEventType;
    typedef MapMatchedPosition StubInterface;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_STUB_HPP_
