/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_PROXY_HPP_

#include <v4/org/genivi/navigation/navigationcore/LocationInputProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

template <typename ... _AttributeExtensions>
class LocationInputProxy
    : virtual public LocationInput, 
      virtual public LocationInputProxyBase,
      virtual public _AttributeExtensions... {
public:
    LocationInputProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~LocationInputProxy();

    typedef LocationInput InterfaceType;



    /**
     * description: currentSelectionCriterion = This signal notifies the SelectionCriterion for the
     *   current speller input or search.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast currentSelectionCriterion.
     */
    virtual CurrentSelectionCriterionEvent& getCurrentSelectionCriterionEvent() {
        return delegate_->getCurrentSelectionCriterionEvent();
    }
    /**
     * description: searchStatus = This signal updates the search status of the specified session
     */
    /**
     * Returns the wrapper class that provides access to the broadcast searchStatus.
     */
    virtual SearchStatusEvent& getSearchStatusEvent() {
        return delegate_->getSearchStatusEvent();
    }
    /**
     * description: spellResult = This signal notifies the result of the previous Spell method
     */
    /**
     * Returns the wrapper class that provides access to the broadcast spellResult.
     */
    virtual SpellResultEvent& getSpellResultEvent() {
        return delegate_->getSpellResultEvent();
    }
    /**
     * description: searchResultList = This signal updates the address result list (e.g. after a
     *   Search/Spell/Scroll call)
     */
    /**
     * Returns the wrapper class that provides access to the broadcast searchResultList.
     */
    virtual SearchResultListEvent& getSearchResultListEvent() {
        return delegate_->getSearchResultListEvent();
    }
    /**
     * description: searchResultListSizeChanged = This signal updates the size of the address
     *   result list
     */
    /**
     * Returns the wrapper class that provides access to the broadcast searchResultListSizeChanged.
     */
    virtual SearchResultListSizeChangedEvent& getSearchResultListSizeChangedEvent() {
        return delegate_->getSearchResultListSizeChangedEvent();
    }
    /**
     * description: contentUpdated = This signal updates the input content data for the specified
     *   session
     */
    /**
     * Returns the wrapper class that provides access to the broadcast contentUpdated.
     */
    virtual ContentUpdatedEvent& getContentUpdatedEvent() {
        return delegate_->getContentUpdatedEvent();
    }
    /**
     * description: addressValidationResult = This signal notifies the validation result of a
     *   former ValidateAddress call
     */
    /**
     * Returns the wrapper class that provides access to the broadcast addressValidationResult.
     */
    virtual AddressValidationResultEvent& getAddressValidationResultEvent() {
        return delegate_->getAddressValidationResultEvent();
    }

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: createLocationInput = This method creates a new location input and retrieves a
     *   handle
     * Calls createLocationInput with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createLocationInput(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createLocationInput with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createLocationInputAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CreateLocationInputAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     * Calls deleteLocationInput with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteLocationInput(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteLocationInput with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteLocationInputAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, DeleteLocationInputAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSupportedAddressAttributes = This method retrieves the supported address
     *   attributes
     * Calls getSupportedAddressAttributes with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedAddressAttributes(CommonAPI::CallStatus &_internalCallStatus, LocationInput::AddressAttributeList &_addressAttributesList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedAddressAttributes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedAddressAttributesAsync(GetSupportedAddressAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setAddress = This method sets the address to start with for the LocationInput
     *   identified by the given handle
     * Calls setAddress with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setAddress(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_address, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setAddress with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setAddressAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_address, SetAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setSelectionCriterion = This method sets the selection criterion for the
     *   current speller, search input and the corresponding result-lists for the
     *   current session
     * Calls setSelectionCriterion with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSelectionCriterion(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::AddressAttribute &_selectionCriterion, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSelectionCriterion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSelectionCriterionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::AddressAttribute &_selectionCriterion, SetSelectionCriterionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: spell = This method sends the next spell input for the current session
     * Calls spell with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void spell(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls spell with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> spellAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, SpellAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: search = This method sends the search input for the current session
     * Calls search with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void search(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls search with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> searchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, SearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
     * Calls requestListUpdate with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestListUpdate(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestListUpdate with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestListUpdateAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestListUpdateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     * Calls selectEntry with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void selectEntry(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls selectEntry with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> selectEntryAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     * Calls getEntry with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getEntry(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, LocationInput::Address &_address, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getEntry with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getEntryAsync(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, GetEntryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: validateAddress = This method validates an address from different sources than
     *   Navigation
     * Calls validateAddress with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void validateAddress(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_inputAddress, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls validateAddress with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> validateAddressAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_inputAddress, ValidateAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: reverseGeocode = This method transforms a geocoordinate into an address
     * Calls reverseGeocode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void reverseGeocode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_coordinate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls reverseGeocode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> reverseGeocodeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_coordinate, ReverseGeocodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<LocationInputProxyBase> delegate_;
};

typedef LocationInputProxy<> LocationInputProxyDefault;


//
// LocationInputProxy Implementation
//
template <typename ... _AttributeExtensions>
LocationInputProxy<_AttributeExtensions...>::LocationInputProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<LocationInputProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<LocationInputProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
LocationInputProxy<_AttributeExtensions...>::~LocationInputProxy() {
}

/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_callback, _info);
}
/**
 * description: createLocationInput = This method creates a new location input and retrieves a
 *   handle
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::createLocationInput(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const CommonAPI::CallInfo *_info) {
    delegate_->createLocationInput(_sessionHandle, _internalCallStatus, _locationInputHandle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::createLocationInputAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CreateLocationInputAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createLocationInputAsync(_sessionHandle, _callback, _info);
}
/**
 * description: deleteLocationInput = This method deletes a location input and its associated
 *   resources
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::deleteLocationInput(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->deleteLocationInput(_sessionHandle, _locationInputHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::deleteLocationInputAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, DeleteLocationInputAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteLocationInputAsync(_sessionHandle, _locationInputHandle, _callback, _info);
}
/**
 * description: getSupportedAddressAttributes = This method retrieves the supported address
 *   attributes
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::getSupportedAddressAttributes(CommonAPI::CallStatus &_internalCallStatus, LocationInput::AddressAttributeList &_addressAttributesList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedAddressAttributes(_internalCallStatus, _addressAttributesList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::getSupportedAddressAttributesAsync(GetSupportedAddressAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedAddressAttributesAsync(_callback, _info);
}
/**
 * description: setAddress = This method sets the address to start with for the LocationInput
 *   identified by the given handle
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::setAddress(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_address, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setAddress(_sessionHandle, _locationInputHandle, _address, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::setAddressAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_address, SetAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setAddressAsync(_sessionHandle, _locationInputHandle, _address, _callback, _info);
}
/**
 * description: setSelectionCriterion = This method sets the selection criterion for the
 *   current speller, search input and the corresponding result-lists for the
 *   current session
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::setSelectionCriterion(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::AddressAttribute &_selectionCriterion, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_selectionCriterion.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setSelectionCriterion(_sessionHandle, _locationInputHandle, _selectionCriterion, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::setSelectionCriterionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::AddressAttribute &_selectionCriterion, SetSelectionCriterionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_selectionCriterion.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setSelectionCriterionAsync(_sessionHandle, _locationInputHandle, _selectionCriterion, _callback, _info);
}
/**
 * description: spell = This method sends the next spell input for the current session
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::spell(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->spell(_sessionHandle, _locationInputHandle, _inputCharacter, _maxWindowSize, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::spellAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, SpellAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->spellAsync(_sessionHandle, _locationInputHandle, _inputCharacter, _maxWindowSize, _callback, _info);
}
/**
 * description: search = This method sends the search input for the current session
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::search(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->search(_sessionHandle, _locationInputHandle, _inputString, _maxWindowSize, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::searchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, SearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->searchAsync(_sessionHandle, _locationInputHandle, _inputString, _maxWindowSize, _callback, _info);
}
/**
 * description: requestListUpdate = This method sends a request for more list elements for the
 *   current session
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::requestListUpdate(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->requestListUpdate(_sessionHandle, _locationInputHandle, _offset, _maxWindowSize, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::requestListUpdateAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestListUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestListUpdateAsync(_sessionHandle, _locationInputHandle, _offset, _maxWindowSize, _callback, _info);
}
/**
 * description: selectEntry = This method triggers selection of a result list entry by index
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::selectEntry(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->selectEntry(_sessionHandle, _locationInputHandle, _index, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::selectEntryAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->selectEntryAsync(_sessionHandle, _locationInputHandle, _index, _callback, _info);
}
/**
 * description: getEntry = This method synchronously gets the address for the given result list
 *   entry
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::getEntry(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, LocationInput::Address &_address, const CommonAPI::CallInfo *_info) {
    delegate_->getEntry(_locationInputHandle, _index, _internalCallStatus, _address, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::getEntryAsync(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, GetEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getEntryAsync(_locationInputHandle, _index, _callback, _info);
}
/**
 * description: validateAddress = This method validates an address from different sources than
 *   Navigation
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::validateAddress(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_inputAddress, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->validateAddress(_sessionHandle, _locationInputHandle, _inputAddress, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::validateAddressAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_inputAddress, ValidateAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->validateAddressAsync(_sessionHandle, _locationInputHandle, _inputAddress, _callback, _info);
}
/**
 * description: reverseGeocode = This method transforms a geocoordinate into an address
 */
template <typename ... _AttributeExtensions>
void LocationInputProxy<_AttributeExtensions...>::reverseGeocode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_coordinate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->reverseGeocode(_sessionHandle, _locationInputHandle, _coordinate, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationInputProxy<_AttributeExtensions...>::reverseGeocodeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_coordinate, ReverseGeocodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->reverseGeocodeAsync(_sessionHandle, _locationInputHandle, _coordinate, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &LocationInputProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool LocationInputProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool LocationInputProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& LocationInputProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& LocationInputProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_PROXY_HPP_
