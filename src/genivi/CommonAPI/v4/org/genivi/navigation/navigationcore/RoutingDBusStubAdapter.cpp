/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/navigationcore/Routing.hpp>
#include <v4/org/genivi/navigation/navigationcore/RoutingDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createRoutingDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<RoutingDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerRoutingDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Routing::getInterface(), &createRoutingDBusStubAdapter);
}

RoutingDBusStubAdapterInternal::~RoutingDBusStubAdapterInternal() {
    deactivateManagedInstances();
    RoutingDBusStubAdapterHelper::deinit();
}

void RoutingDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* RoutingDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: routeDeleted = This signal is emitted to inform clients that the current route
         *   has been deleted
         */
        "<signal name=\"routeDeleted\">\n"
            "<arg name=\"routeHandle\" type=\"u\" />\n"
        "</signal>\n"
        /**
         * description: routeCalculationCancelled = This signal informs a client that a route
         *   calculation was cancelled
         */
        "<signal name=\"routeCalculationCancelled\">\n"
            "<arg name=\"routeHandle\" type=\"u\" />\n"
        "</signal>\n"
        /**
         * description: routeCalculationSuccessful = This signal informs a client that a route
         *   calculation was successful
         */
        "<signal name=\"routeCalculationSuccessful\">\n"
            "<arg name=\"routeHandle\" type=\"u\" />\n"
            "<arg name=\"unfullfilledPreferences\" type=\"a{ii}\" />\n"
        "</signal>\n"
        /**
         * description: routeCalculationFailed = This signal informs a client that a route calculation
         *   failed
         */
        "<signal name=\"routeCalculationFailed\">\n"
            "<arg name=\"Handle\" type=\"u\" />\n"
            "<arg name=\"errorCode\" type=\"i\" />\n"
            "<arg name=\"unfullfilledPreferences\" type=\"a{ii}\" />\n"
        "</signal>\n"
        /**
         * description: routeCalculationProgressUpdate = This signal informs a client about a route
         *   calculation progress
         */
        "<signal name=\"routeCalculationProgressUpdate\">\n"
            "<arg name=\"routeHandle\" type=\"u\" />\n"
            "<arg name=\"status\" type=\"i\" />\n"
            "<arg name=\"percentage\" type=\"y\" />\n"
        "</signal>\n"
        /**
         * description: alternativeRoutesAvailable = This signal is emitted when alternative routes
         *   have been computed in the background and are available for guidance.
         */
        "<signal name=\"alternativeRoutesAvailable\">\n"
            "<arg name=\"routeHandlesList\" type=\"au\" />\n"
        "</signal>\n"
        /**
         * description: This method returns the API version implemented by the server application
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method creates a route
         */
        "<method name=\"createRoute\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method deletes a route and its associated resources
         */
        "<method name=\"deleteRoute\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method sets the cost model
         */
        "<method name=\"setCostModel\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_costModel\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves the selected cost model
         */
        "<method name=\"getCostModel\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_costModel\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves a list of supported cost models
         */
        "<method name=\"getSupportedCostModels\">\n"
            "<arg name=\"_costModelsList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method sets a list of route preferences
         */
        "<method name=\"setRoutePreferences\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_countryCode\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_roadPreferenceList\" type=\"a(ii)\" direction=\"in\" />\n"
            "<arg name=\"_conditionPreferenceList\" type=\"a(ii)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves a list of selected route preferences
         */
        "<method name=\"getRoutePreferences\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_countryCode\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_roadPreferenceList\" type=\"a(ii)\" direction=\"out\" />\n"
            "<arg name=\"_conditionPreferenceList\" type=\"a(ii)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves a list of supported route preferences
         */
        "<method name=\"getSupportedRoutePreferences\">\n"
            "<arg name=\"_routePreferencesList\" type=\"a(ii)\" direction=\"out\" />\n"
            "<arg name=\"_conditionPreferenceList\" type=\"a(ii)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method sets the time schedule for the route to be calculated
         */
        "<method name=\"setRouteSchedule\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeSchedule\" type=\"a{iu}\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method gets the time schedule for the route to be calculated
         */
        "<method name=\"getRouteSchedule\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_routeSchedule\" type=\"a{iu}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method sets a list of means of transportation that must be considered when
         *   calculating a route
         */
        "<method name=\"setTransportationMeans\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_transportationMeansList\" type=\"ai\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getTransportationMeans = This method retrieves the selected means of
         *   transportation
         */
        "<method name=\"getTransportationMeans\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_transportationMeansList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getSupportedTransportationMeans = This method retrieves a list of supported
         *   means of transportation
         */
        "<method name=\"getSupportedTransportationMeans\">\n"
            "<arg name=\"_transportationMeansList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
         *   route
         */
        "<method name=\"setExcludedAreas\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_excludedAreas\" type=\"aa(dd)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getExcludedAreas = This method retrieves the areas to be excluded when
         *   calculating a route
         */
        "<method name=\"getExcludedAreas\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_excludedAreas\" type=\"aa(dd)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setWaypoints = This method sets a list of waypoints
         */
        "<method name=\"setWaypoints\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_startFromCurrentPosition\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_waypointsList\" type=\"aa{i(yv)}\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getWaypoints = This method retrieves a list of waypoints
         */
        "<method name=\"getWaypoints\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_startFromCurrentPosition\" type=\"b\" direction=\"out\" />\n"
            "<arg name=\"_waypointsList\" type=\"aa{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: calculateRoute = This method starts a route calculation
         */
        "<method name=\"calculateRoute\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: cancelRouteCalculation = This method cancels a route calculation
         */
        "<method name=\"cancelRouteCalculation\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: calculateRoutes = This method allows a client to calculate alternative routes
         *   that differs from a list of already calculated routes
         */
        "<method name=\"calculateRoutes\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_calculatedRoutesList\" type=\"au\" direction=\"in\" />\n"
            "<arg name=\"_alternativeRoutesList\" type=\"au\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getRouteSegments = This method retrieves a list of segments for a given route
         *   starting from the one closest to the current position to the one closest to
         *   the destination
         */
        "<method name=\"getRouteSegments\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_detailLevel\" type=\"n\" direction=\"in\" />\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_numberOfSegments\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_totalNumberOfSegments\" type=\"u\" direction=\"out\" />\n"
            "<arg name=\"_routeSegments\" type=\"aa{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getRouteOverview = This method retrieves general information about a given route
         */
        "<method name=\"getRouteOverview\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_valuesToReturn\" type=\"ai\" direction=\"in\" />\n"
            "<arg name=\"_routeOverview\" type=\"a{i(yv)}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getRouteBoundingBox = This method retrieves the bounding box containing a
         *   calculated route
         */
        "<method name=\"getRouteBoundingBox\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_boundingBox\" type=\"((dd)(dd))\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getAllRoutes = This method retrieves the handles of all created routes
         */
        "<method name=\"getAllRoutes\">\n"
            "<arg name=\"_routesList\" type=\"au\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setBlockedRouteStretches = This method sets blocked streches on a given route
         */
        "<method name=\"setBlockedRouteStretches\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_blockParameters\" type=\"a(uu)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
         *   given route
         */
        "<method name=\"getBlockedRouteStretches\">\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_blockParameters\" type=\"a(uu)\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::RoutingStub,
        CommonAPI::Version
        > RoutingDBusStubAdapterInternal::getRoutingInterfaceVersionStubDispatcher(&RoutingStub::getInterfaceVersion, "uu");




/**
 * description: This method returns the API version implemented by the server application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > RoutingDBusStubAdapterInternal::getVersionStubDispatcher(
    &RoutingStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: This method creates a route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingDBusStubAdapterInternal::createRouteStubDispatcher(
    &RoutingStub::createRoute, "u",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method deletes a route and its associated resources
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::deleteRouteStubDispatcher(
    &RoutingStub::deleteRoute, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method sets the cost model
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, Routing::CostModel>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setCostModelStubDispatcher(
    &RoutingStub::setCostModel, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method retrieves the selected cost model
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<Routing::CostModel>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > RoutingDBusStubAdapterInternal::getCostModelStubDispatcher(
    &RoutingStub::getCostModel, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method retrieves a list of supported cost models
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<Routing::CostModel>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > RoutingDBusStubAdapterInternal::getSupportedCostModelsStubDispatcher(
    &RoutingStub::getSupportedCostModels, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: This method sets a list of route preferences
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::string, std::vector<Routing::RoutePreference>, std::vector<Routing::ConditionPreference>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>, CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setRoutePreferencesStubDispatcher(
    &RoutingStub::setRoutePreferences, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method retrieves a list of selected route preferences
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::string>,
    std::tuple<std::vector<Routing::RoutePreference>, std::vector<Routing::ConditionPreference>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>, CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>>
    
    > RoutingDBusStubAdapterInternal::getRoutePreferencesStubDispatcher(
    &RoutingStub::getRoutePreferences, "a(ii)a(ii)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>*>(nullptr)));

/**
 * description: This method retrieves a list of supported route preferences
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<Routing::RoutePreference>, std::vector<Routing::ConditionPreference>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>, CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>>
    
    > RoutingDBusStubAdapterInternal::getSupportedRoutePreferencesStubDispatcher(
    &RoutingStub::getSupportedRoutePreferences, "a(ii)a(ii)",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>*>(nullptr)));

/**
 * description: This method sets the time schedule for the route to be calculated
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, Routing::RouteSchedule>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, Routing_::RouteScheduleDeployment_t>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setRouteScheduleStubDispatcher(
    &RoutingStub::setRouteSchedule, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<Routing_::RouteScheduleDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method gets the time schedule for the route to be calculated
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::Schedule>>,
    std::tuple<Routing::RouteSchedule>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<Routing_::RouteScheduleDeployment_t>
    
    > RoutingDBusStubAdapterInternal::getRouteScheduleStubDispatcher(
    &RoutingStub::getRouteSchedule, "a{iu}",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<Routing_::RouteScheduleDeployment_t*>(nullptr)));

/**
 * description: This method sets a list of means of transportation that must be considered when
 *   calculating a route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::TransportationMeans>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setTransportationMeansStubDispatcher(
    &RoutingStub::setTransportationMeans, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple());

/**
 * description: getTransportationMeans = This method retrieves the selected means of
 *   transportation
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<Routing::TransportationMeans>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > RoutingDBusStubAdapterInternal::getTransportationMeansStubDispatcher(
    &RoutingStub::getTransportationMeans, "ai",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: getSupportedTransportationMeans = This method retrieves a list of supported
 *   means of transportation
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<Routing::TransportationMeans>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > RoutingDBusStubAdapterInternal::getSupportedTransportationMeansStubDispatcher(
    &RoutingStub::getSupportedTransportationMeans, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
 *   route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::PolygonDeployment_t>>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setExcludedAreasStubDispatcher(
    &RoutingStub::setExcludedAreas, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::PolygonDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: getExcludedAreas = This method retrieves the areas to be excluded when
 *   calculating a route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::PolygonDeployment_t>>
    
    > RoutingDBusStubAdapterInternal::getExcludedAreasStubDispatcher(
    &RoutingStub::getExcludedAreas, "aa(dd)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::PolygonDeployment_t>*>(nullptr)));

/**
 * description: setWaypoints = This method sets a list of waypoints
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool, std::vector<Routing::WayPoint>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::WayPointDeployment_t>>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setWaypointsStubDispatcher(
    &RoutingStub::setWaypoints, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::WayPointDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: getWaypoints = This method retrieves a list of waypoints
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<bool, std::vector<Routing::WayPoint>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::WayPointDeployment_t>>
    
    > RoutingDBusStubAdapterInternal::getWaypointsStubDispatcher(
    &RoutingStub::getWaypoints, "baa{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::WayPointDeployment_t>*>(nullptr)));

/**
 * description: calculateRoute = This method starts a route calculation
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::calculateRouteStubDispatcher(
    &RoutingStub::calculateRoute, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: cancelRouteCalculation = This method cancels a route calculation
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::cancelRouteCalculationStubDispatcher(
    &RoutingStub::cancelRouteCalculation, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: calculateRoutes = This method allows a client to calculate alternative routes
 *   that differs from a list of already calculated routes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > RoutingDBusStubAdapterInternal::calculateRoutesStubDispatcher(
    &RoutingStub::calculateRoutes, "au",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: getRouteSegments = This method retrieves a list of segments for a given route
 *   starting from the one closest to the current position to the one closest to
 *   the destination
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, int16_t, std::vector<Routing::RouteSegmentType>, uint32_t, uint32_t>,
    std::tuple<uint32_t, std::vector<Routing::RouteSegment>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::RouteSegmentDeployment_t>>
    
    > RoutingDBusStubAdapterInternal::getRouteSegmentsStubDispatcher(
    &RoutingStub::getRouteSegments, "uaa{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::RouteSegmentDeployment_t>*>(nullptr)));

/**
 * description: getRouteOverview = This method retrieves general information about a given route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::RouteOverviewType>>,
    std::tuple<Routing::RouteOverview>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<Routing_::RouteOverviewDeployment_t>
    
    > RoutingDBusStubAdapterInternal::getRouteOverviewStubDispatcher(
    &RoutingStub::getRouteOverview, "a{i(yv)}",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<Routing_::RouteOverviewDeployment_t*>(nullptr)));

/**
 * description: getRouteBoundingBox = This method retrieves the bounding box containing a
 *   calculated route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Rectangle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
    
    > RoutingDBusStubAdapterInternal::getRouteBoundingBoxStubDispatcher(
    &RoutingStub::getRouteBoundingBox, "((dd)(dd))",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr)));

/**
 * description: getAllRoutes = This method retrieves the handles of all created routes
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > RoutingDBusStubAdapterInternal::getAllRoutesStubDispatcher(
    &RoutingStub::getAllRoutes, "au",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: setBlockedRouteStretches = This method sets blocked streches on a given route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::BlockedRouteElement>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::BlockedRouteElementDeployment_t>>,
    std::tuple<>
    
    > RoutingDBusStubAdapterInternal::setBlockedRouteStretchesStubDispatcher(
    &RoutingStub::setBlockedRouteStretches, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::BlockedRouteElementDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
 *   given route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<Routing::BlockedRouteElement>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<Routing_::BlockedRouteElementDeployment_t>>
    
    > RoutingDBusStubAdapterInternal::getBlockedRouteStretchesStubDispatcher(
    &RoutingStub::getBlockedRouteStretches, "a(uu)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<Routing_::BlockedRouteElementDeployment_t>*>(nullptr)));



/**
 * description: routeDeleted = This signal is emitted to inform clients that the current route
 *   has been deleted
 */
void RoutingDBusStubAdapterInternal::fireRouteDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle
    >>::sendSignal(
            *this,
            "routeDeleted",
            "u",
    routeHandle
    );
}
/**
 * description: routeCalculationCancelled = This signal informs a client that a route
 *   calculation was cancelled
 */
void RoutingDBusStubAdapterInternal::fireRouteCalculationCancelledEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle
    >>::sendSignal(
            *this,
            "routeCalculationCancelled",
            "u",
    routeHandle
    );
}
/**
 * description: routeCalculationSuccessful = This signal informs a client that a route
 *   calculation was successful
 */
void RoutingDBusStubAdapterInternal::fireRouteCalculationSuccessfulEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference& unfullfilledPreferences) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference, Routing_::UnfullfilledRoutePreferenceDeployment_t>
    >>::sendSignal(
            *this,
            "routeCalculationSuccessful",
            "ua{ii}",
    routeHandle,
    CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference, Routing_::UnfullfilledRoutePreferenceDeployment_t>(unfullfilledPreferences, static_cast<Routing_::UnfullfilledRoutePreferenceDeployment_t*>(nullptr))
    );
}
/**
 * description: routeCalculationFailed = This signal informs a client that a route calculation
 *   failed
 */
void RoutingDBusStubAdapterInternal::fireRouteCalculationFailedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& Handle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationError& errorCode, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference& unfullfilledPreferences) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::navigationcore::Routing::CalculationError,
    CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference, Routing_::UnfullfilledRoutePreferenceDeployment_t>
    >>::sendSignal(
            *this,
            "routeCalculationFailed",
            "uia{ii}",
    Handle,
    errorCode,
    CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference, Routing_::UnfullfilledRoutePreferenceDeployment_t>(unfullfilledPreferences, static_cast<Routing_::UnfullfilledRoutePreferenceDeployment_t*>(nullptr))
    );
}
/**
 * description: routeCalculationProgressUpdate = This signal informs a client about a route
 *   calculation progress
 */
void RoutingDBusStubAdapterInternal::fireRouteCalculationProgressUpdateEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus& status, const uint8_t& percentage) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus,
    uint8_t
    >>::sendSignal(
            *this,
            "routeCalculationProgressUpdate",
            "uiy",
    routeHandle,
    status,
    percentage
    );
}
/**
 * description: alternativeRoutesAvailable = This signal is emitted when alternative routes
 *   have been computed in the background and are available for guidance.
 */
void RoutingDBusStubAdapterInternal::fireAlternativeRoutesAvailableEvent(const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>& routeHandlesList) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    >>::sendSignal(
            *this,
            "alternativeRoutesAvailable",
            "au",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(routeHandlesList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))
    );
}


const RoutingDBusStubAdapterHelper::StubDispatcherTable& RoutingDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& RoutingDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

RoutingDBusStubAdapterInternal::RoutingDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      RoutingDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<RoutingStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: This method returns the API version implemented by the server application
             */
            { { "getVersion", "" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: This method creates a route
             */
            { { "createRoute", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::createRouteStubDispatcher },
            /**
             * description: This method deletes a route and its associated resources
             */
            { { "deleteRoute", "uu" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::deleteRouteStubDispatcher },
            /**
             * description: This method sets the cost model
             */
            { { "setCostModel", "uui" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setCostModelStubDispatcher },
            /**
             * description: This method retrieves the selected cost model
             */
            { { "getCostModel", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getCostModelStubDispatcher },
            /**
             * description: This method retrieves a list of supported cost models
             */
            { { "getSupportedCostModels", "" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getSupportedCostModelsStubDispatcher },
            /**
             * description: This method sets a list of route preferences
             */
            { { "setRoutePreferences", "uusa(ii)a(ii)" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setRoutePreferencesStubDispatcher },
            /**
             * description: This method retrieves a list of selected route preferences
             */
            { { "getRoutePreferences", "us" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getRoutePreferencesStubDispatcher },
            /**
             * description: This method retrieves a list of supported route preferences
             */
            { { "getSupportedRoutePreferences", "" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getSupportedRoutePreferencesStubDispatcher },
            /**
             * description: This method sets the time schedule for the route to be calculated
             */
            { { "setRouteSchedule", "uua{iu}" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setRouteScheduleStubDispatcher },
            /**
             * description: This method gets the time schedule for the route to be calculated
             */
            { { "getRouteSchedule", "uai" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getRouteScheduleStubDispatcher },
            /**
             * description: This method sets a list of means of transportation that must be considered when
             *   calculating a route
             */
            { { "setTransportationMeans", "uuai" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setTransportationMeansStubDispatcher },
            /**
             * description: getTransportationMeans = This method retrieves the selected means of
             *   transportation
             */
            { { "getTransportationMeans", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getTransportationMeansStubDispatcher },
            /**
             * description: getSupportedTransportationMeans = This method retrieves a list of supported
             *   means of transportation
             */
            { { "getSupportedTransportationMeans", "" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getSupportedTransportationMeansStubDispatcher },
            /**
             * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
             *   route
             */
            { { "setExcludedAreas", "uuaa(dd)" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setExcludedAreasStubDispatcher },
            /**
             * description: getExcludedAreas = This method retrieves the areas to be excluded when
             *   calculating a route
             */
            { { "getExcludedAreas", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getExcludedAreasStubDispatcher },
            /**
             * description: setWaypoints = This method sets a list of waypoints
             */
            { { "setWaypoints", "uubaa{i(yv)}" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setWaypointsStubDispatcher },
            /**
             * description: getWaypoints = This method retrieves a list of waypoints
             */
            { { "getWaypoints", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getWaypointsStubDispatcher },
            /**
             * description: calculateRoute = This method starts a route calculation
             */
            { { "calculateRoute", "uu" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::calculateRouteStubDispatcher },
            /**
             * description: cancelRouteCalculation = This method cancels a route calculation
             */
            { { "cancelRouteCalculation", "uu" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::cancelRouteCalculationStubDispatcher },
            /**
             * description: calculateRoutes = This method allows a client to calculate alternative routes
             *   that differs from a list of already calculated routes
             */
            { { "calculateRoutes", "uau" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::calculateRoutesStubDispatcher },
            /**
             * description: getRouteSegments = This method retrieves a list of segments for a given route
             *   starting from the one closest to the current position to the one closest to
             *   the destination
             */
            { { "getRouteSegments", "unaiuu" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getRouteSegmentsStubDispatcher },
            /**
             * description: getRouteOverview = This method retrieves general information about a given route
             */
            { { "getRouteOverview", "uai" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getRouteOverviewStubDispatcher },
            /**
             * description: getRouteBoundingBox = This method retrieves the bounding box containing a
             *   calculated route
             */
            { { "getRouteBoundingBox", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getRouteBoundingBoxStubDispatcher },
            /**
             * description: getAllRoutes = This method retrieves the handles of all created routes
             */
            { { "getAllRoutes", "" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getAllRoutesStubDispatcher },
            /**
             * description: setBlockedRouteStretches = This method sets blocked streches on a given route
             */
            { { "setBlockedRouteStretches", "uua(uu)" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::setBlockedRouteStretchesStubDispatcher },
            /**
             * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
             *   given route
             */
            { { "getBlockedRouteStretches", "u" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getBlockedRouteStretchesStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::navigationcore::RoutingDBusStubAdapterInternal::getRoutingInterfaceVersionStubDispatcher });
}

bool RoutingDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
