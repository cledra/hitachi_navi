/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Guidance = This interface offers functions that implement the route-guidance
 *   functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/navigationcore/GuidanceStub.hpp>
#include "v4/org/genivi/navigation/navigationcore/GuidanceDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/navigationcore/GuidanceDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

typedef CommonAPI::DBus::DBusStubAdapterHelper<GuidanceStub> GuidanceDBusStubAdapterHelper;

class GuidanceDBusStubAdapterInternal
    : public virtual GuidanceStubAdapter,
      public GuidanceDBusStubAdapterHelper
{
public:
    GuidanceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~GuidanceDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return Guidance::getInterface();
    }


    /**
     * description: vehicleLeftTheRoadNetwork = This signal is emitted when the vehicle exits from
     *   the road network
     */
    void fireVehicleLeftTheRoadNetworkEvent();
    /**
     * description: guidanceStatusChanged = This signal is emitted when the guidance status changes
     */
    void fireGuidanceStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus& guidanceStatus, const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle);
    /**
     * description: waypointReached = This signal is emitted when the destination is reached
     */
    void fireWaypointReachedEvent(const bool& isDestination);
    /**
     * description: This signal is emitted each time a maneuver event is going
     */
    void fireManeuverChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase& maneuver);
    /**
     * description: positionOnRouteChanged = This signal is emitted when the position on the route
     *   changes
     */
    void firePositionOnRouteChangedEvent(const uint32_t& offsetOnRoute);
    /**
     * description: vehicleLeftTheRoute = This signal is emitted when the vehicle has left the route
     */
    void fireVehicleLeftTheRouteEvent();
    /**
     * description: positionToRouteChanged = This signal is emitted when the vehicle is
     *   off-the-road network and either the heading or the distance (or both) to the
     *   closest point on the active route changes
     */
    void firePositionToRouteChangedEvent(const uint32_t& distance, const int32_t& direction);
    /**
     * description: activeRouteChanged = This signal is emitted when the active route changes
     */
    void fireActiveRouteChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause& changeCause);


    const GuidanceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
        CommonAPI::Version
        > getGuidanceInterfaceVersionStubDispatcher;



/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: startGuidance = This method starts the guidance for a given route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > startGuidanceStubDispatcher;
/**
 * description: stopGuidance = This method stops the guidance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > stopGuidanceStubDispatcher;
/**
 * description: setVoiceGuidance = This method switch on/off the voice guidance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<bool, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > setVoiceGuidanceStubDispatcher;
/**
 * description: getGuidanceDetails = This method retrieves guidance information
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<bool, bool, bool, Guidance::ManeuverPhase>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > getGuidanceDetailsStubDispatcher;
/**
 * description: playVoiceManeuver = This method plays or repeats the last voice guidance
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > playVoiceManeuverStubDispatcher;
/**
 * description: getWaypointInformation = This method retrieves the information on the remaining
 *   way points of the route. A point can be the final destination as well as a
 *   stage defined by the user. The returned waypoints are ordered by their
 *   'number'.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<uint16_t>,
    std::tuple<uint16_t, std::vector<Guidance::WaypointStruct>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>>
    
    > getWaypointInformationStubDispatcher;
/**
 * description: This method retrieves the information on the final destination
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<uint32_t, uint32_t, int32_t, Guidance::Side, int16_t, int16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > getDestinationInformationStubDispatcher;
/**
 * description: getManeuversList = This method retrieves the list of next maneuvers
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<uint16_t, uint32_t>,
    std::tuple<uint16_t, std::vector<Guidance::Maneuver>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>>
    
    > getManeuversListStubDispatcher;
/**
 * description: setRouteCalculationMode = This method configures the way the navigation
 *   application wants the navigation core to behave of reroute trigger
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, Guidance::CalculationMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setRouteCalculationModeStubDispatcher;
/**
 * description: skipNextManeuver = This method allows to jump behind the current maneuver
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > skipNextManeuverStubDispatcher;
/**
 * description: getGuidanceStatus = This method retrieves the guidance status
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<Guidance::GuidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > getGuidanceStatusStubDispatcher;
/**
 * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<Guidance::PromptMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setVoiceGuidanceSettingsStubDispatcher;
/**
 * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<Guidance::PromptMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getVoiceGuidanceSettingsStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    GuidanceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class GuidanceDBusStubAdapter
    : public GuidanceDBusStubAdapterInternal,
      public std::enable_shared_from_this<GuidanceDBusStubAdapter> {
public:
    GuidanceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          GuidanceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_DBUS_STUB_ADAPTER_HPP_
