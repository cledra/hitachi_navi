/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/navigationcore/LocationInputStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

LocationInputStubDefault::LocationInputStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(LocationInput::getInterfaceVersion()) {
}

const CommonAPI::Version& LocationInputStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

LocationInputStubRemoteEvent* LocationInputStubDefault::initStubAdapter(const std::shared_ptr<LocationInputStubAdapter> &_adapter) {
    CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
void LocationInputStubDefault::getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::Version version = {};
    _reply(version);
}

/**
 * description: createLocationInput = This method creates a new location input and retrieves a
 *   handle
 */
void LocationInputStubDefault::createLocationInput(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, createLocationInputReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    ::v4::org::genivi::navigation::NavigationTypes::LocationHandle locationInputHandle = 0ul;
    _reply(locationInputHandle);
}

/**
 * description: deleteLocationInput = This method deletes a location input and its associated
 *   resources
 */
void LocationInputStubDefault::deleteLocationInput(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, deleteLocationInputReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    _reply();
}

/**
 * description: getSupportedAddressAttributes = This method retrieves the supported address
 *   attributes
 */
void LocationInputStubDefault::getSupportedAddressAttributes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedAddressAttributesReply_t _reply) {
    (void)_client;
    LocationInput::AddressAttributeList addressAttributesList = {};
    _reply(addressAttributesList);
}

/**
 * description: setAddress = This method sets the address to start with for the LocationInput
 *   identified by the given handle
 */
void LocationInputStubDefault::setAddress(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::Address _address, setAddressReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _address;
    _reply();
}

/**
 * description: setSelectionCriterion = This method sets the selection criterion for the
 *   current speller, search input and the corresponding result-lists for the
 *   current session
 */
void LocationInputStubDefault::setSelectionCriterion(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::AddressAttribute _selectionCriterion, setSelectionCriterionReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _selectionCriterion;
    _reply();
}

/**
 * description: spell = This method sends the next spell input for the current session
 */
void LocationInputStubDefault::spell(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, std::string _inputCharacter, uint16_t _maxWindowSize, spellReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _inputCharacter;
    (void) _maxWindowSize;
    _reply();
}

/**
 * description: search = This method sends the search input for the current session
 */
void LocationInputStubDefault::search(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, std::string _inputString, uint16_t _maxWindowSize, searchReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _inputString;
    (void) _maxWindowSize;
    _reply();
}

/**
 * description: requestListUpdate = This method sends a request for more list elements for the
 *   current session
 */
void LocationInputStubDefault::requestListUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _offset, uint16_t _maxWindowSize, requestListUpdateReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _offset;
    (void) _maxWindowSize;
    _reply();
}

/**
 * description: selectEntry = This method triggers selection of a result list entry by index
 */
void LocationInputStubDefault::selectEntry(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _index, selectEntryReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _index;
    _reply();
}

/**
 * description: getEntry = This method synchronously gets the address for the given result list
 *   entry
 */
void LocationInputStubDefault::getEntry(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _index, getEntryReply_t _reply) {
    (void)_client;
    (void) _locationInputHandle;
    (void) _index;
    LocationInput::Address address;
    _reply(address);
}

/**
 * description: validateAddress = This method validates an address from different sources than
 *   Navigation
 */
void LocationInputStubDefault::validateAddress(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::Address _inputAddress, validateAddressReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _inputAddress;
    _reply();
}

/**
 * description: reverseGeocode = This method transforms a geocoordinate into an address
 */
void LocationInputStubDefault::reverseGeocode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _coordinate, reverseGeocodeReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _locationInputHandle;
    (void) _coordinate;
    _reply();
}


/**
 * description: currentSelectionCriterion = This signal notifies the SelectionCriterion for the
 *   current speller input or search.
 */
void LocationInputStubDefault::fireCurrentSelectionCriterionEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute &_selectionCriterion) {
    if (!_selectionCriterion.validate()) {
        return;
    }
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCurrentSelectionCriterionEvent(_locationInputHandle, _selectionCriterion);
}
/**
 * description: searchStatus = This signal updates the search status of the specified session
 */
void LocationInputStubDefault::fireSearchStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::SearchStatus &_statusValue) {
    if (!_statusValue.validate()) {
        return;
    }
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSearchStatusEvent(_locationInputHandle, _statusValue);
}
/**
 * description: spellResult = This signal notifies the result of the previous Spell method
 */
void LocationInputStubDefault::fireSpellResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_uniqueString, const std::string &_validCharacters, const bool &_fullMatch) {
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSpellResultEvent(_locationInputHandle, _uniqueString, _validCharacters, _fullMatch);
}
/**
 * description: searchResultList = This signal updates the address result list (e.g. after a
 *   Search/Spell/Scroll call)
 */
void LocationInputStubDefault::fireSearchResultListEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize, const uint16_t &_windowOffset, const uint16_t &_windowSize, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_resultListWindow) {
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSearchResultListEvent(_locationInputHandle, _totalSize, _windowOffset, _windowSize, _resultListWindow);
}
/**
 * description: searchResultListSizeChanged = This signal updates the size of the address
 *   result list
 */
void LocationInputStubDefault::fireSearchResultListSizeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize) {
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSearchResultListSizeChangedEvent(_locationInputHandle, _totalSize);
}
/**
 * description: contentUpdated = This signal updates the input content data for the specified
 *   session
 */
void LocationInputStubDefault::fireContentUpdatedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const bool &_guidable, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute> &_availableSelectionCriteria, const ::v4::org::genivi::navigation::navigationcore::LocationInput::Address &_address) {
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireContentUpdatedEvent(_locationInputHandle, _guidable, _availableSelectionCriteria, _address);
}
/**
 * description: addressValidationResult = This signal notifies the validation result of a
 *   former ValidateAddress call
 */
void LocationInputStubDefault::fireAddressValidationResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_validatedAddressList, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::ValidationStatus> &_validationStatusList) {
    assert((CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireAddressValidationResultEvent(_locationInputHandle, _validatedAddressList, _validationStatusList);
}


LocationInputStubDefault::RemoteEventHandler::RemoteEventHandler(LocationInputStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
