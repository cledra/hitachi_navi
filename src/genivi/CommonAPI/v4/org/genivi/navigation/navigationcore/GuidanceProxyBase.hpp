/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Guidance = This interface offers functions that implement the route-guidance
 *   functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_PROXY_BASE_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_PROXY_BASE_HPP_

#include <v4/org/genivi/navigation/navigationcore/Guidance.hpp>


#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class GuidanceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
    > VehicleLeftTheRoadNetworkEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle
    > GuidanceStatusChangedEvent;
    typedef CommonAPI::Event<
        bool
    > WaypointReachedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase
    > ManeuverChangedEvent;
    typedef CommonAPI::Event<
        uint32_t
    > PositionOnRouteChangedEvent;
    typedef CommonAPI::Event<
    > VehicleLeftTheRouteEvent;
    typedef CommonAPI::Event<
        uint32_t, int32_t
    > PositionToRouteChangedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause
    > ActiveRouteChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> StartGuidanceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> StopGuidanceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetVoiceGuidanceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&, const bool&, const bool&, const Guidance::ManeuverPhase&)> GetGuidanceDetailsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> PlayVoiceManeuverAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&, const std::vector<Guidance::WaypointStruct>&)> GetWaypointInformationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const uint32_t&, const int32_t&, const Guidance::Side&, const int16_t&, const int16_t&)> GetDestinationInformationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&, const std::vector<Guidance::Maneuver>&)> GetManeuversListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetRouteCalculationModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SkipNextManeuverAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Guidance::GuidanceStatus&, const ::v4::org::genivi::navigation::NavigationTypes::Handle&)> GetGuidanceStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetVoiceGuidanceSettingsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Guidance::PromptMode&)> GetVoiceGuidanceSettingsAsyncCallback;


    /**
     * description: vehicleLeftTheRoadNetwork = This signal is emitted when the vehicle exits from
     *   the road network
     */
    virtual VehicleLeftTheRoadNetworkEvent& getVehicleLeftTheRoadNetworkEvent() = 0;
    /**
     * description: guidanceStatusChanged = This signal is emitted when the guidance status changes
     */
    virtual GuidanceStatusChangedEvent& getGuidanceStatusChangedEvent() = 0;
    /**
     * description: waypointReached = This signal is emitted when the destination is reached
     */
    virtual WaypointReachedEvent& getWaypointReachedEvent() = 0;
    /**
     * description: This signal is emitted each time a maneuver event is going
     */
    virtual ManeuverChangedEvent& getManeuverChangedEvent() = 0;
    /**
     * description: positionOnRouteChanged = This signal is emitted when the position on the route
     *   changes
     */
    virtual PositionOnRouteChangedEvent& getPositionOnRouteChangedEvent() = 0;
    /**
     * description: vehicleLeftTheRoute = This signal is emitted when the vehicle has left the route
     */
    virtual VehicleLeftTheRouteEvent& getVehicleLeftTheRouteEvent() = 0;
    /**
     * description: positionToRouteChanged = This signal is emitted when the vehicle is
     *   off-the-road network and either the heading or the distance (or both) to the
     *   closest point on the active route changes
     */
    virtual PositionToRouteChangedEvent& getPositionToRouteChangedEvent() = 0;
    /**
     * description: activeRouteChanged = This signal is emitted when the active route changes
     */
    virtual ActiveRouteChangedEvent& getActiveRouteChangedEvent() = 0;

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: startGuidance = This method starts the guidance for a given route
     */
    virtual void startGuidance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startGuidanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, StartGuidanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: stopGuidance = This method stops the guidance
     */
    virtual void stopGuidance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopGuidanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, StopGuidanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setVoiceGuidance = This method switch on/off the voice guidance
     */
    virtual void setVoiceGuidance(const bool &_activate, const std::string &_voice, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setVoiceGuidanceAsync(const bool &_activate, const std::string &_voice, SetVoiceGuidanceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getGuidanceDetails = This method retrieves guidance information
     */
    virtual void getGuidanceDetails(CommonAPI::CallStatus &_internalCallStatus, bool &_voiceGuidance, bool &_vehicleOnTheRoad, bool &_isDestinationReached, Guidance::ManeuverPhase &_maneuver, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getGuidanceDetailsAsync(GetGuidanceDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: playVoiceManeuver = This method plays or repeats the last voice guidance
     */
    virtual void playVoiceManeuver(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playVoiceManeuverAsync(PlayVoiceManeuverAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getWaypointInformation = This method retrieves the information on the remaining
     *   way points of the route. A point can be the final destination as well as a
     *   stage defined by the user. The returned waypoints are ordered by their
     *   'number'.
     */
    virtual void getWaypointInformation(const uint16_t &_requestedNumberOfWaypoints, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_numberOfWaypoints, std::vector<Guidance::WaypointStruct> &_waypointsList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getWaypointInformationAsync(const uint16_t &_requestedNumberOfWaypoints, GetWaypointInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method retrieves the information on the final destination
     */
    virtual void getDestinationInformation(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_offset, uint32_t &_travelTime, int32_t &_direction, Guidance::Side &_side, int16_t &_timeZone, int16_t &_daylightSavingTime, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDestinationInformationAsync(GetDestinationInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getManeuversList = This method retrieves the list of next maneuvers
     */
    virtual void getManeuversList(const uint16_t &_requestedNumberOfManeuvers, const uint32_t &_maneuverOffset, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_numberOfManeuvers, std::vector<Guidance::Maneuver> &_maneuversList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getManeuversListAsync(const uint16_t &_requestedNumberOfManeuvers, const uint32_t &_maneuverOffset, GetManeuversListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setRouteCalculationMode = This method configures the way the navigation
     *   application wants the navigation core to behave of reroute trigger
     */
    virtual void setRouteCalculationMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const Guidance::CalculationMode &_routeCalculationMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setRouteCalculationModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const Guidance::CalculationMode &_routeCalculationMode, SetRouteCalculationModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: skipNextManeuver = This method allows to jump behind the current maneuver
     */
    virtual void skipNextManeuver(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> skipNextManeuverAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, SkipNextManeuverAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getGuidanceStatus = This method retrieves the guidance status
     */
    virtual void getGuidanceStatus(CommonAPI::CallStatus &_internalCallStatus, Guidance::GuidanceStatus &_guidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getGuidanceStatusAsync(GetGuidanceStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
     */
    virtual void setVoiceGuidanceSettings(const Guidance::PromptMode &_promptMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setVoiceGuidanceSettingsAsync(const Guidance::PromptMode &_promptMode, SetVoiceGuidanceSettingsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
     */
    virtual void getVoiceGuidanceSettings(CommonAPI::CallStatus &_internalCallStatus, Guidance::PromptMode &_promptMode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVoiceGuidanceSettingsAsync(GetVoiceGuidanceSettingsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_PROXY_BASE_HPP_
