/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Guidance = This interface offers functions that implement the route-guidance
 *   functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#include <v4/org/genivi/navigation/navigationcore/Guidance.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Guidance. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class GuidanceStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Guidance {
 public:

    /**
     * Sends a broadcast event for vehicleLeftTheRoadNetwork. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireVehicleLeftTheRoadNetworkEvent() = 0;
    /**
     * Sends a broadcast event for guidanceStatusChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireGuidanceStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus &_guidanceStatus, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle) = 0;
    /**
     * Sends a broadcast event for waypointReached. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireWaypointReachedEvent(const bool &_isDestination) = 0;
    /**
     * Sends a broadcast event for maneuverChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireManeuverChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase &_maneuver) = 0;
    /**
     * Sends a broadcast event for positionOnRouteChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePositionOnRouteChangedEvent(const uint32_t &_offsetOnRoute) = 0;
    /**
     * Sends a broadcast event for vehicleLeftTheRoute. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireVehicleLeftTheRouteEvent() = 0;
    /**
     * Sends a broadcast event for positionToRouteChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePositionToRouteChangedEvent(const uint32_t &_distance, const int32_t &_direction) = 0;
    /**
     * Sends a broadcast event for activeRouteChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireActiveRouteChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause &_changeCause) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Guidance.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class GuidanceStubRemoteEvent
{
public:
    virtual ~GuidanceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Guidance to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class GuidanceStub
    : public virtual CommonAPI::Stub<GuidanceStubAdapter, GuidanceStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void ()>startGuidanceReply_t;
    typedef std::function<void ()>stopGuidanceReply_t;
    typedef std::function<void ()>setVoiceGuidanceReply_t;
    typedef std::function<void (bool _voiceGuidance, bool _vehicleOnTheRoad, bool _isDestinationReached, Guidance::ManeuverPhase _maneuver)>getGuidanceDetailsReply_t;
    typedef std::function<void ()>playVoiceManeuverReply_t;
    typedef std::function<void (uint16_t _numberOfWaypoints, std::vector<Guidance::WaypointStruct> _waypointsList)>getWaypointInformationReply_t;
    typedef std::function<void (uint32_t _offset, uint32_t _travelTime, int32_t _direction, Guidance::Side _side, int16_t _timeZone, int16_t _daylightSavingTime)>getDestinationInformationReply_t;
    typedef std::function<void (uint16_t _numberOfManeuvers, std::vector<Guidance::Maneuver> _maneuversList)>getManeuversListReply_t;
    typedef std::function<void ()>setRouteCalculationModeReply_t;
    typedef std::function<void ()>skipNextManeuverReply_t;
    typedef std::function<void (Guidance::GuidanceStatus _guidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle)>getGuidanceStatusReply_t;
    typedef std::function<void ()>setVoiceGuidanceSettingsReply_t;
    typedef std::function<void (Guidance::PromptMode _promptMode)>getVoiceGuidanceSettingsReply_t;

    virtual ~GuidanceStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: startGuidance = This method starts the guidance for a given route
     */
    /// This is the method that will be called on remote calls on the method startGuidance.
    virtual void startGuidance(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, startGuidanceReply_t _reply) = 0;
    /**
     * description: stopGuidance = This method stops the guidance
     */
    /// This is the method that will be called on remote calls on the method stopGuidance.
    virtual void stopGuidance(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, stopGuidanceReply_t _reply) = 0;
    /**
     * description: setVoiceGuidance = This method switch on/off the voice guidance
     */
    /// This is the method that will be called on remote calls on the method setVoiceGuidance.
    virtual void setVoiceGuidance(const std::shared_ptr<CommonAPI::ClientId> _client, bool _activate, std::string _voice, setVoiceGuidanceReply_t _reply) = 0;
    /**
     * description: getGuidanceDetails = This method retrieves guidance information
     */
    /// This is the method that will be called on remote calls on the method getGuidanceDetails.
    virtual void getGuidanceDetails(const std::shared_ptr<CommonAPI::ClientId> _client, getGuidanceDetailsReply_t _reply) = 0;
    /**
     * description: playVoiceManeuver = This method plays or repeats the last voice guidance
     */
    /// This is the method that will be called on remote calls on the method playVoiceManeuver.
    virtual void playVoiceManeuver(const std::shared_ptr<CommonAPI::ClientId> _client, playVoiceManeuverReply_t _reply) = 0;
    /**
     * description: getWaypointInformation = This method retrieves the information on the remaining
     *   way points of the route. A point can be the final destination as well as a
     *   stage defined by the user. The returned waypoints are ordered by their
     *   'number'.
     */
    /// This is the method that will be called on remote calls on the method getWaypointInformation.
    virtual void getWaypointInformation(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _requestedNumberOfWaypoints, getWaypointInformationReply_t _reply) = 0;
    /**
     * description: This method retrieves the information on the final destination
     */
    /// This is the method that will be called on remote calls on the method getDestinationInformation.
    virtual void getDestinationInformation(const std::shared_ptr<CommonAPI::ClientId> _client, getDestinationInformationReply_t _reply) = 0;
    /**
     * description: getManeuversList = This method retrieves the list of next maneuvers
     */
    /// This is the method that will be called on remote calls on the method getManeuversList.
    virtual void getManeuversList(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _requestedNumberOfManeuvers, uint32_t _maneuverOffset, getManeuversListReply_t _reply) = 0;
    /**
     * description: setRouteCalculationMode = This method configures the way the navigation
     *   application wants the navigation core to behave of reroute trigger
     */
    /// This is the method that will be called on remote calls on the method setRouteCalculationMode.
    virtual void setRouteCalculationMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, Guidance::CalculationMode _routeCalculationMode, setRouteCalculationModeReply_t _reply) = 0;
    /**
     * description: skipNextManeuver = This method allows to jump behind the current maneuver
     */
    /// This is the method that will be called on remote calls on the method skipNextManeuver.
    virtual void skipNextManeuver(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, skipNextManeuverReply_t _reply) = 0;
    /**
     * description: getGuidanceStatus = This method retrieves the guidance status
     */
    /// This is the method that will be called on remote calls on the method getGuidanceStatus.
    virtual void getGuidanceStatus(const std::shared_ptr<CommonAPI::ClientId> _client, getGuidanceStatusReply_t _reply) = 0;
    /**
     * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
     */
    /// This is the method that will be called on remote calls on the method setVoiceGuidanceSettings.
    virtual void setVoiceGuidanceSettings(const std::shared_ptr<CommonAPI::ClientId> _client, Guidance::PromptMode _promptMode, setVoiceGuidanceSettingsReply_t _reply) = 0;
    /**
     * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
     */
    /// This is the method that will be called on remote calls on the method getVoiceGuidanceSettings.
    virtual void getVoiceGuidanceSettings(const std::shared_ptr<CommonAPI::ClientId> _client, getVoiceGuidanceSettingsReply_t _reply) = 0;
    /**
     * description: vehicleLeftTheRoadNetwork = This signal is emitted when the vehicle exits from
     *   the road network
     */
    /// Sends a broadcast event for vehicleLeftTheRoadNetwork.
    virtual void fireVehicleLeftTheRoadNetworkEvent() = 0;
    /**
     * description: guidanceStatusChanged = This signal is emitted when the guidance status changes
     */
    /// Sends a broadcast event for guidanceStatusChanged.
    virtual void fireGuidanceStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus &_guidanceStatus, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle) = 0;
    /**
     * description: waypointReached = This signal is emitted when the destination is reached
     */
    /// Sends a broadcast event for waypointReached.
    virtual void fireWaypointReachedEvent(const bool &_isDestination) = 0;
    /**
     * description: This signal is emitted each time a maneuver event is going
     */
    /// Sends a broadcast event for maneuverChanged.
    virtual void fireManeuverChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase &_maneuver) = 0;
    /**
     * description: positionOnRouteChanged = This signal is emitted when the position on the route
     *   changes
     */
    /// Sends a broadcast event for positionOnRouteChanged.
    virtual void firePositionOnRouteChangedEvent(const uint32_t &_offsetOnRoute) = 0;
    /**
     * description: vehicleLeftTheRoute = This signal is emitted when the vehicle has left the route
     */
    /// Sends a broadcast event for vehicleLeftTheRoute.
    virtual void fireVehicleLeftTheRouteEvent() = 0;
    /**
     * description: positionToRouteChanged = This signal is emitted when the vehicle is
     *   off-the-road network and either the heading or the distance (or both) to the
     *   closest point on the active route changes
     */
    /// Sends a broadcast event for positionToRouteChanged.
    virtual void firePositionToRouteChangedEvent(const uint32_t &_distance, const int32_t &_direction) = 0;
    /**
     * description: activeRouteChanged = This signal is emitted when the active route changes
     */
    /// Sends a broadcast event for activeRouteChanged.
    virtual void fireActiveRouteChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause &_changeCause) = 0;

    using CommonAPI::Stub<GuidanceStubAdapter, GuidanceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<GuidanceStubAdapter, GuidanceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<GuidanceStubAdapter, GuidanceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef GuidanceStubRemoteEvent RemoteEventType;
    typedef Guidance StubInterface;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_STUB_HPP_
