/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapMatchedPosition = This interface offers functions to retrieve the map
 *   matched position and to simulate positioning
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_PROXY_BASE_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_PROXY_BASE_HPP_

#include <v4/org/genivi/navigation/navigationcore/MapMatchedPosition.hpp>


#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>
#include <v4/org/genivi/navigation/navigationcore/NavigationCoreTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class MapMatchedPositionProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus
    > SimulationStatusChangedEvent;
    typedef CommonAPI::Event<
        uint8_t
    > SimulationSpeedChangedEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>
    > PositionUpdateEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>
    > AddressUpdateEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>
    > PositionOnSegmentUpdateEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>
    > StatusUpdateEvent;
    typedef CommonAPI::Event<
        uint32_t, int32_t
    > OffRoadPositionChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetSimulationModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapMatchedPosition::SimulationStatus&)> GetSimulationStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> AddSimulationStatusListenerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RemoveSimulationStatusListenerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetSimulationSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> GetSimulationSpeedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> AddSimulationSpeedListenerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RemoveSimulationSpeedListenerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> StartSimulationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> PauseSimulationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapMatchedPosition::PositionItemDict&)> GetPositionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetPositionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapMatchedPosition::AddressItemDict&)> GetCurrentAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapMatchedPosition::PositionOnSegmentDict&)> GetPositionOnSegmentAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const MapMatchedPosition::PositionStatusDict&)> GetStatusAsyncCallback;


    /**
     * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
     *   changed
     */
    virtual SimulationStatusChangedEvent& getSimulationStatusChangedEvent() = 0;
    /**
     * description: simulationSpeedChanged = This signal is emitted when the simulation speed
     *   factor has changed
     */
    virtual SimulationSpeedChangedEvent& getSimulationSpeedChangedEvent() = 0;
    /**
     * description: positionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    virtual PositionUpdateEvent& getPositionUpdateEvent() = 0;
    /**
     * description: addressUpdate = This signal is called to notify a client application that the
     *   current address changed
     */
    virtual AddressUpdateEvent& getAddressUpdateEvent() = 0;
    /**
     * description: positionOnSegmentUpdate = This signal is called to notify the client that the
     *   vehicle position on the route segment changed
     */
    virtual PositionOnSegmentUpdateEvent& getPositionOnSegmentUpdateEvent() = 0;
    /**
     * description: statusUpdate = This signal is emitted to notifiy a client application that the
     *   current status changed
     */
    virtual StatusUpdateEvent& getStatusUpdateEvent() = 0;
    /**
     * description: offroadPositionChanged = This signal is emitted when the heading and the
     *   distance to the closest point on the road network changes
     */
    virtual OffRoadPositionChangedEvent& getOffRoadPositionChangedEvent() = 0;

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setSimulationMode = This method activates or deactivates the simulation mode
     */
    virtual void setSimulationMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSimulationModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const bool &_activate, SetSimulationModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSimulationStatus = This method retrieves the simulation status
     */
    virtual void getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
     *   changes.
     */
    virtual void addSimulationStatusListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addSimulationStatusListenerAsync(AddSimulationStatusListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
     *   Status changes.
     */
    virtual void removeSimulationStatusListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removeSimulationStatusListenerAsync(RemoveSimulationStatusListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
     */
    virtual void setSimulationSpeed(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const uint8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSimulationSpeedAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const uint8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSimulationSpeed = returns the speed factor for the simulation mode
     */
    virtual void getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_speedFactor, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
     *   factor changes.
     */
    virtual void addSimulationSpeedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addSimulationSpeedListenerAsync(AddSimulationSpeedListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
     *   speed factor changes.
     */
    virtual void removeSimulationSpeedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removeSimulationSpeedListenerAsync(RemoveSimulationSpeedListenerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: startSimulation = This method starts, or resumes, a Follow Active Route
     *   simulation
     */
    virtual void startSimulation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startSimulationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, StartSimulationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: pauseSimulation = This method freezes the current location
     */
    virtual void pauseSimulation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseSimulationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, PauseSimulationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getPosition = This method returns the current position
     */
    virtual void getPosition(const std::vector<MapMatchedPosition::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::PositionItemDict &_position, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPositionAsync(const std::vector<MapMatchedPosition::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setPosition = This method sets the position to a specific location
     */
    virtual void setPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapMatchedPosition::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapMatchedPosition::PositionItemDict &_position, SetPositionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getAddress = This method returns the current address
     */
    virtual void getCurrentAddress(const std::vector<MapMatchedPosition::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::AddressItemDict &_address, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCurrentAddressAsync(const std::vector<MapMatchedPosition::AddressItemKey> &_valuesToReturn, GetCurrentAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: positionOnSegment = This method returns the vehicle position on a route segment
     */
    virtual void getPositionOnSegment(const std::vector<MapMatchedPosition::PositionOnSegmentKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::PositionOnSegmentDict &_positionOnSegment, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPositionOnSegmentAsync(const std::vector<MapMatchedPosition::PositionOnSegmentKey> &_valuesToReturn, GetPositionOnSegmentAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getStatus = This method returns the current status
     */
    virtual void getStatus(const std::vector<MapMatchedPosition::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::PositionStatusDict &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getStatusAsync(const std::vector<MapMatchedPosition::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_PROXY_BASE_HPP_
