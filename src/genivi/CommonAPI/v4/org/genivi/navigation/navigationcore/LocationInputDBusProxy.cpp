/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#include <v4/org/genivi/navigation/navigationcore/LocationInputDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createLocationInputDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<LocationInputDBusProxy>(_address, _connection);
}

INITIALIZER(registerLocationInputDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		LocationInput::getInterface(),
		&createLocationInputDBusProxy);
}

LocationInputDBusProxy::LocationInputDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		currentSelectionCriterion_(*this, "currentSelectionCriterion", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		searchStatus_(*this, "searchStatus", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		spellResult_(*this, "spellResult", "ussb", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		searchResultList_(*this, "searchResultList", "uqqqaa{i(yv)}", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<LocationInput_::AddressDeployment_t>*>(nullptr))),
		searchResultListSizeChanged_(*this, "searchResultListSizeChanged", "uq", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		contentUpdated_(*this, "contentUpdated", "ubaia{i(yv)}", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr), static_cast<LocationInput_::AddressDeployment_t*>(nullptr))),
		addressValidationResult_(*this, "addressValidationResult", "uaa{i(yv)}aa{ii}", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<LocationInput_::AddressDeployment_t>*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<LocationInput_::ValidationStatusDeployment_t>*>(nullptr)))
{
}


LocationInputDBusProxy::CurrentSelectionCriterionEvent& LocationInputDBusProxy::getCurrentSelectionCriterionEvent() {
    return currentSelectionCriterion_;
}
LocationInputDBusProxy::SearchStatusEvent& LocationInputDBusProxy::getSearchStatusEvent() {
    return searchStatus_;
}
LocationInputDBusProxy::SpellResultEvent& LocationInputDBusProxy::getSpellResultEvent() {
    return spellResult_;
}
LocationInputDBusProxy::SearchResultListEvent& LocationInputDBusProxy::getSearchResultListEvent() {
    return searchResultList_;
}
LocationInputDBusProxy::SearchResultListSizeChangedEvent& LocationInputDBusProxy::getSearchResultListSizeChangedEvent() {
    return searchResultListSizeChanged_;
}
LocationInputDBusProxy::ContentUpdatedEvent& LocationInputDBusProxy::getContentUpdatedEvent() {
    return contentUpdated_;
}
LocationInputDBusProxy::AddressValidationResultEvent& LocationInputDBusProxy::getAddressValidationResultEvent() {
    return addressValidationResult_;
}
    
    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    void LocationInputDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: createLocationInput = This method creates a new location input and retrieves a
     *   handle
     */
    void LocationInputDBusProxy::createLocationInput(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createLocationInput",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle,
_internalCallStatus,
deploy_locationInputHandle);
_locationInputHandle = deploy_locationInputHandle.getValue();
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::createLocationInputAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CreateLocationInputAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createLocationInput",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> _locationInputHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _locationInputHandle.getValue());
        },
        std::make_tuple(deploy_locationInputHandle));
    }
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     */
    void LocationInputDBusProxy::deleteLocationInput(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "deleteLocationInput",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::deleteLocationInputAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, DeleteLocationInputAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "deleteLocationInput",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getSupportedAddressAttributes = This method retrieves the supported address
     *   attributes
     */
    void LocationInputDBusProxy::getSupportedAddressAttributes(CommonAPI::CallStatus &_internalCallStatus, LocationInput::AddressAttributeList &_addressAttributesList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<LocationInput::AddressAttributeList, LocationInput_::AddressAttributeListDeployment_t> deploy_addressAttributesList(static_cast<LocationInput_::AddressAttributeListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<LocationInput::AddressAttributeList,LocationInput_::AddressAttributeListDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedAddressAttributes",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_addressAttributesList);
_addressAttributesList = deploy_addressAttributesList.getValue();
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::getSupportedAddressAttributesAsync(GetSupportedAddressAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<LocationInput::AddressAttributeList, LocationInput_::AddressAttributeListDeployment_t> deploy_addressAttributesList(static_cast<LocationInput_::AddressAttributeListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<LocationInput::AddressAttributeList,LocationInput_::AddressAttributeListDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedAddressAttributes",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<LocationInput::AddressAttributeList, LocationInput_::AddressAttributeListDeployment_t> _addressAttributesList) {
        	if (_callback)
        		_callback(_internalCallStatus, _addressAttributesList.getValue());
        },
        std::make_tuple(deploy_addressAttributesList));
    }
    /**
     * description: setAddress = This method sets the address to start with for the LocationInput
     *   identified by the given handle
     */
    void LocationInputDBusProxy::setAddress(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_address, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> deploy_address(_address, static_cast<LocationInput_::AddressDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setAddress",
        "uua{i(yv)}",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_address,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::setAddressAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_address, SetAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> deploy_address(_address, static_cast<LocationInput_::AddressDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setAddress",
        "uua{i(yv)}",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_address,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setSelectionCriterion = This method sets the selection criterion for the
     *   current speller, search input and the corresponding result-lists for the
     *   current session
     */
    void LocationInputDBusProxy::setSelectionCriterion(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::AddressAttribute &_selectionCriterion, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::AddressAttribute, CommonAPI::EmptyDeployment> deploy_selectionCriterion(_selectionCriterion, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<LocationInput::AddressAttribute, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setSelectionCriterion",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_selectionCriterion,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::setSelectionCriterionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::AddressAttribute &_selectionCriterion, SetSelectionCriterionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::AddressAttribute, CommonAPI::EmptyDeployment> deploy_selectionCriterion(_selectionCriterion, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<LocationInput::AddressAttribute, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setSelectionCriterion",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_selectionCriterion,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: spell = This method sends the next spell input for the current session
     */
    void LocationInputDBusProxy::spell(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputCharacter(_inputCharacter, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "spell",
        "uusq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_inputCharacter, deploy_maxWindowSize,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::spellAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputCharacter, const uint16_t &_maxWindowSize, SpellAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputCharacter(_inputCharacter, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "spell",
        "uusq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_inputCharacter, deploy_maxWindowSize,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: search = This method sends the search input for the current session
     */
    void LocationInputDBusProxy::search(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "search",
        "uusq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_inputString, deploy_maxWindowSize,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::searchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_inputString, const uint16_t &_maxWindowSize, SearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "search",
        "uusq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_inputString, deploy_maxWindowSize,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
     */
    void LocationInputDBusProxy::requestListUpdate(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "requestListUpdate",
        "uuqq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_offset, deploy_maxWindowSize,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::requestListUpdateAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, RequestListUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_offset(_offset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxWindowSize(_maxWindowSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "requestListUpdate",
        "uuqq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_offset, deploy_maxWindowSize,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     */
    void LocationInputDBusProxy::selectEntry(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "selectEntry",
        "uuq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_index,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::selectEntryAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, SelectEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "selectEntry",
        "uuq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_index,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     */
    void LocationInputDBusProxy::getEntry(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, CommonAPI::CallStatus &_internalCallStatus, LocationInput::Address &_address, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> deploy_address(static_cast<LocationInput_::AddressDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<LocationInput::Address,LocationInput_::AddressDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getEntry",
        "uq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_locationInputHandle, deploy_index,
_internalCallStatus,
deploy_address);
_address = deploy_address.getValue();
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::getEntryAsync(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_index, GetEntryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_index(_index, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> deploy_address(static_cast<LocationInput_::AddressDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<LocationInput::Address,LocationInput_::AddressDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getEntry",
        "uq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_locationInputHandle, deploy_index,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> _address) {
        	if (_callback)
        		_callback(_internalCallStatus, _address.getValue());
        },
        std::make_tuple(deploy_address));
    }
    /**
     * description: validateAddress = This method validates an address from different sources than
     *   Navigation
     */
    void LocationInputDBusProxy::validateAddress(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_inputAddress, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> deploy_inputAddress(_inputAddress, static_cast<LocationInput_::AddressDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "validateAddress",
        "uua{i(yv)}",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_inputAddress,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::validateAddressAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const LocationInput::Address &_inputAddress, ValidateAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t> deploy_inputAddress(_inputAddress, static_cast<LocationInput_::AddressDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<LocationInput::Address, LocationInput_::AddressDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "validateAddress",
        "uua{i(yv)}",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_inputAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: reverseGeocode = This method transforms a geocoordinate into an address
     */
    void LocationInputDBusProxy::reverseGeocode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_coordinate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_coordinate(_coordinate, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "reverseGeocode",
        "uu(dd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_locationInputHandle, deploy_coordinate,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> LocationInputDBusProxy::reverseGeocodeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_coordinate, ReverseGeocodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment> deploy_locationInputHandle(_locationInputHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_coordinate(_coordinate, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::LocationHandle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "reverseGeocode",
        "uu(dd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_locationInputHandle, deploy_coordinate,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void LocationInputDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace navigationcore
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
