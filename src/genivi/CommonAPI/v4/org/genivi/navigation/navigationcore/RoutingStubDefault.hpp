/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers functions that implement the routing functionality of a
 *   navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/navigationcore/RoutingStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Provides a default implementation for RoutingStubRemoteEvent and
 * RoutingStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class RoutingStubDefault
    : public virtual RoutingStub {
public:
    RoutingStubDefault();

    RoutingStubRemoteEvent* initStubAdapter(const std::shared_ptr<RoutingStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: This method returns the API version implemented by the server application
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply);
    /**
     * description: This method creates a route
     */
    virtual void createRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, createRouteReply_t _reply);
    /**
     * description: This method deletes a route and its associated resources
     */
    virtual void deleteRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, deleteRouteReply_t _reply);
    /**
     * description: This method sets the cost model
     */
    virtual void setCostModel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, Routing::CostModel _costModel, setCostModelReply_t _reply);
    /**
     * description: This method retrieves the selected cost model
     */
    virtual void getCostModel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getCostModelReply_t _reply);
    /**
     * description: This method retrieves a list of supported cost models
     */
    virtual void getSupportedCostModels(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedCostModelsReply_t _reply);
    /**
     * description: This method sets a list of route preferences
     */
    virtual void setRoutePreferences(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::string _countryCode, std::vector<Routing::RoutePreference> _roadPreferenceList, std::vector<Routing::ConditionPreference> _conditionPreferenceList, setRoutePreferencesReply_t _reply);
    /**
     * description: This method retrieves a list of selected route preferences
     */
    virtual void getRoutePreferences(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::string _countryCode, getRoutePreferencesReply_t _reply);
    /**
     * description: This method retrieves a list of supported route preferences
     */
    virtual void getSupportedRoutePreferences(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedRoutePreferencesReply_t _reply);
    /**
     * description: This method sets the time schedule for the route to be calculated
     */
    virtual void setRouteSchedule(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, Routing::RouteSchedule _routeSchedule, setRouteScheduleReply_t _reply);
    /**
     * description: This method gets the time schedule for the route to be calculated
     */
    virtual void getRouteSchedule(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::Schedule> _valuesToReturn, getRouteScheduleReply_t _reply);
    /**
     * description: This method sets a list of means of transportation that must be considered when
     *   calculating a route
     */
    virtual void setTransportationMeans(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::TransportationMeans> _transportationMeansList, setTransportationMeansReply_t _reply);
    /**
     * description: getTransportationMeans = This method retrieves the selected means of
     *   transportation
     */
    virtual void getTransportationMeans(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getTransportationMeansReply_t _reply);
    /**
     * description: getSupportedTransportationMeans = This method retrieves a list of supported
     *   means of transportation
     */
    virtual void getSupportedTransportationMeans(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedTransportationMeansReply_t _reply);
    /**
     * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
     *   route
     */
    virtual void setExcludedAreas(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon> _excludedAreas, setExcludedAreasReply_t _reply);
    /**
     * description: getExcludedAreas = This method retrieves the areas to be excluded when
     *   calculating a route
     */
    virtual void getExcludedAreas(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getExcludedAreasReply_t _reply);
    /**
     * description: setWaypoints = This method sets a list of waypoints
     */
    virtual void setWaypoints(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, bool _startFromCurrentPosition, std::vector<Routing::WayPoint> _waypointsList, setWaypointsReply_t _reply);
    /**
     * description: getWaypoints = This method retrieves a list of waypoints
     */
    virtual void getWaypoints(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getWaypointsReply_t _reply);
    /**
     * description: calculateRoute = This method starts a route calculation
     */
    virtual void calculateRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, calculateRouteReply_t _reply);
    /**
     * description: cancelRouteCalculation = This method cancels a route calculation
     */
    virtual void cancelRouteCalculation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, cancelRouteCalculationReply_t _reply);
    /**
     * description: calculateRoutes = This method allows a client to calculate alternative routes
     *   that differs from a list of already calculated routes
     */
    virtual void calculateRoutes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _calculatedRoutesList, calculateRoutesReply_t _reply);
    /**
     * description: getRouteSegments = This method retrieves a list of segments for a given route
     *   starting from the one closest to the current position to the one closest to
     *   the destination
     */
    virtual void getRouteSegments(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, int16_t _detailLevel, std::vector<Routing::RouteSegmentType> _valuesToReturn, uint32_t _numberOfSegments, uint32_t _offset, getRouteSegmentsReply_t _reply);
    /**
     * description: getRouteOverview = This method retrieves general information about a given route
     */
    virtual void getRouteOverview(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::RouteOverviewType> _valuesToReturn, getRouteOverviewReply_t _reply);
    /**
     * description: getRouteBoundingBox = This method retrieves the bounding box containing a
     *   calculated route
     */
    virtual void getRouteBoundingBox(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getRouteBoundingBoxReply_t _reply);
    /**
     * description: getAllRoutes = This method retrieves the handles of all created routes
     */
    virtual void getAllRoutes(const std::shared_ptr<CommonAPI::ClientId> _client, getAllRoutesReply_t _reply);
    /**
     * description: setBlockedRouteStretches = This method sets blocked streches on a given route
     */
    virtual void setBlockedRouteStretches(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::BlockedRouteElement> _blockParameters, setBlockedRouteStretchesReply_t _reply);
    /**
     * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
     *   given route
     */
    virtual void getBlockedRouteStretches(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getBlockedRouteStretchesReply_t _reply);

/**
 * description: routeDeleted = This signal is emitted to inform clients that the current route
 *   has been deleted
 */
virtual void fireRouteDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle);
/**
 * description: routeCalculationCancelled = This signal informs a client that a route
 *   calculation was cancelled
 */
virtual void fireRouteCalculationCancelledEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle);
/**
 * description: routeCalculationSuccessful = This signal informs a client that a route
 *   calculation was successful
 */
virtual void fireRouteCalculationSuccessfulEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference &_unfullfilledPreferences);
/**
 * description: routeCalculationFailed = This signal informs a client that a route calculation
 *   failed
 */
virtual void fireRouteCalculationFailedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_Handle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationError &_errorCode, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference &_unfullfilledPreferences);
/**
 * description: routeCalculationProgressUpdate = This signal informs a client about a route
 *   calculation progress
 */
virtual void fireRouteCalculationProgressUpdateEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus &_status, const uint8_t &_percentage);
/**
 * description: alternativeRoutesAvailable = This signal is emitted when alternative routes
 *   have been computed in the background and are available for guidance.
 */
virtual void fireAlternativeRoutesAvailableEvent(const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_routeHandlesList);


protected:
    class RemoteEventHandler: public virtual RoutingStubRemoteEvent {
    public:
        RemoteEventHandler(RoutingStubDefault *_defaultStub);


    private:
        RoutingStubDefault *defaultStub_;
    };
private:
    RoutingStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_STUB_DEFAULT
