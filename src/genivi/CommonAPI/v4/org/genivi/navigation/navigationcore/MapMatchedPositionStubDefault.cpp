/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/navigationcore/MapMatchedPositionStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

MapMatchedPositionStubDefault::MapMatchedPositionStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(MapMatchedPosition::getInterfaceVersion()) {
}

const CommonAPI::Version& MapMatchedPositionStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

MapMatchedPositionStubRemoteEvent* MapMatchedPositionStubDefault::initStubAdapter(const std::shared_ptr<MapMatchedPositionStubAdapter> &_adapter) {
    CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
void MapMatchedPositionStubDefault::getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::Version version = {};
    _reply(version);
}

/**
 * description: setSimulationMode = This method activates or deactivates the simulation mode
 */
void MapMatchedPositionStubDefault::setSimulationMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, bool _activate, setSimulationModeReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _activate;
    _reply();
}

/**
 * description: getSimulationStatus = This method retrieves the simulation status
 */
void MapMatchedPositionStubDefault::getSimulationStatus(const std::shared_ptr<CommonAPI::ClientId> _client, getSimulationStatusReply_t _reply) {
    (void)_client;
    MapMatchedPosition::SimulationStatus simulationStatus = MapMatchedPosition::SimulationStatus::SIMULATION_STATUS_NO_SIMULATION;
    if (!simulationStatus.validate()) {
        return;
    }
    _reply(simulationStatus);
}

/**
 * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
 *   changes.
 */
void MapMatchedPositionStubDefault::addSimulationStatusListener(const std::shared_ptr<CommonAPI::ClientId> _client, addSimulationStatusListenerReply_t _reply) {
    (void)_client;
    _reply();
}

/**
 * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
 *   Status changes.
 */
void MapMatchedPositionStubDefault::removeSimulationStatusListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeSimulationStatusListenerReply_t _reply) {
    (void)_client;
    _reply();
}

/**
 * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
 */
void MapMatchedPositionStubDefault::setSimulationSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, uint8_t _speedFactor, setSimulationSpeedReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _speedFactor;
    _reply();
}

/**
 * description: getSimulationSpeed = returns the speed factor for the simulation mode
 */
void MapMatchedPositionStubDefault::getSimulationSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, getSimulationSpeedReply_t _reply) {
    (void)_client;
    uint8_t speedFactor = 0u;
    _reply(speedFactor);
}

/**
 * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
 *   factor changes.
 */
void MapMatchedPositionStubDefault::addSimulationSpeedListener(const std::shared_ptr<CommonAPI::ClientId> _client, addSimulationSpeedListenerReply_t _reply) {
    (void)_client;
    _reply();
}

/**
 * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
 *   speed factor changes.
 */
void MapMatchedPositionStubDefault::removeSimulationSpeedListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeSimulationSpeedListenerReply_t _reply) {
    (void)_client;
    _reply();
}

/**
 * description: startSimulation = This method starts, or resumes, a Follow Active Route
 *   simulation
 */
void MapMatchedPositionStubDefault::startSimulation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, startSimulationReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    _reply();
}

/**
 * description: pauseSimulation = This method freezes the current location
 */
void MapMatchedPositionStubDefault::pauseSimulation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, pauseSimulationReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    _reply();
}

/**
 * description: getPosition = This method returns the current position
 */
void MapMatchedPositionStubDefault::getPosition(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionItemKey> _valuesToReturn, getPositionReply_t _reply) {
    (void)_client;
    (void) _valuesToReturn;
    MapMatchedPosition::PositionItemDict position;
    _reply(position);
}

/**
 * description: setPosition = This method sets the position to a specific location
 */
void MapMatchedPositionStubDefault::setPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, MapMatchedPosition::PositionItemDict _position, setPositionReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _position;
    _reply();
}

/**
 * description: getAddress = This method returns the current address
 */
void MapMatchedPositionStubDefault::getCurrentAddress(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::AddressItemKey> _valuesToReturn, getCurrentAddressReply_t _reply) {
    (void)_client;
    (void) _valuesToReturn;
    MapMatchedPosition::AddressItemDict address;
    _reply(address);
}

/**
 * description: positionOnSegment = This method returns the vehicle position on a route segment
 */
void MapMatchedPositionStubDefault::getPositionOnSegment(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionOnSegmentKey> _valuesToReturn, getPositionOnSegmentReply_t _reply) {
    (void)_client;
    (void) _valuesToReturn;
    MapMatchedPosition::PositionOnSegmentDict positionOnSegment;
    _reply(positionOnSegment);
}

/**
 * description: getStatus = This method returns the current status
 */
void MapMatchedPositionStubDefault::getStatus(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionStatus> _valuesToReturn, getStatusReply_t _reply) {
    (void)_client;
    (void) _valuesToReturn;
    MapMatchedPosition::PositionStatusDict status;
    _reply(status);
}


/**
 * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
 *   changed
 */
void MapMatchedPositionStubDefault::fireSimulationStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus &_simulationStatus) {
    if (!_simulationStatus.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSimulationStatusChangedEvent(_simulationStatus);
}
/**
 * description: simulationSpeedChanged = This signal is emitted when the simulation speed
 *   factor has changed
 */
void MapMatchedPositionStubDefault::fireSimulationSpeedChangedEvent(const uint8_t &_speedFactor) {
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSimulationSpeedChangedEvent(_speedFactor);
}
/**
 * description: positionUpdate = This signal is called to notify a client application of a
 *   position change. The update frequency is implementation specific. The maximal
 *   allowed frequency is 10Hz
 */
void MapMatchedPositionStubDefault::firePositionUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey> &_changedValues) {
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePositionUpdateEvent(_changedValues);
}
/**
 * description: addressUpdate = This signal is called to notify a client application that the
 *   current address changed
 */
void MapMatchedPositionStubDefault::fireAddressUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey> &_changedValues) {
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireAddressUpdateEvent(_changedValues);
}
/**
 * description: positionOnSegmentUpdate = This signal is called to notify the client that the
 *   vehicle position on the route segment changed
 */
void MapMatchedPositionStubDefault::firePositionOnSegmentUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey> &_changedValues) {
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePositionOnSegmentUpdateEvent(_changedValues);
}
/**
 * description: statusUpdate = This signal is emitted to notifiy a client application that the
 *   current status changed
 */
void MapMatchedPositionStubDefault::fireStatusUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus> &_changedValues) {
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireStatusUpdateEvent(_changedValues);
}
/**
 * description: offroadPositionChanged = This signal is emitted when the heading and the
 *   distance to the closest point on the road network changes
 */
void MapMatchedPositionStubDefault::fireOffRoadPositionChangedEvent(const uint32_t &_distance, const int32_t &_direction) {
    assert((CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapMatchedPositionStubAdapter, MapMatchedPositionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireOffRoadPositionChangedEvent(_distance, _direction);
}


MapMatchedPositionStubDefault::RemoteEventHandler::RemoteEventHandler(MapMatchedPositionStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
