/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the navigation core configuration
 *   functionality of a navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Configuration_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Configuration_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#include <v4/org/genivi/navigation/navigationcore/Configuration.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Configuration. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ConfigurationStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Configuration {
 public:

    /**
     * Sends a broadcast event for configurationChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::Configuration::Settings> &_changedSettings) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Configuration.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConfigurationStubRemoteEvent
{
public:
    virtual ~ConfigurationStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Configuration to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ConfigurationStub
    : public virtual CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void ()>setLocaleReply_t;
    typedef std::function<void (std::string _languageCode, std::string _countryCode, std::string _scriptCode)>getLocaleReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> _localeList)>getSupportedLocalesReply_t;
    typedef std::function<void ()>setTimeFormatReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::TimeFormat _format)>getTimeFormatReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::TimeFormat> _timeFormatList)>getSupportedTimeFormatsReply_t;
    typedef std::function<void ()>setCoordinatesFormatReply_t;
    typedef std::function<void (Configuration::CoordinatesFormat _coordinatesFormat)>getCoordinatesFormatReply_t;
    typedef std::function<void (std::vector<Configuration::CoordinatesFormat> _coordinatesFormatList)>getSupportedCoordinatesFormatReply_t;
    typedef std::function<void ()>setUnitsOfMeasurementReply_t;
    typedef std::function<void (Configuration::UnitsOfMeasurement _unitsOfMeasurement)>getUnitsOfMeasurementReply_t;
    typedef std::function<void (Configuration::UnitsOfMeasurementList _unitsOfMeasurementList)>getSupportedUnitsOfMeasurementReply_t;

    virtual ~ConfigurationStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: This method returns the API version .
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: Set the current language set. If the language is not supported, the default
     *   details will be returned in the native language.
     */
    /// This is the method that will be called on remote calls on the method setLocale.
    virtual void setLocale(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _languageCode, std::string _countryCode, std::string _scriptCode, setLocaleReply_t _reply) = 0;
    /**
     * description: Get the current language set .
     */
    /// This is the method that will be called on remote calls on the method getLocale.
    virtual void getLocale(const std::shared_ptr<CommonAPI::ClientId> _client, getLocaleReply_t _reply) = 0;
    /**
     * description: Get the supported set of locales .
     */
    /// This is the method that will be called on remote calls on the method getSupportedLocales.
    virtual void getSupportedLocales(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedLocalesReply_t _reply) = 0;
    /**
     * description: Set the time format.
     */
    /// This is the method that will be called on remote calls on the method setTimeFormat.
    virtual void setTimeFormat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::TimeFormat _format, setTimeFormatReply_t _reply) = 0;
    /**
     * description: Get the current time format .
     */
    /// This is the method that will be called on remote calls on the method getTimeFormat.
    virtual void getTimeFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getTimeFormatReply_t _reply) = 0;
    /**
     * description: Get the supported set of time format .
     */
    /// This is the method that will be called on remote calls on the method getSupportedTimeFormats.
    virtual void getSupportedTimeFormats(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedTimeFormatsReply_t _reply) = 0;
    /**
     * description: Set the coordinates format.
     */
    /// This is the method that will be called on remote calls on the method setCoordinatesFormat.
    virtual void setCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, Configuration::CoordinatesFormat _coordinatesFormat, setCoordinatesFormatReply_t _reply) = 0;
    /**
     * description: Get the coordinates format .
     */
    /// This is the method that will be called on remote calls on the method getCoordinatesFormat.
    virtual void getCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getCoordinatesFormatReply_t _reply) = 0;
    /**
     * description: Get the supported set of coordinates format .
     */
    /// This is the method that will be called on remote calls on the method getSupportedCoordinatesFormat.
    virtual void getSupportedCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedCoordinatesFormatReply_t _reply) = 0;
    /**
     * description: Set the units of measurement .
     */
    /// This is the method that will be called on remote calls on the method setUnitsOfMeasurement.
    virtual void setUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, Configuration::UnitsOfMeasurement _unitsOfMeasurement, setUnitsOfMeasurementReply_t _reply) = 0;
    /**
     * description: Get the units of measurement .
     */
    /// This is the method that will be called on remote calls on the method getUnitsOfMeasurement.
    virtual void getUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, getUnitsOfMeasurementReply_t _reply) = 0;
    /**
     * description: Get the supported set of units of measurement .
     */
    /// This is the method that will be called on remote calls on the method getSupportedUnitsOfMeasurement.
    virtual void getSupportedUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedUnitsOfMeasurementReply_t _reply) = 0;
    /**
     * description: ConfigurationChanged = This signal is sent to the clients when one or more
     *   configuration settings changes
     */
    /// Sends a broadcast event for configurationChanged.
    virtual void fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::Configuration::Settings> &_changedSettings) = 0;

    using CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<ConfigurationStubAdapter, ConfigurationStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef ConfigurationStubRemoteEvent RemoteEventType;
    typedef Configuration StubInterface;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Configuration_STUB_HPP_
