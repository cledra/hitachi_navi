/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Navigation_Core_Types_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Navigation_Core_Types_HPP_


#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

struct NavigationCoreTypes {
    
    struct TimeStampedEnum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            TIMESTAMP = 16
        };
        
        TimeStampedEnum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        TimeStampedEnum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        TimeStampedEnum &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::TIMESTAMP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TimeStampedEnum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TimeStampedEnum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TimeStampedEnum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TimeStampedEnum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TimeStampedEnum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TimeStampedEnum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GeoLocalizedEnum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            TIMESTAMP = 16,
            LATITUDE = 160,
            LONGITUDE = 161,
            ALTITUDE = 162
        };
        
        GeoLocalizedEnum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        GeoLocalizedEnum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        GeoLocalizedEnum &operator=(const TimeStampedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        GeoLocalizedEnum &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::TIMESTAMP):
                case static_cast<int32_t>(Literal::LATITUDE):
                case static_cast<int32_t>(Literal::LONGITUDE):
                case static_cast<int32_t>(Literal::ALTITUDE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GeoLocalizedEnum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GeoLocalizedEnum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GeoLocalizedEnum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GeoLocalizedEnum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GeoLocalizedEnum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GeoLocalizedEnum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.navigation.navigationcore.NavigationCoreTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(4, 0);
}

}; // struct NavigationCoreTypes

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

namespace CommonAPI {
}


namespace std {
    //Hash for TimeStampedEnum
    template<>
    struct hash<::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::TimeStampedEnum> {
        inline size_t operator()(const ::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::TimeStampedEnum& timeStampedEnum) const {
            return static_cast<int32_t>(timeStampedEnum);
        }
    };
    //Hash for GeoLocalizedEnum
    template<>
    struct hash<::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::GeoLocalizedEnum> {
        inline size_t operator()(const ::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::GeoLocalizedEnum& geoLocalizedEnum) const {
            return static_cast<int32_t>(geoLocalizedEnum);
        }
    };
}


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Navigation_Core_Types_HPP_
