/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Guidance = This interface offers functions that implement the route-guidance
 *   functionality of a navigation system
 */
#include <v4/org/genivi/navigation/navigationcore/GuidanceDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createGuidanceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<GuidanceDBusProxy>(_address, _connection);
}

INITIALIZER(registerGuidanceDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		Guidance::getInterface(),
		&createGuidanceDBusProxy);
}

GuidanceDBusProxy::GuidanceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		vehicleLeftTheRoadNetwork_(*this, "vehicleLeftTheRoadNetwork", "", std::make_tuple()),
		guidanceStatusChanged_(*this, "guidanceStatusChanged", "iu", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		waypointReached_(*this, "waypointReached", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		maneuverChanged_(*this, "maneuverChanged", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		positionOnRouteChanged_(*this, "positionOnRouteChanged", "u", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		vehicleLeftTheRoute_(*this, "vehicleLeftTheRoute", "", std::make_tuple()),
		positionToRouteChanged_(*this, "positionToRouteChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		activeRouteChanged_(*this, "activeRouteChanged", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


GuidanceDBusProxy::VehicleLeftTheRoadNetworkEvent& GuidanceDBusProxy::getVehicleLeftTheRoadNetworkEvent() {
    return vehicleLeftTheRoadNetwork_;
}
GuidanceDBusProxy::GuidanceStatusChangedEvent& GuidanceDBusProxy::getGuidanceStatusChangedEvent() {
    return guidanceStatusChanged_;
}
GuidanceDBusProxy::WaypointReachedEvent& GuidanceDBusProxy::getWaypointReachedEvent() {
    return waypointReached_;
}
GuidanceDBusProxy::ManeuverChangedEvent& GuidanceDBusProxy::getManeuverChangedEvent() {
    return maneuverChanged_;
}
GuidanceDBusProxy::PositionOnRouteChangedEvent& GuidanceDBusProxy::getPositionOnRouteChangedEvent() {
    return positionOnRouteChanged_;
}
GuidanceDBusProxy::VehicleLeftTheRouteEvent& GuidanceDBusProxy::getVehicleLeftTheRouteEvent() {
    return vehicleLeftTheRoute_;
}
GuidanceDBusProxy::PositionToRouteChangedEvent& GuidanceDBusProxy::getPositionToRouteChangedEvent() {
    return positionToRouteChanged_;
}
GuidanceDBusProxy::ActiveRouteChangedEvent& GuidanceDBusProxy::getActiveRouteChangedEvent() {
    return activeRouteChanged_;
}
    
    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    void GuidanceDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: startGuidance = This method starts the guidance for a given route
     */
    void GuidanceDBusProxy::startGuidance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "startGuidance",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_routeHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::startGuidanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, StartGuidanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "startGuidance",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_routeHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: stopGuidance = This method stops the guidance
     */
    void GuidanceDBusProxy::stopGuidance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "stopGuidance",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::stopGuidanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, StopGuidanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "stopGuidance",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setVoiceGuidance = This method switch on/off the voice guidance
     */
    void GuidanceDBusProxy::setVoiceGuidance(const bool &_activate, const std::string &_voice, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_activate(_activate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_voice(_voice, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setVoiceGuidance",
        "bs",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_activate, deploy_voice,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::setVoiceGuidanceAsync(const bool &_activate, const std::string &_voice, SetVoiceGuidanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_activate(_activate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_voice(_voice, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setVoiceGuidance",
        "bs",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_activate, deploy_voice,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getGuidanceDetails = This method retrieves guidance information
     */
    void GuidanceDBusProxy::getGuidanceDetails(CommonAPI::CallStatus &_internalCallStatus, bool &_voiceGuidance, bool &_vehicleOnTheRoad, bool &_isDestinationReached, Guidance::ManeuverPhase &_maneuver, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_voiceGuidance(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_vehicleOnTheRoad(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isDestinationReached(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<Guidance::ManeuverPhase, CommonAPI::EmptyDeployment> deploy_maneuver(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<Guidance::ManeuverPhase,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getGuidanceDetails",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_voiceGuidance, deploy_vehicleOnTheRoad, deploy_isDestinationReached, deploy_maneuver);
_voiceGuidance = deploy_voiceGuidance.getValue();
_vehicleOnTheRoad = deploy_vehicleOnTheRoad.getValue();
_isDestinationReached = deploy_isDestinationReached.getValue();
_maneuver = deploy_maneuver.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getGuidanceDetailsAsync(GetGuidanceDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_voiceGuidance(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_vehicleOnTheRoad(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_isDestinationReached(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<Guidance::ManeuverPhase, CommonAPI::EmptyDeployment> deploy_maneuver(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<Guidance::ManeuverPhase,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getGuidanceDetails",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _voiceGuidance, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _vehicleOnTheRoad, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _isDestinationReached, CommonAPI::Deployable<Guidance::ManeuverPhase, CommonAPI::EmptyDeployment> _maneuver) {
        	if (_callback)
        		_callback(_internalCallStatus, _voiceGuidance.getValue(), _vehicleOnTheRoad.getValue(), _isDestinationReached.getValue(), _maneuver.getValue());
        },
        std::make_tuple(deploy_voiceGuidance, deploy_vehicleOnTheRoad, deploy_isDestinationReached, deploy_maneuver));
    }
    /**
     * description: playVoiceManeuver = This method plays or repeats the last voice guidance
     */
    void GuidanceDBusProxy::playVoiceManeuver(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "playVoiceManeuver",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::playVoiceManeuverAsync(PlayVoiceManeuverAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "playVoiceManeuver",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getWaypointInformation = This method retrieves the information on the remaining
     *   way points of the route. A point can be the final destination as well as a
     *   stage defined by the user. The returned waypoints are ordered by their
     *   'number'.
     */
    void GuidanceDBusProxy::getWaypointInformation(const uint16_t &_requestedNumberOfWaypoints, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_numberOfWaypoints, std::vector<Guidance::WaypointStruct> &_waypointsList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_requestedNumberOfWaypoints(_requestedNumberOfWaypoints, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_numberOfWaypoints(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<Guidance::WaypointStruct>, CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>> deploy_waypointsList(static_cast<CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<Guidance::WaypointStruct>,CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getWaypointInformation",
        "q",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestedNumberOfWaypoints,
_internalCallStatus,
deploy_numberOfWaypoints, deploy_waypointsList);
_numberOfWaypoints = deploy_numberOfWaypoints.getValue();
_waypointsList = deploy_waypointsList.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getWaypointInformationAsync(const uint16_t &_requestedNumberOfWaypoints, GetWaypointInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_requestedNumberOfWaypoints(_requestedNumberOfWaypoints, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_numberOfWaypoints(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<Guidance::WaypointStruct>, CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>> deploy_waypointsList(static_cast<CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<Guidance::WaypointStruct>,CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getWaypointInformation",
        "q",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestedNumberOfWaypoints,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> _numberOfWaypoints, CommonAPI::Deployable<std::vector<Guidance::WaypointStruct>, CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>> _waypointsList) {
        	if (_callback)
        		_callback(_internalCallStatus, _numberOfWaypoints.getValue(), _waypointsList.getValue());
        },
        std::make_tuple(deploy_numberOfWaypoints, deploy_waypointsList));
    }
    /**
     * description: This method retrieves the information on the final destination
     */
    void GuidanceDBusProxy::getDestinationInformation(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_offset, uint32_t &_travelTime, int32_t &_direction, Guidance::Side &_side, int16_t &_timeZone, int16_t &_daylightSavingTime, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_offset(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_travelTime(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_direction(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<Guidance::Side, CommonAPI::EmptyDeployment> deploy_side(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_timeZone(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_daylightSavingTime(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<Guidance::Side,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDestinationInformation",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_offset, deploy_travelTime, deploy_direction, deploy_side, deploy_timeZone, deploy_daylightSavingTime);
_offset = deploy_offset.getValue();
_travelTime = deploy_travelTime.getValue();
_direction = deploy_direction.getValue();
_side = deploy_side.getValue();
_timeZone = deploy_timeZone.getValue();
_daylightSavingTime = deploy_daylightSavingTime.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getDestinationInformationAsync(GetDestinationInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_offset(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_travelTime(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_direction(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<Guidance::Side, CommonAPI::EmptyDeployment> deploy_side(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_timeZone(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_daylightSavingTime(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<Guidance::Side,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDestinationInformation",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _offset, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _travelTime, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _direction, CommonAPI::Deployable<Guidance::Side, CommonAPI::EmptyDeployment> _side, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _timeZone, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _daylightSavingTime) {
        	if (_callback)
        		_callback(_internalCallStatus, _offset.getValue(), _travelTime.getValue(), _direction.getValue(), _side.getValue(), _timeZone.getValue(), _daylightSavingTime.getValue());
        },
        std::make_tuple(deploy_offset, deploy_travelTime, deploy_direction, deploy_side, deploy_timeZone, deploy_daylightSavingTime));
    }
    /**
     * description: getManeuversList = This method retrieves the list of next maneuvers
     */
    void GuidanceDBusProxy::getManeuversList(const uint16_t &_requestedNumberOfManeuvers, const uint32_t &_maneuverOffset, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_numberOfManeuvers, std::vector<Guidance::Maneuver> &_maneuversList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_requestedNumberOfManeuvers(_requestedNumberOfManeuvers, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maneuverOffset(_maneuverOffset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_numberOfManeuvers(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<Guidance::Maneuver>, CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>> deploy_maneuversList(static_cast<CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<Guidance::Maneuver>,CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getManeuversList",
        "qu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestedNumberOfManeuvers, deploy_maneuverOffset,
_internalCallStatus,
deploy_numberOfManeuvers, deploy_maneuversList);
_numberOfManeuvers = deploy_numberOfManeuvers.getValue();
_maneuversList = deploy_maneuversList.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getManeuversListAsync(const uint16_t &_requestedNumberOfManeuvers, const uint32_t &_maneuverOffset, GetManeuversListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_requestedNumberOfManeuvers(_requestedNumberOfManeuvers, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maneuverOffset(_maneuverOffset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_numberOfManeuvers(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<Guidance::Maneuver>, CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>> deploy_maneuversList(static_cast<CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<Guidance::Maneuver>,CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getManeuversList",
        "qu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestedNumberOfManeuvers, deploy_maneuverOffset,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> _numberOfManeuvers, CommonAPI::Deployable<std::vector<Guidance::Maneuver>, CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>> _maneuversList) {
        	if (_callback)
        		_callback(_internalCallStatus, _numberOfManeuvers.getValue(), _maneuversList.getValue());
        },
        std::make_tuple(deploy_numberOfManeuvers, deploy_maneuversList));
    }
    /**
     * description: setRouteCalculationMode = This method configures the way the navigation
     *   application wants the navigation core to behave of reroute trigger
     */
    void GuidanceDBusProxy::setRouteCalculationMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const Guidance::CalculationMode &_routeCalculationMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<Guidance::CalculationMode, CommonAPI::EmptyDeployment> deploy_routeCalculationMode(_routeCalculationMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<Guidance::CalculationMode, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setRouteCalculationMode",
        "ui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_routeCalculationMode,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::setRouteCalculationModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const Guidance::CalculationMode &_routeCalculationMode, SetRouteCalculationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<Guidance::CalculationMode, CommonAPI::EmptyDeployment> deploy_routeCalculationMode(_routeCalculationMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<Guidance::CalculationMode, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setRouteCalculationMode",
        "ui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_routeCalculationMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: skipNextManeuver = This method allows to jump behind the current maneuver
     */
    void GuidanceDBusProxy::skipNextManeuver(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "skipNextManeuver",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::skipNextManeuverAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, SkipNextManeuverAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "skipNextManeuver",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getGuidanceStatus = This method retrieves the guidance status
     */
    void GuidanceDBusProxy::getGuidanceStatus(CommonAPI::CallStatus &_internalCallStatus, Guidance::GuidanceStatus &_guidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<Guidance::GuidanceStatus, CommonAPI::EmptyDeployment> deploy_guidanceStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<Guidance::GuidanceStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getGuidanceStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_guidanceStatus, deploy_routeHandle);
_guidanceStatus = deploy_guidanceStatus.getValue();
_routeHandle = deploy_routeHandle.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getGuidanceStatusAsync(GetGuidanceStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<Guidance::GuidanceStatus, CommonAPI::EmptyDeployment> deploy_guidanceStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<Guidance::GuidanceStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getGuidanceStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<Guidance::GuidanceStatus, CommonAPI::EmptyDeployment> _guidanceStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> _routeHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _guidanceStatus.getValue(), _routeHandle.getValue());
        },
        std::make_tuple(deploy_guidanceStatus, deploy_routeHandle));
    }
    /**
     * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
     */
    void GuidanceDBusProxy::setVoiceGuidanceSettings(const Guidance::PromptMode &_promptMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment> deploy_promptMode(_promptMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setVoiceGuidanceSettings",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_promptMode,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::setVoiceGuidanceSettingsAsync(const Guidance::PromptMode &_promptMode, SetVoiceGuidanceSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment> deploy_promptMode(_promptMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setVoiceGuidanceSettings",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_promptMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
     */
    void GuidanceDBusProxy::getVoiceGuidanceSettings(CommonAPI::CallStatus &_internalCallStatus, Guidance::PromptMode &_promptMode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment> deploy_promptMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<Guidance::PromptMode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getVoiceGuidanceSettings",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_promptMode);
_promptMode = deploy_promptMode.getValue();
}
    std::future<CommonAPI::CallStatus> GuidanceDBusProxy::getVoiceGuidanceSettingsAsync(GetVoiceGuidanceSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment> deploy_promptMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<Guidance::PromptMode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getVoiceGuidanceSettings",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<Guidance::PromptMode, CommonAPI::EmptyDeployment> _promptMode) {
        	if (_callback)
        		_callback(_internalCallStatus, _promptMode.getValue());
        },
        std::make_tuple(deploy_promptMode));
    }


void GuidanceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace navigationcore
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
