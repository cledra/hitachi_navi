/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: LocationInput = This interface offers functions that implement the
 *   location-input functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>
#include <v4/org/genivi/navigation/navigationcore/NavigationCoreTypes.hpp>

#include <v4/org/genivi/navigation/navigationcore/LocationInput.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service LocationInput. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class LocationInputStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual LocationInput {
 public:

    /**
     * Sends a broadcast event for currentSelectionCriterion. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCurrentSelectionCriterionEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute &_selectionCriterion) = 0;
    /**
     * Sends a broadcast event for searchStatus. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSearchStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::SearchStatus &_statusValue) = 0;
    /**
     * Sends a broadcast event for spellResult. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSpellResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_uniqueString, const std::string &_validCharacters, const bool &_fullMatch) = 0;
    /**
     * Sends a broadcast event for searchResultList. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSearchResultListEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize, const uint16_t &_windowOffset, const uint16_t &_windowSize, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_resultListWindow) = 0;
    /**
     * Sends a broadcast event for searchResultListSizeChanged. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSearchResultListSizeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize) = 0;
    /**
     * Sends a broadcast event for contentUpdated. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireContentUpdatedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const bool &_guidable, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute> &_availableSelectionCriteria, const ::v4::org::genivi::navigation::navigationcore::LocationInput::Address &_address) = 0;
    /**
     * Sends a broadcast event for addressValidationResult. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireAddressValidationResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_validatedAddressList, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::ValidationStatus> &_validationStatusList) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for LocationInput.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class LocationInputStubRemoteEvent
{
public:
    virtual ~LocationInputStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service LocationInput to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class LocationInputStub
    : public virtual CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle)>createLocationInputReply_t;
    typedef std::function<void ()>deleteLocationInputReply_t;
    typedef std::function<void (LocationInput::AddressAttributeList _addressAttributesList)>getSupportedAddressAttributesReply_t;
    typedef std::function<void ()>setAddressReply_t;
    typedef std::function<void ()>setSelectionCriterionReply_t;
    typedef std::function<void ()>spellReply_t;
    typedef std::function<void ()>searchReply_t;
    typedef std::function<void ()>requestListUpdateReply_t;
    typedef std::function<void ()>selectEntryReply_t;
    typedef std::function<void (LocationInput::Address _address)>getEntryReply_t;
    typedef std::function<void ()>validateAddressReply_t;
    typedef std::function<void ()>reverseGeocodeReply_t;

    virtual ~LocationInputStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: createLocationInput = This method creates a new location input and retrieves a
     *   handle
     */
    /// This is the method that will be called on remote calls on the method createLocationInput.
    virtual void createLocationInput(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, createLocationInputReply_t _reply) = 0;
    /**
     * description: deleteLocationInput = This method deletes a location input and its associated
     *   resources
     */
    /// This is the method that will be called on remote calls on the method deleteLocationInput.
    virtual void deleteLocationInput(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, deleteLocationInputReply_t _reply) = 0;
    /**
     * description: getSupportedAddressAttributes = This method retrieves the supported address
     *   attributes
     */
    /// This is the method that will be called on remote calls on the method getSupportedAddressAttributes.
    virtual void getSupportedAddressAttributes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedAddressAttributesReply_t _reply) = 0;
    /**
     * description: setAddress = This method sets the address to start with for the LocationInput
     *   identified by the given handle
     */
    /// This is the method that will be called on remote calls on the method setAddress.
    virtual void setAddress(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::Address _address, setAddressReply_t _reply) = 0;
    /**
     * description: setSelectionCriterion = This method sets the selection criterion for the
     *   current speller, search input and the corresponding result-lists for the
     *   current session
     */
    /// This is the method that will be called on remote calls on the method setSelectionCriterion.
    virtual void setSelectionCriterion(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::AddressAttribute _selectionCriterion, setSelectionCriterionReply_t _reply) = 0;
    /**
     * description: spell = This method sends the next spell input for the current session
     */
    /// This is the method that will be called on remote calls on the method spell.
    virtual void spell(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, std::string _inputCharacter, uint16_t _maxWindowSize, spellReply_t _reply) = 0;
    /**
     * description: search = This method sends the search input for the current session
     */
    /// This is the method that will be called on remote calls on the method search.
    virtual void search(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, std::string _inputString, uint16_t _maxWindowSize, searchReply_t _reply) = 0;
    /**
     * description: requestListUpdate = This method sends a request for more list elements for the
     *   current session
     */
    /// This is the method that will be called on remote calls on the method requestListUpdate.
    virtual void requestListUpdate(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _offset, uint16_t _maxWindowSize, requestListUpdateReply_t _reply) = 0;
    /**
     * description: selectEntry = This method triggers selection of a result list entry by index
     */
    /// This is the method that will be called on remote calls on the method selectEntry.
    virtual void selectEntry(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _index, selectEntryReply_t _reply) = 0;
    /**
     * description: getEntry = This method synchronously gets the address for the given result list
     *   entry
     */
    /// This is the method that will be called on remote calls on the method getEntry.
    virtual void getEntry(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, uint16_t _index, getEntryReply_t _reply) = 0;
    /**
     * description: validateAddress = This method validates an address from different sources than
     *   Navigation
     */
    /// This is the method that will be called on remote calls on the method validateAddress.
    virtual void validateAddress(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, LocationInput::Address _inputAddress, validateAddressReply_t _reply) = 0;
    /**
     * description: reverseGeocode = This method transforms a geocoordinate into an address
     */
    /// This is the method that will be called on remote calls on the method reverseGeocode.
    virtual void reverseGeocode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::LocationHandle _locationInputHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _coordinate, reverseGeocodeReply_t _reply) = 0;
    /**
     * description: currentSelectionCriterion = This signal notifies the SelectionCriterion for the
     *   current speller input or search.
     */
    /// Sends a broadcast event for currentSelectionCriterion.
    virtual void fireCurrentSelectionCriterionEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute &_selectionCriterion) = 0;
    /**
     * description: searchStatus = This signal updates the search status of the specified session
     */
    /// Sends a broadcast event for searchStatus.
    virtual void fireSearchStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const ::v4::org::genivi::navigation::navigationcore::LocationInput::SearchStatus &_statusValue) = 0;
    /**
     * description: spellResult = This signal notifies the result of the previous Spell method
     */
    /// Sends a broadcast event for spellResult.
    virtual void fireSpellResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::string &_uniqueString, const std::string &_validCharacters, const bool &_fullMatch) = 0;
    /**
     * description: searchResultList = This signal updates the address result list (e.g. after a
     *   Search/Spell/Scroll call)
     */
    /// Sends a broadcast event for searchResultList.
    virtual void fireSearchResultListEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize, const uint16_t &_windowOffset, const uint16_t &_windowSize, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_resultListWindow) = 0;
    /**
     * description: searchResultListSizeChanged = This signal updates the size of the address
     *   result list
     */
    /// Sends a broadcast event for searchResultListSizeChanged.
    virtual void fireSearchResultListSizeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const uint16_t &_totalSize) = 0;
    /**
     * description: contentUpdated = This signal updates the input content data for the specified
     *   session
     */
    /// Sends a broadcast event for contentUpdated.
    virtual void fireContentUpdatedEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const bool &_guidable, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::AddressAttribute> &_availableSelectionCriteria, const ::v4::org::genivi::navigation::navigationcore::LocationInput::Address &_address) = 0;
    /**
     * description: addressValidationResult = This signal notifies the validation result of a
     *   former ValidateAddress call
     */
    /// Sends a broadcast event for addressValidationResult.
    virtual void fireAddressValidationResultEvent(const ::v4::org::genivi::navigation::NavigationTypes::LocationHandle &_locationInputHandle, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::Address> &_validatedAddressList, const std::vector<::v4::org::genivi::navigation::navigationcore::LocationInput::ValidationStatus> &_validationStatusList) = 0;

    using CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<LocationInputStubAdapter, LocationInputStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef LocationInputStubRemoteEvent RemoteEventType;
    typedef LocationInput StubInterface;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Location_Input_STUB_HPP_
