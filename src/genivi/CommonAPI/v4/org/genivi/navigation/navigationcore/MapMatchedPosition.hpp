/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapMatchedPosition = This interface offers functions to retrieve the map
 *   matched position and to simulate positioning
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_MAP_MATCHED_POSITION_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_MAP_MATCHED_POSITION_HPP_


#include <v4/org/genivi/navigation/NavigationTypes.hpp>
#include <v4/org/genivi/navigation/navigationcore/NavigationCoreTypes.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/ByteBuffer.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/Variant.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <unordered_map>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class MapMatchedPosition {
public:
    virtual ~MapMatchedPosition() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct PositionStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            TIMESTAMP = 16,
            LATITUDE = 160,
            LONGITUDE = 161,
            ALTITUDE = 162,
            GNSS_FIX_STATUS = 224,
            DR_STATUS = 225,
            MM_STATUS = 226,
            SIMULATION_MODE = 227
        };
        
        PositionStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        PositionStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        PositionStatus &operator=(const ::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::GeoLocalizedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        PositionStatus &operator=(const TimeStampedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        PositionStatus &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::TIMESTAMP):
                case static_cast<int32_t>(Literal::LATITUDE):
                case static_cast<int32_t>(Literal::LONGITUDE):
                case static_cast<int32_t>(Literal::ALTITUDE):
                case static_cast<int32_t>(Literal::GNSS_FIX_STATUS):
                case static_cast<int32_t>(Literal::DR_STATUS):
                case static_cast<int32_t>(Literal::MM_STATUS):
                case static_cast<int32_t>(Literal::SIMULATION_MODE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PositionStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PositionStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PositionStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PositionStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PositionStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PositionStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PositionItemKey : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            TIMESTAMP = 16,
            LATITUDE = 160,
            LONGITUDE = 161,
            ALTITUDE = 162,
            GNSS_FIX_STATUS = 224,
            DR_STATUS = 225,
            MM_STATUS = 226,
            SIMULATION_MODE = 227,
            HEADING = 163,
            SPEED = 164,
            CLIMB = 165
        };
        
        PositionItemKey() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        PositionItemKey(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        PositionItemKey &operator=(const PositionStatus::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        PositionItemKey &operator=(const ::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::GeoLocalizedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        PositionItemKey &operator=(const TimeStampedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        PositionItemKey &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::TIMESTAMP):
                case static_cast<int32_t>(Literal::LATITUDE):
                case static_cast<int32_t>(Literal::LONGITUDE):
                case static_cast<int32_t>(Literal::ALTITUDE):
                case static_cast<int32_t>(Literal::GNSS_FIX_STATUS):
                case static_cast<int32_t>(Literal::DR_STATUS):
                case static_cast<int32_t>(Literal::MM_STATUS):
                case static_cast<int32_t>(Literal::SIMULATION_MODE):
                case static_cast<int32_t>(Literal::HEADING):
                case static_cast<int32_t>(Literal::SPEED):
                case static_cast<int32_t>(Literal::CLIMB):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PositionItemKey &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PositionItemKey &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PositionItemKey &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PositionItemKey &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PositionItemKey &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PositionItemKey &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct AddressItemKey : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            TIMESTAMP = 16,
            TIMEZONE_OFFSET = 17,
            DAYLIGHT_OFFSET = 18,
            COUNTRY = 166,
            STATE = 167,
            CITY = 168,
            ZIPCODE = 169,
            STREET = 170,
            HOUSENUMBER = 171,
            CROSSING = 172,
            DISTRICT = 173,
            PHONENUMBER = 174,
            POINAME = 175,
            TOWNCENTER = 176,
            LOCATION_INPUT = 177,
            FULL_ADDRESS = 178,
            COUNTRYCODE = 179,
            HOUSENAME = 180,
            POSTAL_CODE = 181
        };
        
        AddressItemKey() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        AddressItemKey(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        AddressItemKey &operator=(const ::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::TimeStampedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        AddressItemKey &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::TIMESTAMP):
                case static_cast<int32_t>(Literal::TIMEZONE_OFFSET):
                case static_cast<int32_t>(Literal::DAYLIGHT_OFFSET):
                case static_cast<int32_t>(Literal::COUNTRY):
                case static_cast<int32_t>(Literal::STATE):
                case static_cast<int32_t>(Literal::CITY):
                case static_cast<int32_t>(Literal::ZIPCODE):
                case static_cast<int32_t>(Literal::STREET):
                case static_cast<int32_t>(Literal::HOUSENUMBER):
                case static_cast<int32_t>(Literal::CROSSING):
                case static_cast<int32_t>(Literal::DISTRICT):
                case static_cast<int32_t>(Literal::PHONENUMBER):
                case static_cast<int32_t>(Literal::POINAME):
                case static_cast<int32_t>(Literal::TOWNCENTER):
                case static_cast<int32_t>(Literal::LOCATION_INPUT):
                case static_cast<int32_t>(Literal::FULL_ADDRESS):
                case static_cast<int32_t>(Literal::COUNTRYCODE):
                case static_cast<int32_t>(Literal::HOUSENAME):
                case static_cast<int32_t>(Literal::POSTAL_CODE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AddressItemKey &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AddressItemKey &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AddressItemKey &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AddressItemKey &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AddressItemKey &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AddressItemKey &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MatchMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MATCH_TYPE = 240,
            ON_ROAD = 241,
            OFF_ROAD = 242,
            ON_FERRY = 243,
            IN_TUNNEL = 244,
            ON_CARPARK = 245
        };
        
        MatchMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MATCH_TYPE)) {}
        MatchMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MATCH_TYPE):
                case static_cast<int32_t>(Literal::ON_ROAD):
                case static_cast<int32_t>(Literal::OFF_ROAD):
                case static_cast<int32_t>(Literal::ON_FERRY):
                case static_cast<int32_t>(Literal::IN_TUNNEL):
                case static_cast<int32_t>(Literal::ON_CARPARK):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MatchMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MatchMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MatchMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MatchMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MatchMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MatchMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct GnnsFixStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            NO_FIX = 256,
            TIME_FIX = 257,
            FIX_2D = 258,
            FIX_3D = 259
        };
        
        GnnsFixStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        GnnsFixStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        GnnsFixStatus &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::NO_FIX):
                case static_cast<int32_t>(Literal::TIME_FIX):
                case static_cast<int32_t>(Literal::FIX_2D):
                case static_cast<int32_t>(Literal::FIX_3D):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const GnnsFixStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const GnnsFixStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const GnnsFixStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const GnnsFixStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const GnnsFixStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const GnnsFixStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PositionOnSegmentKey : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            TIMESTAMP = 16,
            SEGMENT_ID = 272,
            DIRECTION_ON_SEGMENT = 274,
            DISTANCE_ON_SEGMENT = 275
        };
        
        PositionOnSegmentKey() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        PositionOnSegmentKey(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        PositionOnSegmentKey &operator=(const ::v4::org::genivi::navigation::navigationcore::NavigationCoreTypes::TimeStampedEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
        PositionOnSegmentKey &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::TIMESTAMP):
                case static_cast<int32_t>(Literal::SEGMENT_ID):
                case static_cast<int32_t>(Literal::DIRECTION_ON_SEGMENT):
                case static_cast<int32_t>(Literal::DISTANCE_ON_SEGMENT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PositionOnSegmentKey &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PositionOnSegmentKey &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PositionOnSegmentKey &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PositionOnSegmentKey &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PositionOnSegmentKey &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PositionOnSegmentKey &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SimulationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            INVALID = 0,
            ALL = 65535,
            SIMULATION_STATUS_NO_SIMULATION = 544,
            SIMULATION_STATUS_RUNNING = 545,
            SIMULATION_STATUS_PAUSED = 546,
            SIMULATION_STATUS_FIXED_POSITION = 547
        };
        
        SimulationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::INVALID)) {}
        SimulationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
        SimulationStatus &operator=(const ::v4::org::genivi::navigation::NavigationTypes::BasicEnum::Literal &_value) {
            value_ = static_cast<int32_t>(_value);
            return (*this);
        }
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::INVALID):
                case static_cast<int32_t>(Literal::ALL):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_NO_SIMULATION):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_RUNNING):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_PAUSED):
                case static_cast<int32_t>(Literal::SIMULATION_STATUS_FIXED_POSITION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SimulationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SimulationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SimulationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SimulationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SimulationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SimulationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef CommonAPI::Variant<::v4::org::genivi::navigation::NavigationTypes::Timestamp, bool, GnnsFixStatus, double, int32_t>  PositionItemValue;
    typedef std::unordered_map<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey, ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemValue, CommonAPI::EnumHasher<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>> PositionItemDict;
    typedef CommonAPI::Variant<std::string, int16_t, ::v4::org::genivi::navigation::NavigationTypes::Timestamp, MatchMode>  AddressItemValue;
    typedef std::unordered_map<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey, ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemValue, CommonAPI::EnumHasher<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>> AddressItemDict;
    typedef CommonAPI::Variant<bool, double, CommonAPI::ByteBuffer, ::v4::org::genivi::navigation::NavigationTypes::Timestamp>  PositionOnSegmentValue;
    typedef std::unordered_map<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey, ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentValue, CommonAPI::EnumHasher<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>> PositionOnSegmentDict;
    typedef CommonAPI::Variant<bool, GnnsFixStatus, ::v4::org::genivi::navigation::NavigationTypes::Timestamp>  PositionStatusValue;
    typedef std::unordered_map<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus, ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatusValue, CommonAPI::EnumHasher<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>> PositionStatusDict;
};

const char* MapMatchedPosition::getInterface() {
    return ("org.genivi.navigation.navigationcore.MapMatchedPosition");
}

CommonAPI::Version MapMatchedPosition::getInterfaceVersion() {
    return CommonAPI::Version(4, 0);
}


} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

namespace CommonAPI {
}


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_MAP_MATCHED_POSITION_HPP_
