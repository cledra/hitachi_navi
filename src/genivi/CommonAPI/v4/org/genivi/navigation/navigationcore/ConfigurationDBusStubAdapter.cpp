/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/navigationcore/Configuration.hpp>
#include <v4/org/genivi/navigation/navigationcore/ConfigurationDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createConfigurationDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<ConfigurationDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerConfigurationDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Configuration::getInterface(), &createConfigurationDBusStubAdapter);
}

ConfigurationDBusStubAdapterInternal::~ConfigurationDBusStubAdapterInternal() {
    deactivateManagedInstances();
    ConfigurationDBusStubAdapterHelper::deinit();
}

void ConfigurationDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* ConfigurationDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: ConfigurationChanged = This signal is sent to the clients when one or more
         *   configuration settings changes
         */
        "<signal name=\"configurationChanged\">\n"
            "<arg name=\"changedSettings\" type=\"ai\" />\n"
        "</signal>\n"
        /**
         * description: This method returns the API version .
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Set the current language set. If the language is not supported, the default
         *   details will be returned in the native language.
         */
        "<method name=\"setLocale\">\n"
            "<arg name=\"_languageCode\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_countryCode\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_scriptCode\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Get the current language set .
         */
        "<method name=\"getLocale\">\n"
            "<arg name=\"_languageCode\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"_countryCode\" type=\"s\" direction=\"out\" />\n"
            "<arg name=\"_scriptCode\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the supported set of locales .
         */
        "<method name=\"getSupportedLocales\">\n"
            "<arg name=\"_localeList\" type=\"a(sss)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Set the time format.
         */
        "<method name=\"setTimeFormat\">\n"
            "<arg name=\"_format\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Get the current time format .
         */
        "<method name=\"getTimeFormat\">\n"
            "<arg name=\"_format\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the supported set of time format .
         */
        "<method name=\"getSupportedTimeFormats\">\n"
            "<arg name=\"_timeFormatList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Set the coordinates format.
         */
        "<method name=\"setCoordinatesFormat\">\n"
            "<arg name=\"_coordinatesFormat\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Get the coordinates format .
         */
        "<method name=\"getCoordinatesFormat\">\n"
            "<arg name=\"_coordinatesFormat\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the supported set of coordinates format .
         */
        "<method name=\"getSupportedCoordinatesFormat\">\n"
            "<arg name=\"_coordinatesFormatList\" type=\"ai\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Set the units of measurement .
         */
        "<method name=\"setUnitsOfMeasurement\">\n"
            "<arg name=\"_unitsOfMeasurement\" type=\"a{ii}\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Get the units of measurement .
         */
        "<method name=\"getUnitsOfMeasurement\">\n"
            "<arg name=\"_unitsOfMeasurement\" type=\"a{ii}\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the supported set of units of measurement .
         */
        "<method name=\"getSupportedUnitsOfMeasurement\">\n"
            "<arg name=\"_unitsOfMeasurementList\" type=\"a{iai}\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
        CommonAPI::Version
        > ConfigurationDBusStubAdapterInternal::getConfigurationInterfaceVersionStubDispatcher(&ConfigurationStub::getInterfaceVersion, "uu");




/**
 * description: This method returns the API version .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > ConfigurationDBusStubAdapterInternal::getVersionStubDispatcher(
    &ConfigurationStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: Set the current language set. If the language is not supported, the default
 *   details will be returned in the native language.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<std::string, std::string, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > ConfigurationDBusStubAdapterInternal::setLocaleStubDispatcher(
    &ConfigurationStub::setLocale, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Get the current language set .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<std::string, std::string, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>
    
    > ConfigurationDBusStubAdapterInternal::getLocaleStubDispatcher(
    &ConfigurationStub::getLocale, "sss",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));

/**
 * description: Get the supported set of locales .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>>
    
    > ConfigurationDBusStubAdapterInternal::getSupportedLocalesStubDispatcher(
    &ConfigurationStub::getSupportedLocales, "a(sss)",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>*>(nullptr)));

/**
 * description: Set the time format.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::TimeFormat>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > ConfigurationDBusStubAdapterInternal::setTimeFormatStubDispatcher(
    &ConfigurationStub::setTimeFormat, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Get the current time format .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::TimeFormat>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConfigurationDBusStubAdapterInternal::getTimeFormatStubDispatcher(
    &ConfigurationStub::getTimeFormat, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Get the supported set of time format .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::TimeFormat>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > ConfigurationDBusStubAdapterInternal::getSupportedTimeFormatsStubDispatcher(
    &ConfigurationStub::getSupportedTimeFormats, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: Set the coordinates format.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<Configuration::CoordinatesFormat>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > ConfigurationDBusStubAdapterInternal::setCoordinatesFormatStubDispatcher(
    &ConfigurationStub::setCoordinatesFormat, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Get the coordinates format .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<Configuration::CoordinatesFormat>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ConfigurationDBusStubAdapterInternal::getCoordinatesFormatStubDispatcher(
    &ConfigurationStub::getCoordinatesFormat, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Get the supported set of coordinates format .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<std::vector<Configuration::CoordinatesFormat>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > ConfigurationDBusStubAdapterInternal::getSupportedCoordinatesFormatStubDispatcher(
    &ConfigurationStub::getSupportedCoordinatesFormat, "ai",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: Set the units of measurement .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<Configuration::UnitsOfMeasurement>,
    std::tuple<>,
    std::tuple<Configuration_::UnitsOfMeasurementDeployment_t>,
    std::tuple<>
    
    > ConfigurationDBusStubAdapterInternal::setUnitsOfMeasurementStubDispatcher(
    &ConfigurationStub::setUnitsOfMeasurement, "",
					std::make_tuple(static_cast<Configuration_::UnitsOfMeasurementDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: Get the units of measurement .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<Configuration::UnitsOfMeasurement>,
    std::tuple<>,
    std::tuple<Configuration_::UnitsOfMeasurementDeployment_t>
    
    > ConfigurationDBusStubAdapterInternal::getUnitsOfMeasurementStubDispatcher(
    &ConfigurationStub::getUnitsOfMeasurement, "a{ii}",
					std::make_tuple(),
                	std::make_tuple(static_cast<Configuration_::UnitsOfMeasurementDeployment_t*>(nullptr)));

/**
 * description: Get the supported set of units of measurement .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::ConfigurationStub,
    std::tuple<>,
    std::tuple<Configuration::UnitsOfMeasurementList>,
    std::tuple<>,
    std::tuple<Configuration_::UnitsOfMeasurementListDeployment_t>
    
    > ConfigurationDBusStubAdapterInternal::getSupportedUnitsOfMeasurementStubDispatcher(
    &ConfigurationStub::getSupportedUnitsOfMeasurement, "a{iai}",
					std::make_tuple(),
                	std::make_tuple(static_cast<Configuration_::UnitsOfMeasurementListDeployment_t*>(nullptr)));



/**
 * description: ConfigurationChanged = This signal is sent to the clients when one or more
 *   configuration settings changes
 */
void ConfigurationDBusStubAdapterInternal::fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::Configuration::Settings>& changedSettings) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::Configuration::Settings>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    >>::sendSignal(
            *this,
            "configurationChanged",
            "ai",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::Configuration::Settings>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>(changedSettings, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))
    );
}


const ConfigurationDBusStubAdapterHelper::StubDispatcherTable& ConfigurationDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& ConfigurationDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

ConfigurationDBusStubAdapterInternal::ConfigurationDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      ConfigurationDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<ConfigurationStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: This method returns the API version .
             */
            { { "getVersion", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: Set the current language set. If the language is not supported, the default
             *   details will be returned in the native language.
             */
            { { "setLocale", "sss" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::setLocaleStubDispatcher },
            /**
             * description: Get the current language set .
             */
            { { "getLocale", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getLocaleStubDispatcher },
            /**
             * description: Get the supported set of locales .
             */
            { { "getSupportedLocales", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getSupportedLocalesStubDispatcher },
            /**
             * description: Set the time format.
             */
            { { "setTimeFormat", "i" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::setTimeFormatStubDispatcher },
            /**
             * description: Get the current time format .
             */
            { { "getTimeFormat", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getTimeFormatStubDispatcher },
            /**
             * description: Get the supported set of time format .
             */
            { { "getSupportedTimeFormats", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getSupportedTimeFormatsStubDispatcher },
            /**
             * description: Set the coordinates format.
             */
            { { "setCoordinatesFormat", "i" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::setCoordinatesFormatStubDispatcher },
            /**
             * description: Get the coordinates format .
             */
            { { "getCoordinatesFormat", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getCoordinatesFormatStubDispatcher },
            /**
             * description: Get the supported set of coordinates format .
             */
            { { "getSupportedCoordinatesFormat", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getSupportedCoordinatesFormatStubDispatcher },
            /**
             * description: Set the units of measurement .
             */
            { { "setUnitsOfMeasurement", "a{ii}" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::setUnitsOfMeasurementStubDispatcher },
            /**
             * description: Get the units of measurement .
             */
            { { "getUnitsOfMeasurement", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getUnitsOfMeasurementStubDispatcher },
            /**
             * description: Get the supported set of units of measurement .
             */
            { { "getSupportedUnitsOfMeasurement", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getSupportedUnitsOfMeasurementStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::navigationcore::ConfigurationDBusStubAdapterInternal::getConfigurationInterfaceVersionStubDispatcher });
}

bool ConfigurationDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
