/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface allows a user to find locations by entering a single text
 *   string.
A user of a navigation system needs to find a location on a map, e.g.
 *   to use as a destination of a route.
Locations can be identified by different
 *   means, for example:
 - An address, e.g. '2400 Camino Ramon, San Ramon,
 *   California, USA.'
 - A point of interest, e.g. 'Eiffel Tower'.
 - A named
 *   place, .e.g. 'Amsterdam'

This interface allows a user to find these locations
 *   by entering a single text string.
The system will respond with locations that
 *   match the given text string.
For each location, a location handle will be
 *   returned that can be used as input to other interfaces,
for example to plan a
 *   route, or to get more attributes of a point of interest.
A free text search is
 *   initiated by sending a free text search request (Method FtsRequest) containing
 *   the search text and search options input by the user.
Depending on search
 *   options both addresses and POIs are searched for matches. A single request may
 *   get multiple result responses (via Signals):
 - FtsResultAddresses to report
 *   address matches
 - FtsResultPois to report POI matches
 -
 *   FtsResultPoiSuggestions to give suggestions for doing specific POI
 *   queries
Each response comes as soon as the results are available, so address
 *   results may be received while the search process continues looking for POI
 *   matches.
The order in which the results will be received is not defined. The
 *   search engine determines which results to return first based on the user
 *   input.
If there are no matches found in a certain type of result, then no
 *   response for that type will be sent.
E.g. if the user input only matches an
 *   address but not POIs, then no FtsResultPois response will be sent.
To indicate
 *   that the search has finished an FtsDone signal is sent.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_PROXY_HPP_

#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace freetextsearchservice {

template <typename ... _AttributeExtensions>
class FreeTextSearchProxy
    : virtual public FreeTextSearch, 
      virtual public FreeTextSearchProxyBase,
      virtual public _AttributeExtensions... {
public:
    FreeTextSearchProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~FreeTextSearchProxy();

    typedef FreeTextSearch InterfaceType;



    /**
     * description: Response indicating that the search is done.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ftsDone.
     */
    virtual FtsDoneSelectiveEvent& getFtsDoneSelectiveEvent() {
        return delegate_->getFtsDoneSelectiveEvent();
    }
    /**
     * description: Response with address results.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ftsResultAddresses.
     */
    virtual FtsResultAddressesSelectiveEvent& getFtsResultAddressesSelectiveEvent() {
        return delegate_->getFtsResultAddressesSelectiveEvent();
    }
    /**
     * description: Response with POI results.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ftsResultPois.
     */
    virtual FtsResultPoisSelectiveEvent& getFtsResultPoisSelectiveEvent() {
        return delegate_->getFtsResultPoisSelectiveEvent();
    }
    /**
     * description: Response with POI category suggestions.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ftsResultPoiSuggestions.
     */
    virtual FtsResultPoiSuggestionsSelectiveEvent& getFtsResultPoiSuggestionsSelectiveEvent() {
        return delegate_->getFtsResultPoiSuggestionsSelectiveEvent();
    }

    /**
     * description: This method returns the API version implemented by the content access module.
     * Calls getVersion with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(const FreeTextSearch::RequestId &_requestId, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(const FreeTextSearch::RequestId &_requestId, GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Perform a free text search.
            A single search request will trigger zero
     *   or more FtsResultXxx responses followed by an FtsDone response.
            Each
     *   response will contain 1 page of results.
            A next page of results can be
     *   retrieved with the FtsNextPage request.
            
            When you send a new
     *   request before receiving a done response on the previous request,
            then
     *   the previous request will be canceled.
            You will still get a done
     *   response on the previous request.
            This way each request gets a
     *   response.
     * Calls ftsRequest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ftsRequest(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::ftsRequestError &_error, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ftsRequest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ftsRequestAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, FtsRequestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get next result page for the last performed search.
            This request will
     *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
     
     *         If there is no search request done before or if a search request is
     *   still in progress
            hen the FtsDone response will return a
     *   EStatusNoSearchToContinue status.
     * Calls ftsNextPage with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ftsNextPage(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ftsNextPage with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ftsNextPageAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, FtsNextPageAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Cancel an FTS session.
     * Calls ftsCancel with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ftsCancel(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ftsCancel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ftsCancelAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, FtsCancelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Release handle(s) if they are not used anymore.
     * Calls deleteLocationHandles with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteLocationHandles(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteLocationHandles with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteLocationHandlesAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, DeleteLocationHandlesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<FreeTextSearchProxyBase> delegate_;
};

typedef FreeTextSearchProxy<> FreeTextSearchProxyDefault;


//
// FreeTextSearchProxy Implementation
//
template <typename ... _AttributeExtensions>
FreeTextSearchProxy<_AttributeExtensions...>::FreeTextSearchProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<FreeTextSearchProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<FreeTextSearchProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
FreeTextSearchProxy<_AttributeExtensions...>::~FreeTextSearchProxy() {
}

/**
 * description: This method returns the API version implemented by the content access module.
 */
template <typename ... _AttributeExtensions>
void FreeTextSearchProxy<_AttributeExtensions...>::getVersion(const FreeTextSearch::RequestId &_requestId, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_requestId, _internalCallStatus, _responseId, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FreeTextSearchProxy<_AttributeExtensions...>::getVersionAsync(const FreeTextSearch::RequestId &_requestId, GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_requestId, _callback, _info);
}
/**
 * description: Perform a free text search.
        A single search request will trigger zero
 *   or more FtsResultXxx responses followed by an FtsDone response.
        Each
 *   response will contain 1 page of results.
        A next page of results can be
 *   retrieved with the FtsNextPage request.
        
        When you send a new
 *   request before receiving a done response on the previous request,
        then
 *   the previous request will be canceled.
        You will still get a done
 *   response on the previous request.
        This way each request gets a
 *   response.
 */
template <typename ... _AttributeExtensions>
void FreeTextSearchProxy<_AttributeExtensions...>::ftsRequest(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::ftsRequestError &_error, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const CommonAPI::CallInfo *_info) {
    delegate_->ftsRequest(_requestId, _inputString, _searchLocation, _searchShapes, _pageSize, _searchOptions, _searchConditions, _fuzzyLevel, _internalCallStatus, _error, _responseId, _freeTextSearchHandle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FreeTextSearchProxy<_AttributeExtensions...>::ftsRequestAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, FtsRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ftsRequestAsync(_requestId, _inputString, _searchLocation, _searchShapes, _pageSize, _searchOptions, _searchConditions, _fuzzyLevel, _callback, _info);
}
/**
 * description: Get next result page for the last performed search.
        This request will
 *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
 
 *         If there is no search request done before or if a search request is
 *   still in progress
        hen the FtsDone response will return a
 *   EStatusNoSearchToContinue status.
 */
template <typename ... _AttributeExtensions>
void FreeTextSearchProxy<_AttributeExtensions...>::ftsNextPage(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info) {
    delegate_->ftsNextPage(_requestId, _freeTextSearchHandle, _searchOptions, _internalCallStatus, _responseId, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FreeTextSearchProxy<_AttributeExtensions...>::ftsNextPageAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, FtsNextPageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ftsNextPageAsync(_requestId, _freeTextSearchHandle, _searchOptions, _callback, _info);
}
/**
 * description: Cancel an FTS session.
 */
template <typename ... _AttributeExtensions>
void FreeTextSearchProxy<_AttributeExtensions...>::ftsCancel(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info) {
    delegate_->ftsCancel(_requestId, _freeTextSearchHandle, _internalCallStatus, _responseId, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FreeTextSearchProxy<_AttributeExtensions...>::ftsCancelAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, FtsCancelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ftsCancelAsync(_requestId, _freeTextSearchHandle, _callback, _info);
}
/**
 * description: Release handle(s) if they are not used anymore.
 */
template <typename ... _AttributeExtensions>
void FreeTextSearchProxy<_AttributeExtensions...>::deleteLocationHandles(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info) {
    delegate_->deleteLocationHandles(_requestId, _locationHandleList, _internalCallStatus, _responseId, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> FreeTextSearchProxy<_AttributeExtensions...>::deleteLocationHandlesAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, DeleteLocationHandlesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteLocationHandlesAsync(_requestId, _locationHandleList, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &FreeTextSearchProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool FreeTextSearchProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool FreeTextSearchProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& FreeTextSearchProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& FreeTextSearchProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace freetextsearchservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_PROXY_HPP_
