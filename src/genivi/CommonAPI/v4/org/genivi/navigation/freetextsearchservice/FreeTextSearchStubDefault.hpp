/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface allows a user to find locations by entering a single text
 *   string.
A user of a navigation system needs to find a location on a map, e.g.
 *   to use as a destination of a route.
Locations can be identified by different
 *   means, for example:
 - An address, e.g. '2400 Camino Ramon, San Ramon,
 *   California, USA.'
 - A point of interest, e.g. 'Eiffel Tower'.
 - A named
 *   place, .e.g. 'Amsterdam'

This interface allows a user to find these locations
 *   by entering a single text string.
The system will respond with locations that
 *   match the given text string.
For each location, a location handle will be
 *   returned that can be used as input to other interfaces,
for example to plan a
 *   route, or to get more attributes of a point of interest.
A free text search is
 *   initiated by sending a free text search request (Method FtsRequest) containing
 *   the search text and search options input by the user.
Depending on search
 *   options both addresses and POIs are searched for matches. A single request may
 *   get multiple result responses (via Signals):
 - FtsResultAddresses to report
 *   address matches
 - FtsResultPois to report POI matches
 -
 *   FtsResultPoiSuggestions to give suggestions for doing specific POI
 *   queries
Each response comes as soon as the results are available, so address
 *   results may be received while the search process continues looking for POI
 *   matches.
The order in which the results will be received is not defined. The
 *   search engine determines which results to return first based on the user
 *   input.
If there are no matches found in a certain type of result, then no
 *   response for that type will be sent.
E.g. if the user input only matches an
 *   address but not POIs, then no FtsResultPois response will be sent.
To indicate
 *   that the search has finished an FtsDone signal is sent.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace freetextsearchservice {

/**
 * Provides a default implementation for FreeTextSearchStubRemoteEvent and
 * FreeTextSearchStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class FreeTextSearchStubDefault
    : public virtual FreeTextSearchStub {
public:
    FreeTextSearchStubDefault();

    FreeTextSearchStubRemoteEvent* initStubAdapter(const std::shared_ptr<FreeTextSearchStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, getVersionReply_t _reply);
    /**
     * description: Perform a free text search.
            A single search request will trigger zero
     *   or more FtsResultXxx responses followed by an FtsDone response.
            Each
     *   response will contain 1 page of results.
            A next page of results can be
     *   retrieved with the FtsNextPage request.
            
            When you send a new
     *   request before receiving a done response on the previous request,
            then
     *   the previous request will be canceled.
            You will still get a done
     *   response on the previous request.
            This way each request gets a
     *   response.
     */
    virtual void ftsRequest(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, FreeTextSearch::FtsString _inputString, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _searchLocation, FreeTextSearch::ShapeList _searchShapes, FreeTextSearch::PageSize _pageSize, FreeTextSearch::SearchOptions _searchOptions, FreeTextSearch::FtsString _searchConditions, FreeTextSearch::FuzzyLevel _fuzzyLevel, ftsRequestReply_t _reply);
    /**
     * description: Get next result page for the last performed search.
            This request will
     *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
     
     *         If there is no search request done before or if a search request is
     *   still in progress
            hen the FtsDone response will return a
     *   EStatusNoSearchToContinue status.
     */
    virtual void ftsNextPage(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, ::v4::org::genivi::navigation::NavigationTypes::Handle _freeTextSearchHandle, FreeTextSearch::SearchOptions _searchOptions, ftsNextPageReply_t _reply);
    /**
     * description: Cancel an FTS session.
     */
    virtual void ftsCancel(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, ::v4::org::genivi::navigation::NavigationTypes::Handle _freeTextSearchHandle, ftsCancelReply_t _reply);
    /**
     * description: Release handle(s) if they are not used anymore.
     */
    virtual void deleteLocationHandles(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, FreeTextSearch::LocationHandleList _locationHandleList, deleteLocationHandlesReply_t _reply);

/**
 * description: Response indicating that the search is done.
 */
virtual void fireFtsDoneSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus &_ftsStatus, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsDoneSelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onFtsDoneSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onFtsDoneSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);
/**
 * description: Response with address results.
 */
virtual void fireFtsResultAddressesSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses &_addresses, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultAddressesSelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onFtsResultAddressesSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onFtsResultAddressesSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);
/**
 * description: Response with POI results.
 */
virtual void fireFtsResultPoisSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs &_pois, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoisSelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onFtsResultPoisSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onFtsResultPoisSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);
/**
 * description: Response with POI category suggestions.
 */
virtual void fireFtsResultPoiSuggestionsSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories &_poiCategories, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoiSuggestionsSelective();
/// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
virtual void onFtsResultPoiSuggestionsSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event);
/// Hook method for reacting accepting or denying new subscriptions 
virtual bool onFtsResultPoiSuggestionsSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client);


protected:
    class RemoteEventHandler: public virtual FreeTextSearchStubRemoteEvent {
    public:
        RemoteEventHandler(FreeTextSearchStubDefault *_defaultStub);


    private:
        FreeTextSearchStubDefault *defaultStub_;
    };
private:
    FreeTextSearchStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace freetextsearchservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_STUB_DEFAULT
