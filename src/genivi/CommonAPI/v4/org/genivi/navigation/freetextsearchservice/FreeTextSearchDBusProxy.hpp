/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface allows a user to find locations by entering a single text
 *   string.
A user of a navigation system needs to find a location on a map, e.g.
 *   to use as a destination of a route.
Locations can be identified by different
 *   means, for example:
 - An address, e.g. '2400 Camino Ramon, San Ramon,
 *   California, USA.'
 - A point of interest, e.g. 'Eiffel Tower'.
 - A named
 *   place, .e.g. 'Amsterdam'

This interface allows a user to find these locations
 *   by entering a single text string.
The system will respond with locations that
 *   match the given text string.
For each location, a location handle will be
 *   returned that can be used as input to other interfaces,
for example to plan a
 *   route, or to get more attributes of a point of interest.
A free text search is
 *   initiated by sending a free text search request (Method FtsRequest) containing
 *   the search text and search options input by the user.
Depending on search
 *   options both addresses and POIs are searched for matches. A single request may
 *   get multiple result responses (via Signals):
 - FtsResultAddresses to report
 *   address matches
 - FtsResultPois to report POI matches
 -
 *   FtsResultPoiSuggestions to give suggestions for doing specific POI
 *   queries
Each response comes as soon as the results are available, so address
 *   results may be received while the search process continues looking for POI
 *   matches.
The order in which the results will be received is not defined. The
 *   search engine determines which results to return first based on the user
 *   input.
If there are no matches found in a certain type of result, then no
 *   response for that type will be sent.
E.g. if the user input only matches an
 *   address but not POIs, then no FtsResultPois response will be sent.
To indicate
 *   that the search has finished an FtsDone signal is sent.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_DBUS_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_DBUS_PROXY_HPP_

#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchProxyBase.hpp>
#include "v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/DBus/DBusSelectiveEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace freetextsearchservice {

class FreeTextSearchDBusProxy
    : virtual public FreeTextSearchProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    FreeTextSearchDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~FreeTextSearchDBusProxy() { }


    virtual FtsDoneSelectiveEvent& getFtsDoneSelectiveEvent();
    virtual FtsResultAddressesSelectiveEvent& getFtsResultAddressesSelectiveEvent();
    virtual FtsResultPoisSelectiveEvent& getFtsResultPoisSelectiveEvent();
    virtual FtsResultPoiSuggestionsSelectiveEvent& getFtsResultPoiSuggestionsSelectiveEvent();

    /**
     * description: This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(const FreeTextSearch::RequestId &_requestId, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(const FreeTextSearch::RequestId &_requestId, GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Perform a free text search.
            A single search request will trigger zero
     *   or more FtsResultXxx responses followed by an FtsDone response.
            Each
     *   response will contain 1 page of results.
            A next page of results can be
     *   retrieved with the FtsNextPage request.
            
            When you send a new
     *   request before receiving a done response on the previous request,
            then
     *   the previous request will be canceled.
            You will still get a done
     *   response on the previous request.
            This way each request gets a
     *   response.
     */
    virtual void ftsRequest(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::ftsRequestError &_error, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ftsRequestAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, FtsRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Get next result page for the last performed search.
            This request will
     *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
     
     *         If there is no search request done before or if a search request is
     *   still in progress
            hen the FtsDone response will return a
     *   EStatusNoSearchToContinue status.
     */
    virtual void ftsNextPage(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ftsNextPageAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, FtsNextPageAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Cancel an FTS session.
     */
    virtual void ftsCancel(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ftsCancelAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, FtsCancelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Release handle(s) if they are not used anymore.
     */
    virtual void deleteLocationHandles(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteLocationHandlesAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, DeleteLocationHandlesAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusSelectiveEvent<FtsDoneSelectiveEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus, CommonAPI::EmptyDeployment>> ftsDoneSelective_;
    CommonAPI::DBus::DBusSelectiveEvent<FtsResultAddressesSelectiveEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses, FreeTextSearch_::AddressesDeployment_t>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> ftsResultAddressesSelective_;
    CommonAPI::DBus::DBusSelectiveEvent<FtsResultPoisSelectiveEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs, FreeTextSearch_::POIsDeployment_t>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> ftsResultPoisSelective_;
    CommonAPI::DBus::DBusSelectiveEvent<FtsResultPoiSuggestionsSelectiveEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories, FreeTextSearch_::POICategoriesDeployment_t>> ftsResultPoiSuggestionsSelective_;

};

} // namespace freetextsearchservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_DBUS_PROXY_HPP_

