/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V4_ORG_GENIVI_Common_Types_HPP_
#define V4_ORG_GENIVI_Common_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {

struct CommonTypes {
    /**
     * description: version.
     */
    struct Version : CommonAPI::Struct<uint16_t, uint16_t, uint16_t, std::string> {
    	
    	Version() {
    	}
    	Version(const uint16_t &_versionMajor, const uint16_t &_versionMinor, const uint16_t &_versionMicro, const std::string &_date)
    	{
    		std::get<0>(values_) = _versionMajor;
    		std::get<1>(values_) = _versionMinor;
    		std::get<2>(values_) = _versionMicro;
    		std::get<3>(values_) = _date;
    	}
    	/**
    	 * description: when the major changes, then backward compatibility with previous releases is
    	 *   not granted.
    	 */
    	inline const uint16_t &getVersionMajor() const { return std::get<0>(values_); }
    	inline void setVersionMajor(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: when the minor changes, then backward compatibility with previous releases is
    	 *   granted, but something changed in the implementation of the API (e.g. new
    	 *   methods may have been added).
    	 */
    	inline const uint16_t &getVersionMinor() const { return std::get<1>(values_); }
    	inline void setVersionMinor(const uint16_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: when the micro changes, then backward compatibility with previous releases is
    	 *   granted (bug fixes or documentation modifications).
    	 */
    	inline const uint16_t &getVersionMicro() const { return std::get<2>(values_); }
    	inline void setVersionMicro(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: release date (e.g. 21-06-2011).
    	 */
    	inline const std::string &getDate() const { return std::get<3>(values_); }
    	inline void setDate(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Version& _other) const {
                return (getVersionMajor() == _other.getVersionMajor() && getVersionMinor() == _other.getVersionMinor() && getVersionMicro() == _other.getVersionMicro() && getDate() == _other.getDate());
        }
    	inline bool operator!=(const Version &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Unique ID for a POI Categories
     */
    typedef uint32_t CategoryID;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.CommonTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(4, 0);
}

}; // struct CommonTypes

} // namespace genivi
} // namespace org
} // namespace v4

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_Common_Types_HPP_
