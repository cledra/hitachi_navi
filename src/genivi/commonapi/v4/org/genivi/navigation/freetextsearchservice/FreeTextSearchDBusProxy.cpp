/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface allows a user to find locations by entering a single text
 *   string.
A user of a navigation system needs to find a location on a map, e.g.
 *   to use as a destination of a route.
Locations can be identified by different
 *   means, for example:
 - An address, e.g. '2400 Camino Ramon, San Ramon,
 *   California, USA.'
 - A point of interest, e.g. 'Eiffel Tower'.
 - A named
 *   place, .e.g. 'Amsterdam'

This interface allows a user to find these locations
 *   by entering a single text string.
The system will respond with locations that
 *   match the given text string.
For each location, a location handle will be
 *   returned that can be used as input to other interfaces,
for example to plan a
 *   route, or to get more attributes of a point of interest.
A free text search is
 *   initiated by sending a free text search request (Method FtsRequest) containing
 *   the search text and search options input by the user.
Depending on search
 *   options both addresses and POIs are searched for matches. A single request may
 *   get multiple result responses (via Signals):
 - FtsResultAddresses to report
 *   address matches
 - FtsResultPois to report POI matches
 -
 *   FtsResultPoiSuggestions to give suggestions for doing specific POI
 *   queries
Each response comes as soon as the results are available, so address
 *   results may be received while the search process continues looking for POI
 *   matches.
The order in which the results will be received is not defined. The
 *   search engine determines which results to return first based on the user
 *   input.
If there are no matches found in a certain type of result, then no
 *   response for that type will be sent.
E.g. if the user input only matches an
 *   address but not POIs, then no FtsResultPois response will be sent.
To indicate
 *   that the search has finished an FtsDone signal is sent.
 */
#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace freetextsearchservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createFreeTextSearchDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<FreeTextSearchDBusProxy>(_address, _connection);
}

INITIALIZER(registerFreeTextSearchDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		FreeTextSearch::getInterface(),
		&createFreeTextSearchDBusProxy);
}

FreeTextSearchDBusProxy::FreeTextSearchDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		ftsDoneSelective_(*this, "ftsDone", "ni", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ftsResultAddressesSelective_(*this, "ftsResultAddresses", "na(ussasass(yv)(dd)iqb)b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<FreeTextSearch_::AddressesDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ftsResultPoisSelective_(*this, "ftsResultPois", "na(uuasssasasssss(dd)iqb)b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<FreeTextSearch_::POIsDeployment_t*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ftsResultPoiSuggestionsSelective_(*this, "ftsResultPoiSuggestions", "na(usssa(ussasass(yv)(dd)iqb)q)", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<FreeTextSearch_::POICategoriesDeployment_t*>(nullptr)))
{
}


FreeTextSearchDBusProxy::FtsDoneSelectiveEvent& FreeTextSearchDBusProxy::getFtsDoneSelectiveEvent() {
    return ftsDoneSelective_;
}
FreeTextSearchDBusProxy::FtsResultAddressesSelectiveEvent& FreeTextSearchDBusProxy::getFtsResultAddressesSelectiveEvent() {
    return ftsResultAddressesSelective_;
}
FreeTextSearchDBusProxy::FtsResultPoisSelectiveEvent& FreeTextSearchDBusProxy::getFtsResultPoisSelectiveEvent() {
    return ftsResultPoisSelective_;
}
FreeTextSearchDBusProxy::FtsResultPoiSuggestionsSelectiveEvent& FreeTextSearchDBusProxy::getFtsResultPoiSuggestionsSelectiveEvent() {
    return ftsResultPoiSuggestionsSelective_;
}
    
    /**
     * description: This method returns the API version implemented by the content access module.
     */
    void FreeTextSearchDBusProxy::getVersion(const FreeTextSearch::RequestId &_requestId, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "n",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestId,
_internalCallStatus,
deploy_responseId, deploy_version);
_responseId = deploy_responseId.getValue();
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> FreeTextSearchDBusProxy::getVersionAsync(const FreeTextSearch::RequestId &_requestId, GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "n",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> _responseId, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _responseId.getValue(), _version.getValue());
        },
        std::make_tuple(deploy_responseId, deploy_version));
    }
    /**
     * description: Perform a free text search.
            A single search request will trigger zero
     *   or more FtsResultXxx responses followed by an FtsDone response.
            Each
     *   response will contain 1 page of results.
            A next page of results can be
     *   retrieved with the FtsNextPage request.
            
            When you send a new
     *   request before receiving a done response on the previous request,
            then
     *   the previous request will be canceled.
            You will still get a done
     *   response on the previous request.
            This way each request gets a
     *   response.
     */
    void FreeTextSearchDBusProxy::ftsRequest(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::ftsRequestError &_error, FreeTextSearch::RequestId &_responseId, ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::ftsRequestError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_searchLocation(_searchLocation, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::ShapeList, FreeTextSearch_::ShapeListDeployment_t> deploy_searchShapes(_searchShapes, static_cast<FreeTextSearch_::ShapeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::PageSize, CommonAPI::EmptyDeployment> deploy_pageSize(_pageSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment> deploy_searchOptions(_searchOptions, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment> deploy_searchConditions(_searchConditions, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::FuzzyLevel, CommonAPI::EmptyDeployment> deploy_fuzzyLevel(_fuzzyLevel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_freeTextSearchHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t >,
            CommonAPI::Deployable<FreeTextSearch::ShapeList, FreeTextSearch_::ShapeListDeployment_t >,
            CommonAPI::Deployable<FreeTextSearch::PageSize, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<FreeTextSearch::FuzzyLevel, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::ftsRequestError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "ftsRequest",
        "ns(dd)a(yv)qusy",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestId, deploy_inputString, deploy_searchLocation, deploy_searchShapes, deploy_pageSize, deploy_searchOptions, deploy_searchConditions, deploy_fuzzyLevel,
_internalCallStatus,
deploy_error,
deploy_responseId, deploy_freeTextSearchHandle);
_error = deploy_error.getValue();
_responseId = deploy_responseId.getValue();
_freeTextSearchHandle = deploy_freeTextSearchHandle.getValue();
}
    std::future<CommonAPI::CallStatus> FreeTextSearchDBusProxy::ftsRequestAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::FtsString &_inputString, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_searchLocation, const FreeTextSearch::ShapeList &_searchShapes, const FreeTextSearch::PageSize &_pageSize, const FreeTextSearch::SearchOptions &_searchOptions, const FreeTextSearch::FtsString &_searchConditions, const FreeTextSearch::FuzzyLevel &_fuzzyLevel, FtsRequestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::ftsRequestError, CommonAPI::EmptyDeployment> deploy_error(static_cast<CommonAPI::EmptyDeployment *>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_searchLocation(_searchLocation, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::ShapeList, FreeTextSearch_::ShapeListDeployment_t> deploy_searchShapes(_searchShapes, static_cast<FreeTextSearch_::ShapeListDeployment_t*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::PageSize, CommonAPI::EmptyDeployment> deploy_pageSize(_pageSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment> deploy_searchOptions(_searchOptions, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment> deploy_searchConditions(_searchConditions, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::FuzzyLevel, CommonAPI::EmptyDeployment> deploy_fuzzyLevel(_fuzzyLevel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_freeTextSearchHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t >,
            CommonAPI::Deployable<FreeTextSearch::ShapeList, FreeTextSearch_::ShapeListDeployment_t >,
            CommonAPI::Deployable<FreeTextSearch::PageSize, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::FtsString, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<FreeTextSearch::FuzzyLevel, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::ftsRequestError, CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "ftsRequest",
        "ns(dd)a(yv)qusy",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestId, deploy_inputString, deploy_searchLocation, deploy_searchShapes, deploy_pageSize, deploy_searchOptions, deploy_searchConditions, deploy_fuzzyLevel,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<FreeTextSearch::ftsRequestError, CommonAPI::EmptyDeployment> _deploy_error, CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> _responseId, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> _freeTextSearchHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _deploy_error.getValue(), _responseId.getValue(), _freeTextSearchHandle.getValue());
        },
        std::make_tuple(deploy_error, deploy_responseId, deploy_freeTextSearchHandle));
    }
    /**
     * description: Get next result page for the last performed search.
            This request will
     *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
     
     *         If there is no search request done before or if a search request is
     *   still in progress
            hen the FtsDone response will return a
     *   EStatusNoSearchToContinue status.
     */
    void FreeTextSearchDBusProxy::ftsNextPage(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_freeTextSearchHandle(_freeTextSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment> deploy_searchOptions(_searchOptions, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "ftsNextPage",
        "nuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestId, deploy_freeTextSearchHandle, deploy_searchOptions,
_internalCallStatus,
deploy_responseId);
_responseId = deploy_responseId.getValue();
}
    std::future<CommonAPI::CallStatus> FreeTextSearchDBusProxy::ftsNextPageAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, const FreeTextSearch::SearchOptions &_searchOptions, FtsNextPageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_freeTextSearchHandle(_freeTextSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment> deploy_searchOptions(_searchOptions, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::SearchOptions, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "ftsNextPage",
        "nuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestId, deploy_freeTextSearchHandle, deploy_searchOptions,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> _responseId) {
        	if (_callback)
        		_callback(_internalCallStatus, _responseId.getValue());
        },
        std::make_tuple(deploy_responseId));
    }
    /**
     * description: Cancel an FTS session.
     */
    void FreeTextSearchDBusProxy::ftsCancel(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_freeTextSearchHandle(_freeTextSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "ftsCancel",
        "nu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestId, deploy_freeTextSearchHandle,
_internalCallStatus,
deploy_responseId);
_responseId = deploy_responseId.getValue();
}
    std::future<CommonAPI::CallStatus> FreeTextSearchDBusProxy::ftsCancelAsync(const FreeTextSearch::RequestId &_requestId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_freeTextSearchHandle, FtsCancelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_freeTextSearchHandle(_freeTextSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "ftsCancel",
        "nu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestId, deploy_freeTextSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> _responseId) {
        	if (_callback)
        		_callback(_internalCallStatus, _responseId.getValue());
        },
        std::make_tuple(deploy_responseId));
    }
    /**
     * description: Release handle(s) if they are not used anymore.
     */
    void FreeTextSearchDBusProxy::deleteLocationHandles(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, CommonAPI::CallStatus &_internalCallStatus, FreeTextSearch::RequestId &_responseId, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::LocationHandleList, FreeTextSearch_::LocationHandleListDeployment_t> deploy_locationHandleList(_locationHandleList, static_cast<FreeTextSearch_::LocationHandleListDeployment_t*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::LocationHandleList, FreeTextSearch_::LocationHandleListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteLocationHandles",
        "nau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_requestId, deploy_locationHandleList,
_internalCallStatus,
deploy_responseId);
_responseId = deploy_responseId.getValue();
}
    std::future<CommonAPI::CallStatus> FreeTextSearchDBusProxy::deleteLocationHandlesAsync(const FreeTextSearch::RequestId &_requestId, const FreeTextSearch::LocationHandleList &_locationHandleList, DeleteLocationHandlesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_requestId(_requestId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::LocationHandleList, FreeTextSearch_::LocationHandleListDeployment_t> deploy_locationHandleList(_locationHandleList, static_cast<FreeTextSearch_::LocationHandleListDeployment_t*>(nullptr));
        CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> deploy_responseId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<FreeTextSearch::LocationHandleList, FreeTextSearch_::LocationHandleListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<FreeTextSearch::RequestId,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteLocationHandles",
        "nau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_requestId, deploy_locationHandleList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<FreeTextSearch::RequestId, CommonAPI::EmptyDeployment> _responseId) {
        	if (_callback)
        		_callback(_internalCallStatus, _responseId.getValue());
        },
        std::make_tuple(deploy_responseId));
    }


void FreeTextSearchDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace freetextsearchservice
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
