/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface allows a user to find locations by entering a single text
 *   string.
A user of a navigation system needs to find a location on a map, e.g.
 *   to use as a destination of a route.
Locations can be identified by different
 *   means, for example:
 - An address, e.g. '2400 Camino Ramon, San Ramon,
 *   California, USA.'
 - A point of interest, e.g. 'Eiffel Tower'.
 - A named
 *   place, .e.g. 'Amsterdam'

This interface allows a user to find these locations
 *   by entering a single text string.
The system will respond with locations that
 *   match the given text string.
For each location, a location handle will be
 *   returned that can be used as input to other interfaces,
for example to plan a
 *   route, or to get more attributes of a point of interest.
A free text search is
 *   initiated by sending a free text search request (Method FtsRequest) containing
 *   the search text and search options input by the user.
Depending on search
 *   options both addresses and POIs are searched for matches. A single request may
 *   get multiple result responses (via Signals):
 - FtsResultAddresses to report
 *   address matches
 - FtsResultPois to report POI matches
 -
 *   FtsResultPoiSuggestions to give suggestions for doing specific POI
 *   queries
Each response comes as soon as the results are available, so address
 *   results may be received while the search process continues looking for POI
 *   matches.
The order in which the results will be received is not defined. The
 *   search engine determines which results to return first based on the user
 *   input.
If there are no matches found in a certain type of result, then no
 *   response for that type will be sent.
E.g. if the user input only matches an
 *   address but not POIs, then no FtsResultPois response will be sent.
To indicate
 *   that the search has finished an FtsDone signal is sent.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchStub.hpp>
#include "v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearchDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace freetextsearchservice {

typedef CommonAPI::DBus::DBusStubAdapterHelper<FreeTextSearchStub> FreeTextSearchDBusStubAdapterHelper;

class FreeTextSearchDBusStubAdapterInternal
    : public virtual FreeTextSearchStubAdapter,
      public FreeTextSearchDBusStubAdapterHelper
{
public:
    FreeTextSearchDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~FreeTextSearchDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return FreeTextSearch::getInterface();
    }


    /**
     * description: Response indicating that the search is done.
     */
    void fireFtsDoneSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus &_ftsStatus);
    void sendFtsDoneSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus &_ftsStatus, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForftsDoneSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromftsDoneSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsDoneSelective();
    /**
     * description: Response with address results.
     */
    void fireFtsResultAddressesSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses &_addresses, const bool &_moreAvailable);
    void sendFtsResultAddressesSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses &_addresses, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForftsResultAddressesSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromftsResultAddressesSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultAddressesSelective();
    /**
     * description: Response with POI results.
     */
    void fireFtsResultPoisSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs &_pois, const bool &_moreAvailable);
    void sendFtsResultPoisSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs &_pois, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForftsResultPoisSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromftsResultPoisSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoisSelective();
    /**
     * description: Response with POI category suggestions.
     */
    void fireFtsResultPoiSuggestionsSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories &_poiCategories);
    void sendFtsResultPoiSuggestionsSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories &_poiCategories, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeForftsResultPoiSuggestionsSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromftsResultPoiSuggestionsSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoiSuggestionsSelective();


    const FreeTextSearchDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
        CommonAPI::Version
        > getFreeTextSearchInterfaceVersionStubDispatcher;



/**
 * description: This method returns the API version implemented by the content access module.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    std::tuple<FreeTextSearch::RequestId>,
    std::tuple<FreeTextSearch::RequestId, ::v4::org::genivi::CommonTypes::Version>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, ::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: Perform a free text search.
        A single search request will trigger zero
 *   or more FtsResultXxx responses followed by an FtsDone response.
        Each
 *   response will contain 1 page of results.
        A next page of results can be
 *   retrieved with the FtsNextPage request.
        
        When you send a new
 *   request before receiving a done response on the previous request,
        then
 *   the previous request will be canceled.
        You will still get a done
 *   response on the previous request.
        This way each request gets a
 *   response.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    std::tuple<FreeTextSearch::RequestId, FreeTextSearch::FtsString, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, FreeTextSearch::ShapeList, FreeTextSearch::PageSize, FreeTextSearch::SearchOptions, FreeTextSearch::FtsString, FreeTextSearch::FuzzyLevel>,
    std::tuple<FreeTextSearch::ftsRequestError, FreeTextSearch::RequestId, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t, FreeTextSearch_::ShapeListDeployment_t, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > ftsRequestStubDispatcher;
/**
 * description: Get next result page for the last performed search.
        This request will
 *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
 
 *         If there is no search request done before or if a search request is
 *   still in progress
        hen the FtsDone response will return a
 *   EStatusNoSearchToContinue status.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    std::tuple<FreeTextSearch::RequestId, ::v4::org::genivi::navigation::NavigationTypes::Handle, FreeTextSearch::SearchOptions>,
    std::tuple<FreeTextSearch::RequestId>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ftsNextPageStubDispatcher;
/**
 * description: Cancel an FTS session.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    std::tuple<FreeTextSearch::RequestId, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<FreeTextSearch::RequestId>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > ftsCancelStubDispatcher;
/**
 * description: Release handle(s) if they are not used anymore.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    std::tuple<FreeTextSearch::RequestId, FreeTextSearch::LocationHandleList>,
    std::tuple<FreeTextSearch::RequestId>,
    std::tuple<CommonAPI::EmptyDeployment, FreeTextSearch_::LocationHandleListDeployment_t>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > deleteLocationHandlesStubDispatcher;


static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeFtsDoneSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeFtsDoneSelectiveStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeFtsResultAddressesSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeFtsResultAddressesSelectiveStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeFtsResultPoisSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeFtsResultPoisSelectiveStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
    std::tuple<>,
    std::tuple<bool>
    > subscribeFtsResultPoiSuggestionsSelectiveStubDispatcher;

static CommonAPI::DBus::DBusMethodWithReplyAdapterDispatcher<
    ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearchStub,
    FreeTextSearchStubAdapter,
 std::tuple<>,
    std::tuple<>
    > unsubscribeFtsResultPoiSuggestionsSelectiveStubDispatcher;


 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    FreeTextSearchDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class FreeTextSearchDBusStubAdapter
    : public FreeTextSearchDBusStubAdapterInternal,
      public std::enable_shared_from_this<FreeTextSearchDBusStubAdapter> {
public:
    FreeTextSearchDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          FreeTextSearchDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace freetextsearchservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_DBUS_STUB_ADAPTER_HPP_
