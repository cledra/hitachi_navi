/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface allows a user to find locations by entering a single text
 *   string.
A user of a navigation system needs to find a location on a map, e.g.
 *   to use as a destination of a route.
Locations can be identified by different
 *   means, for example:
 - An address, e.g. '2400 Camino Ramon, San Ramon,
 *   California, USA.'
 - A point of interest, e.g. 'Eiffel Tower'.
 - A named
 *   place, .e.g. 'Amsterdam'

This interface allows a user to find these locations
 *   by entering a single text string.
The system will respond with locations that
 *   match the given text string.
For each location, a location handle will be
 *   returned that can be used as input to other interfaces,
for example to plan a
 *   route, or to get more attributes of a point of interest.
A free text search is
 *   initiated by sending a free text search request (Method FtsRequest) containing
 *   the search text and search options input by the user.
Depending on search
 *   options both addresses and POIs are searched for matches. A single request may
 *   get multiple result responses (via Signals):
 - FtsResultAddresses to report
 *   address matches
 - FtsResultPois to report POI matches
 -
 *   FtsResultPoiSuggestions to give suggestions for doing specific POI
 *   queries
Each response comes as soon as the results are available, so address
 *   results may be received while the search process continues looking for POI
 *   matches.
The order in which the results will be received is not defined. The
 *   search engine determines which results to return first based on the user
 *   input.
If there are no matches found in a certain type of result, then no
 *   response for that type will be sent.
E.g. if the user input only matches an
 *   address but not POIs, then no FtsResultPois response will be sent.
To indicate
 *   that the search has finished an FtsDone signal is sent.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#include <v4/org/genivi/navigation/freetextsearchservice/FreeTextSearch.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace freetextsearchservice {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service FreeTextSearch. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class FreeTextSearchStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual FreeTextSearch {
 public:

    /**
     * Sends a selective broadcast event for ftsDone. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireFtsDoneSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus &_ftsStatus) = 0;
    virtual void sendFtsDoneSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus &_ftsStatus, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForftsDoneSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromftsDoneSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsDoneSelective() = 0;
    /**
     * Sends a selective broadcast event for ftsResultAddresses. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireFtsResultAddressesSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses &_addresses, const bool &_moreAvailable) = 0;
    virtual void sendFtsResultAddressesSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses &_addresses, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForftsResultAddressesSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromftsResultAddressesSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultAddressesSelective() = 0;
    /**
     * Sends a selective broadcast event for ftsResultPois. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireFtsResultPoisSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs &_pois, const bool &_moreAvailable) = 0;
    virtual void sendFtsResultPoisSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs &_pois, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForftsResultPoisSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromftsResultPoisSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoisSelective() = 0;
    /**
     * Sends a selective broadcast event for ftsResultPoiSuggestions. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireFtsResultPoiSuggestionsSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories &_poiCategories) = 0;
    virtual void sendFtsResultPoiSuggestionsSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories &_poiCategories, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeForftsResultPoiSuggestionsSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromftsResultPoiSuggestionsSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoiSuggestionsSelective() = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForFtsDoneSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForFtsResultAddressesSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForFtsResultPoisSelective_;
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForFtsResultPoiSuggestionsSelective_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for FreeTextSearch.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class FreeTextSearchStubRemoteEvent
{
public:
    virtual ~FreeTextSearchStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service FreeTextSearch to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class FreeTextSearchStub
    : public virtual CommonAPI::Stub<FreeTextSearchStubAdapter, FreeTextSearchStubRemoteEvent>
{
public:
    typedef std::function<void (FreeTextSearch::RequestId _responseId, ::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void (FreeTextSearch::ftsRequestError _error, FreeTextSearch::RequestId _responseId, ::v4::org::genivi::navigation::NavigationTypes::Handle _freeTextSearchHandle)>ftsRequestReply_t;
    typedef std::function<void (FreeTextSearch::RequestId _responseId)>ftsNextPageReply_t;
    typedef std::function<void (FreeTextSearch::RequestId _responseId)>ftsCancelReply_t;
    typedef std::function<void (FreeTextSearch::RequestId _responseId)>deleteLocationHandlesReply_t;

    virtual ~FreeTextSearchStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: This method returns the API version implemented by the content access module.
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, getVersionReply_t _reply) = 0;
    /**
     * description: Perform a free text search.
            A single search request will trigger zero
     *   or more FtsResultXxx responses followed by an FtsDone response.
            Each
     *   response will contain 1 page of results.
            A next page of results can be
     *   retrieved with the FtsNextPage request.
            
            When you send a new
     *   request before receiving a done response on the previous request,
            then
     *   the previous request will be canceled.
            You will still get a done
     *   response on the previous request.
            This way each request gets a
     *   response.
     */
    /// This is the method that will be called on remote calls on the method ftsRequest.
    virtual void ftsRequest(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, FreeTextSearch::FtsString _inputString, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _searchLocation, FreeTextSearch::ShapeList _searchShapes, FreeTextSearch::PageSize _pageSize, FreeTextSearch::SearchOptions _searchOptions, FreeTextSearch::FtsString _searchConditions, FreeTextSearch::FuzzyLevel _fuzzyLevel, ftsRequestReply_t _reply) = 0;
    /**
     * description: Get next result page for the last performed search.
            This request will
     *   trigger zero or more FtsResultXxx responses followed by an FtsDone response.
     
     *         If there is no search request done before or if a search request is
     *   still in progress
            hen the FtsDone response will return a
     *   EStatusNoSearchToContinue status.
     */
    /// This is the method that will be called on remote calls on the method ftsNextPage.
    virtual void ftsNextPage(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, ::v4::org::genivi::navigation::NavigationTypes::Handle _freeTextSearchHandle, FreeTextSearch::SearchOptions _searchOptions, ftsNextPageReply_t _reply) = 0;
    /**
     * description: Cancel an FTS session.
     */
    /// This is the method that will be called on remote calls on the method ftsCancel.
    virtual void ftsCancel(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, ::v4::org::genivi::navigation::NavigationTypes::Handle _freeTextSearchHandle, ftsCancelReply_t _reply) = 0;
    /**
     * description: Release handle(s) if they are not used anymore.
     */
    /// This is the method that will be called on remote calls on the method deleteLocationHandles.
    virtual void deleteLocationHandles(const std::shared_ptr<CommonAPI::ClientId> _client, FreeTextSearch::RequestId _requestId, FreeTextSearch::LocationHandleList _locationHandleList, deleteLocationHandlesReply_t _reply) = 0;
    /**
     * description: Response indicating that the search is done.
     */
    /**
     * Sends a selective broadcast event for ftsDone to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireFtsDoneSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::FtsStatus &_ftsStatus, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for ftsDone
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsDoneSelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onFtsDoneSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onFtsDoneSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Response with address results.
     */
    /**
     * Sends a selective broadcast event for ftsResultAddresses to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireFtsResultAddressesSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::Addresses &_addresses, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for ftsResultAddresses
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultAddressesSelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onFtsResultAddressesSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onFtsResultAddressesSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Response with POI results.
     */
    /**
     * Sends a selective broadcast event for ftsResultPois to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireFtsResultPoisSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POIs &_pois, const bool &_moreAvailable, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for ftsResultPois
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoisSelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onFtsResultPoisSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onFtsResultPoisSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: Response with POI category suggestions.
     */
    /**
     * Sends a selective broadcast event for ftsResultPoiSuggestions to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireFtsResultPoiSuggestionsSelective(const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::RequestId &_responseId, const ::v4::org::genivi::navigation::freetextsearchservice::FreeTextSearch::POICategories &_poiCategories, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retreives the list of all subscribed clients for ftsResultPoiSuggestions
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForFtsResultPoiSuggestionsSelective() = 0;
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onFtsResultPoiSuggestionsSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions 
    virtual bool onFtsResultPoiSuggestionsSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    using CommonAPI::Stub<FreeTextSearchStubAdapter, FreeTextSearchStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<FreeTextSearchStubAdapter, FreeTextSearchStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<FreeTextSearchStubAdapter, FreeTextSearchStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef FreeTextSearchStubRemoteEvent RemoteEventType;
    typedef FreeTextSearch StubInterface;
};

} // namespace freetextsearchservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_FREETEXTSEARCHSERVICE_Free_Text_Search_STUB_HPP_
