/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/mapviewer/Session.hpp>
#include <v4/org/genivi/navigation/mapviewer/SessionDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createSessionDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<SessionDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerSessionDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Session::getInterface(), &createSessionDBusStubAdapter);
}

SessionDBusStubAdapterInternal::~SessionDBusStubAdapterInternal() {
    deactivateManagedInstances();
    SessionDBusStubAdapterHelper::deinit();
}

void SessionDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* SessionDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: sessionDeleted = This signal is emitted when a session is deleted
         */
        "<signal name=\"sessionDeleted\">\n"
            "<arg name=\"sessionHandle\" type=\"u\" />\n"
        "</signal>\n"
        /**
         * description: This method returns the API version .
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: createSession = This method creates a new session and retrieves a handle .
         */
        "<method name=\"createSession\">\n"
            "<arg name=\"_clientApp\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: deleteSession = This method deletes a session and its associated resources .
         */
        "<method name=\"deleteSession\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method returns whether a given session handle is available or not (for
         *   example because it was deleted) .
         */
        "<method name=\"getSessionStatus\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_sessionStatus\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method returns a list of all available sessions .
         */
        "<method name=\"getAllSessions\">\n"
            "<arg name=\"_sessionsList\" type=\"a(us)\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::mapviewer::SessionStub,
        CommonAPI::Version
        > SessionDBusStubAdapterInternal::getSessionInterfaceVersionStubDispatcher(&SessionStub::getInterfaceVersion, "uu");




/**
 * description: This method returns the API version .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > SessionDBusStubAdapterInternal::getVersionStubDispatcher(
    &SessionStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: createSession = This method creates a new session and retrieves a handle .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<std::string>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > SessionDBusStubAdapterInternal::createSessionStubDispatcher(
    &SessionStub::createSession, "u",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: deleteSession = This method deletes a session and its associated resources .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > SessionDBusStubAdapterInternal::deleteSessionStubDispatcher(
    &SessionStub::deleteSession, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method returns whether a given session handle is available or not (for
 *   example because it was deleted) .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::SessionStatus>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > SessionDBusStubAdapterInternal::getSessionStatusStubDispatcher(
    &SessionStub::getSessionStatus, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method returns a list of all available sessions .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::mapviewer::SessionStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Session>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::SessionDeployment_t>>
    
    > SessionDBusStubAdapterInternal::getAllSessionsStubDispatcher(
    &SessionStub::getAllSessions, "a(us)",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::SessionDeployment_t>*>(nullptr)));



/**
 * description: sessionDeleted = This signal is emitted when a session is deleted
 */
void SessionDBusStubAdapterInternal::fireSessionDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& sessionHandle) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle
    >>::sendSignal(
            *this,
            "sessionDeleted",
            "u",
    sessionHandle
    );
}


const SessionDBusStubAdapterHelper::StubDispatcherTable& SessionDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& SessionDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

SessionDBusStubAdapterInternal::SessionDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      SessionDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<SessionStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: This method returns the API version .
             */
            { { "getVersion", "" }, &org::genivi::navigation::mapviewer::SessionDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: createSession = This method creates a new session and retrieves a handle .
             */
            { { "createSession", "s" }, &org::genivi::navigation::mapviewer::SessionDBusStubAdapterInternal::createSessionStubDispatcher },
            /**
             * description: deleteSession = This method deletes a session and its associated resources .
             */
            { { "deleteSession", "u" }, &org::genivi::navigation::mapviewer::SessionDBusStubAdapterInternal::deleteSessionStubDispatcher },
            /**
             * description: This method returns whether a given session handle is available or not (for
             *   example because it was deleted) .
             */
            { { "getSessionStatus", "u" }, &org::genivi::navigation::mapviewer::SessionDBusStubAdapterInternal::getSessionStatusStubDispatcher },
            /**
             * description: This method returns a list of all available sessions .
             */
            { { "getAllSessions", "" }, &org::genivi::navigation::mapviewer::SessionDBusStubAdapterInternal::getAllSessionsStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::mapviewer::SessionDBusStubAdapterInternal::getSessionInterfaceVersionStubDispatcher });
}

bool SessionDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
