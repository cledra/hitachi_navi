/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapViewerControl = This interface offers functions to control the MapViewer
 */
#include <v4/org/genivi/navigation/mapviewer/MapViewerControlDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createMapViewerControlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<MapViewerControlDBusProxy>(_address, _connection);
}

INITIALIZER(registerMapViewerControlDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		MapViewerControl::getInterface(),
		&createMapViewerControlDBusProxy);
}

MapViewerControlDBusProxy::MapViewerControlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		followCarModeChanged_(*this, "followCarModeChanged", "ub", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		cameraPositionChanged_(*this, "cameraPositionChanged", "u(ddd)", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr))),
		cameraHeadingChanged_(*this, "CameraHeadingChanged", "uii", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		cameraTiltAngleChanged_(*this, "cameraTiltAngleChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		cameraDistanceFromTargetPointChanged_(*this, "cameraDistanceFromTargetPointChanged", "uu", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		mapViewScaleChanged_(*this, "mapViewScaleChanged", "uyi", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		mapViewPerspectiveChanged_(*this, "MapViewPerspectiveChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		mapViewObjectVisibilityChanged_(*this, "mapViewObjectVisibilityChanged", "ua{ib}", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr))),
		mapViewBoundingBoxChanged_(*this, "mapViewBoundingBoxChanged", "u((dd)(dd))", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr))),
		mapViewSaveAreaChanged_(*this, "mapViewSaveAreaChanged", "u(dddd)", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr))),
		mapViewVisibilityChanged_(*this, "mapViewVisibilityChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		mapViewPerformanceLevelChanged_(*this, "mapViewPerformanceLevelChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		displayedRoutes_(*this, "displayedRoutes", "ua(ub)", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>*>(nullptr))),
		poiCategoriesVisibilityChanged_(*this, "poiCategoriesVisibilityChanged", "uaubyy", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		mapViewThemeChanged_(*this, "mapViewThemeChanged", "ui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


MapViewerControlDBusProxy::FollowCarModeChangedEvent& MapViewerControlDBusProxy::getFollowCarModeChangedEvent() {
    return followCarModeChanged_;
}
MapViewerControlDBusProxy::CameraPositionChangedEvent& MapViewerControlDBusProxy::getCameraPositionChangedEvent() {
    return cameraPositionChanged_;
}
MapViewerControlDBusProxy::CameraHeadingChangedEvent& MapViewerControlDBusProxy::getCameraHeadingChangedEvent() {
    return cameraHeadingChanged_;
}
MapViewerControlDBusProxy::CameraTiltAngleChangedEvent& MapViewerControlDBusProxy::getCameraTiltAngleChangedEvent() {
    return cameraTiltAngleChanged_;
}
MapViewerControlDBusProxy::CameraDistanceFromTargetPointChangedEvent& MapViewerControlDBusProxy::getCameraDistanceFromTargetPointChangedEvent() {
    return cameraDistanceFromTargetPointChanged_;
}
MapViewerControlDBusProxy::MapViewScaleChangedEvent& MapViewerControlDBusProxy::getMapViewScaleChangedEvent() {
    return mapViewScaleChanged_;
}
MapViewerControlDBusProxy::MapViewPerspectiveChangedEvent& MapViewerControlDBusProxy::getMapViewPerspectiveChangedEvent() {
    return mapViewPerspectiveChanged_;
}
MapViewerControlDBusProxy::MapViewObjectVisibilityChangedEvent& MapViewerControlDBusProxy::getMapViewObjectVisibilityChangedEvent() {
    return mapViewObjectVisibilityChanged_;
}
MapViewerControlDBusProxy::MapViewBoundingBoxChangedEvent& MapViewerControlDBusProxy::getMapViewBoundingBoxChangedEvent() {
    return mapViewBoundingBoxChanged_;
}
MapViewerControlDBusProxy::MapViewSaveAreaChangedEvent& MapViewerControlDBusProxy::getMapViewSaveAreaChangedEvent() {
    return mapViewSaveAreaChanged_;
}
MapViewerControlDBusProxy::MapViewVisibilityChangedEvent& MapViewerControlDBusProxy::getMapViewVisibilityChangedEvent() {
    return mapViewVisibilityChanged_;
}
MapViewerControlDBusProxy::MapViewPerformanceLevelChangedEvent& MapViewerControlDBusProxy::getMapViewPerformanceLevelChangedEvent() {
    return mapViewPerformanceLevelChanged_;
}
MapViewerControlDBusProxy::DisplayedRoutesEvent& MapViewerControlDBusProxy::getDisplayedRoutesEvent() {
    return displayedRoutes_;
}
MapViewerControlDBusProxy::PoiCategoriesVisibilityChangedEvent& MapViewerControlDBusProxy::getPoiCategoriesVisibilityChangedEvent() {
    return poiCategoriesVisibilityChanged_;
}
MapViewerControlDBusProxy::MapViewThemeChangedEvent& MapViewerControlDBusProxy::getMapViewThemeChangedEvent() {
    return mapViewThemeChanged_;
}
    
    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    void MapViewerControlDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: createMapViewInstance = This method creates a new map instance
     */
    void MapViewerControlDBusProxy::createMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Dimension, MapViewerControl_::DimensionDeployment_t> deploy_mapViewSize(_mapViewSize, static_cast<MapViewerControl_::DimensionDeployment_t*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment> deploy_mapViewType(_mapViewType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Dimension, MapViewerControl_::DimensionDeployment_t >,
            CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createMapViewInstance",
        "u(qq)i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewSize, deploy_mapViewType,
_internalCallStatus,
deploy_mapViewInstanceHandle);
_mapViewInstanceHandle = deploy_mapViewInstanceHandle.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::createMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapViewerControl::Dimension &_mapViewSize, const MapViewerControl::MapViewType &_mapViewType, CreateMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Dimension, MapViewerControl_::DimensionDeployment_t> deploy_mapViewSize(_mapViewSize, static_cast<MapViewerControl_::DimensionDeployment_t*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment> deploy_mapViewType(_mapViewType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Dimension, MapViewerControl_::DimensionDeployment_t >,
            CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createMapViewInstance",
        "u(qq)i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewSize, deploy_mapViewType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> _mapViewInstanceHandle) {
        	if (_callback)
        		_callback(_internalCallStatus, _mapViewInstanceHandle.getValue());
        },
        std::make_tuple(deploy_mapViewInstanceHandle));
    }
    /**
     * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
     *   instance. Only invisible map instances can be released
     */
    void MapViewerControlDBusProxy::releaseMapViewInstance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "releaseMapViewInstance",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::releaseMapViewInstanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, ReleaseMapViewInstanceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "releaseMapViewInstance",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewType = This method returns the map type of a map instance as it was
     *   set using CreateMapViewInstance
     */
    void MapViewerControlDBusProxy::getMapViewType(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewType &_mapViewType, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment> deploy_mapViewType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapViewType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewType",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_mapViewType);
_mapViewType = deploy_mapViewType.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewTypeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment> deploy_mapViewType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapViewType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewType",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::MapViewType, CommonAPI::EmptyDeployment> _mapViewType) {
        	if (_callback)
        		_callback(_internalCallStatus, _mapViewType.getValue());
        },
        std::make_tuple(deploy_mapViewType));
    }
    /**
     * description: getSupportedMapViewTypes = This method retrieves the supported map view types
     */
    void MapViewerControlDBusProxy::getSupportedMapViewTypes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapViewType> &_mapViewTypeList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::MapViewType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_mapViewTypeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapViewType>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewTypes",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_mapViewTypeList);
_mapViewTypeList = deploy_mapViewTypeList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewTypesAsync(GetSupportedMapViewTypesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::MapViewType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_mapViewTypeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapViewType>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewTypes",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::MapViewType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _mapViewTypeList) {
        	if (_callback)
        		_callback(_internalCallStatus, _mapViewTypeList.getValue());
        },
        std::make_tuple(deploy_mapViewTypeList));
    }
    /**
     * description: setTargetPoint = This method sets the position of the point the camera is
     *   always aimed at
     */
    void MapViewerControlDBusProxy::setTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_targetPoint(_targetPoint, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setTargetPoint",
        "uu(ddd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_targetPoint,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, SetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_targetPoint(_targetPoint, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setTargetPoint",
        "uu(ddd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_targetPoint,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getTargetPoint = This method retrieves the target point position
     */
    void MapViewerControlDBusProxy::getTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_targetPoint(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D,::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getTargetPoint",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_targetPoint);
_targetPoint = deploy_targetPoint.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_targetPoint(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D,::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getTargetPoint",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> _targetPoint) {
        	if (_callback)
        		_callback(_internalCallStatus, _targetPoint.getValue());
        },
        std::make_tuple(deploy_targetPoint));
    }
    /**
     * description: setFollowCarMode = This method sets the FollowCar mode
     */
    void MapViewerControlDBusProxy::setFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_followCarMode(_followCarMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setFollowCarMode",
        "uub",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_followCarMode,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode, SetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_followCarMode(_followCarMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setFollowCarMode",
        "uub",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_followCarMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getFollowCarMode = This method returns the current FollowCar-mode
     */
    void MapViewerControlDBusProxy::getFollowCarMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_followCarMode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_followCarMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getFollowCarMode",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_followCarMode);
_followCarMode = deploy_followCarMode.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getFollowCarModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetFollowCarModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_followCarMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getFollowCarMode",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _followCarMode) {
        	if (_callback)
        		_callback(_internalCallStatus, _followCarMode.getValue());
        },
        std::make_tuple(deploy_followCarMode));
    }
    /**
     * description: setCameraPosition = This method sets the coordinates of the point at which the
     *   camera must be positioned
    		Note: the camera heading will be automatically set
     *   in such a way, that the camera is aimed at the view point
     */
    void MapViewerControlDBusProxy::setCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_position(_position, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraPosition",
        "uu(ddd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_position,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, SetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_position(_position, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraPosition",
        "uu(ddd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_position,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getCameraPosition = This method returns the coordinates of the point at which
     *   the camera is positioned
     */
    void MapViewerControlDBusProxy::getCameraPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_position, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_position(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D,::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getCameraPosition",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_position);
_position = deploy_position.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getCameraPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_position(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D,::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getCameraPosition",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> _position) {
        	if (_callback)
        		_callback(_internalCallStatus, _position.getValue());
        },
        std::make_tuple(deploy_position));
    }
    /**
     * description: setCameraHeadingAngle = This method sets the map view heading angle
    		Note: the
     *   camera position will be automatically set in such a way, that it looks at the
     *   currently selected target point
     */
    void MapViewerControlDBusProxy::setCameraHeadingAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_heading(_heading, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraHeadingAngle",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_heading,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraHeadingAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_heading, SetCameraHeadingAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_heading(_heading, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraHeadingAngle",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_heading,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
     *   that the camera always looks at a given target
     */
    void MapViewerControlDBusProxy::setCameraHeadingToTarget(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_target(_target, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraHeadingToTarget",
        "uu(dd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_target,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraHeadingToTargetAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, SetCameraHeadingToTargetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_target(_target, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraHeadingToTarget",
        "uu(dd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_target,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
     *   that the camera always looks in the direction in which the car is moving
     */
    void MapViewerControlDBusProxy::setCameraHeadingTrackUp(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraHeadingTrackUp",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraHeadingTrackUpAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, SetCameraHeadingTrackUpAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraHeadingTrackUp",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getCameraHeading = This method returns the current camera heading
     */
    void MapViewerControlDBusProxy::getCameraHeading(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::HeadingType &_headingType, int32_t &_headingAngle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D &_target, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::HeadingType, CommonAPI::EmptyDeployment> deploy_headingType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_headingAngle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_target(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::HeadingType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D,::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getCameraHeading",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_headingType, deploy_headingAngle, deploy_target);
_headingType = deploy_headingType.getValue();
_headingAngle = deploy_headingAngle.getValue();
_target = deploy_target.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getCameraHeadingAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeadingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::HeadingType, CommonAPI::EmptyDeployment> deploy_headingType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_headingAngle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> deploy_target(static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::HeadingType,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D,::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getCameraHeading",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::HeadingType, CommonAPI::EmptyDeployment> _headingType, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _headingAngle, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> _target) {
        	if (_callback)
        		_callback(_internalCallStatus, _headingType.getValue(), _headingAngle.getValue(), _target.getValue());
        },
        std::make_tuple(deploy_headingType, deploy_headingAngle, deploy_target));
    }
    /**
     * description: setCameraTiltAngle = This method sets the camera tilt angle
     */
    void MapViewerControlDBusProxy::setCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_tilt(_tilt, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraTiltAngle",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_tilt,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt, SetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_tilt(_tilt, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraTiltAngle",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_tilt,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getCameraTiltAngle = This method returns the camera tilt angle
     */
    void MapViewerControlDBusProxy::getCameraTiltAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_tilt, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_tilt(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCameraTiltAngle",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_tilt);
_tilt = deploy_tilt.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getCameraTiltAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraTiltAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_tilt(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCameraTiltAngle",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _tilt) {
        	if (_callback)
        		_callback(_internalCallStatus, _tilt.getValue());
        },
        std::make_tuple(deploy_tilt));
    }
    /**
     * description: setCameraRollAngle = This method sets the camera roll angle
     */
    void MapViewerControlDBusProxy::setCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_roll(_roll, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraRollAngle",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_roll,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_roll, SetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_roll(_roll, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraRollAngle",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_roll,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getCameraRollAngle = This method returns the camera roll angle
     */
    void MapViewerControlDBusProxy::getCameraRollAngle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_roll, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_roll(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCameraRollAngle",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_roll);
_roll = deploy_roll.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getCameraRollAngleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraRollAngleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_roll(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCameraRollAngle",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _roll) {
        	if (_callback)
        		_callback(_internalCallStatus, _roll.getValue());
        },
        std::make_tuple(deploy_roll));
    }
    /**
     * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
     *   distance from the target point
     */
    void MapViewerControlDBusProxy::setCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_distance(_distance, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraDistanceFromTargetPoint",
        "uuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_distance,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance, SetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_distance(_distance, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraDistanceFromTargetPoint",
        "uuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_distance,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
     *   distance from the target point
     */
    void MapViewerControlDBusProxy::getCameraDistanceFromTargetPoint(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_distance, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_distance(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCameraDistanceFromTargetPoint",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_distance);
_distance = deploy_distance.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getCameraDistanceFromTargetPointAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraDistanceFromTargetPointAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_distance(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCameraDistanceFromTargetPoint",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _distance) {
        	if (_callback)
        		_callback(_internalCallStatus, _distance.getValue());
        },
        std::make_tuple(deploy_distance));
    }
    /**
     * description: setMapViewScaleMode = This method sets the scaling mode.
     */
    void MapViewerControlDBusProxy::setMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment> deploy_scaleMode(_scaleMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewScaleMode",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_scaleMode,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapScaleMode &_scaleMode, SetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment> deploy_scaleMode(_scaleMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewScaleMode",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_scaleMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewScaleMode = This method gets the scaling mode.
     */
    void MapViewerControlDBusProxy::getMapViewScaleMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapScaleMode &_scaleMode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment> deploy_scaleMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapScaleMode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewScaleMode",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_scaleMode);
_scaleMode = deploy_scaleMode.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewScaleModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment> deploy_scaleMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapScaleMode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewScaleMode",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::MapScaleMode, CommonAPI::EmptyDeployment> _scaleMode) {
        	if (_callback)
        		_callback(_internalCallStatus, _scaleMode.getValue());
        },
        std::make_tuple(deploy_scaleMode));
    }
    /**
     * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
     */
    void MapViewerControlDBusProxy::getSupportedMapViewScaleModes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScaleMode> &_scaleModeList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::MapScaleMode>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_scaleModeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapScaleMode>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewScaleModes",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_scaleModeList);
_scaleModeList = deploy_scaleModeList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewScaleModesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewScaleModesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::MapScaleMode>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_scaleModeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapScaleMode>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewScaleModes",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::MapScaleMode>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _scaleModeList) {
        	if (_callback)
        		_callback(_internalCallStatus, _scaleModeList.getValue());
        },
        std::make_tuple(deploy_scaleModeList));
    }
    /**
     * description: addMapViewScaleChangedListener = This method adds a listener which is notified
     *   when map view scale changes.
     */
    void MapViewerControlDBusProxy::addMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "addMapViewScaleChangedListener",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::addMapViewScaleChangedListenerAsync(AddMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "addMapViewScaleChangedListener",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: removeMapViewScaleChangedListener = This method removes a listener which is
     *   notified when map view scale changes.
     */
    void MapViewerControlDBusProxy::removeMapViewScaleChangedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "removeMapViewScaleChangedListener",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::removeMapViewScaleChangedListenerAsync(RemoveMapViewScaleChangedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "removeMapViewScaleChangedListener",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setCameraHeight = This method sets the camera height
     */
    void MapViewerControlDBusProxy::setCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_height(_height, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setCameraHeight",
        "uuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_height,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_height, SetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_height(_height, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setCameraHeight",
        "uuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_height,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getCameraHeight = This method gets the camera height
     */
    void MapViewerControlDBusProxy::getCameraHeight(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_height, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_height(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCameraHeight",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_height);
_height = deploy_height.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getCameraHeightAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetCameraHeightAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_height(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCameraHeight",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _height) {
        	if (_callback)
        		_callback(_internalCallStatus, _height.getValue());
        },
        std::make_tuple(deploy_height));
    }
    /**
     * description: setMapViewPerspective = This method sets the map perspective
     */
    void MapViewerControlDBusProxy::setMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment> deploy_perspective(_perspective, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewPerspective",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_perspective,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapPerspective &_perspective, SetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment> deploy_perspective(_perspective, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewPerspective",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_perspective,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewPerspective = This method returns the current map perspective
     */
    void MapViewerControlDBusProxy::getMapViewPerspective(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapPerspective &_perspective, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment> deploy_perspective(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapPerspective,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewPerspective",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_perspective);
_perspective = deploy_perspective.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewPerspectiveAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerspectiveAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment> deploy_perspective(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapPerspective,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewPerspective",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::MapPerspective, CommonAPI::EmptyDeployment> _perspective) {
        	if (_callback)
        		_callback(_internalCallStatus, _perspective.getValue());
        },
        std::make_tuple(deploy_perspective));
    }
    /**
     * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
     *   perspectives
     */
    void MapViewerControlDBusProxy::getSupportedMapViewPerspectives(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapPerspective> &_perspectiveList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::MapPerspective>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_perspectiveList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapPerspective>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewPerspectives",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_perspectiveList);
_perspectiveList = deploy_perspectiveList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewPerspectivesAsync(GetSupportedMapViewPerspectivesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::MapPerspective>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_perspectiveList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapPerspective>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewPerspectives",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::MapPerspective>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _perspectiveList) {
        	if (_callback)
        		_callback(_internalCallStatus, _perspectiveList.getValue());
        },
        std::make_tuple(deploy_perspectiveList));
    }
    /**
     * description: setMapViewObjectVisibility = This method specifies the type of objects to show
     *   on the map.
     */
    void MapViewerControlDBusProxy::setMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t> deploy_objectVisibilityList(_objectVisibilityList, static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewObjectVisibility",
        "uua{ib}",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_objectVisibilityList,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapObjectVisibility &_objectVisibilityList, SetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t> deploy_objectVisibilityList(_objectVisibilityList, static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewObjectVisibility",
        "uua{ib}",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_objectVisibilityList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
     *   map.
     */
    void MapViewerControlDBusProxy::getMapViewObjectVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapObjectVisibility &_objectVisibilityList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t> deploy_objectVisibilityList(static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapObjectVisibility,MapViewerControl_::MapObjectVisibilityDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewObjectVisibility",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_objectVisibilityList);
_objectVisibilityList = deploy_objectVisibilityList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewObjectVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewObjectVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t> deploy_objectVisibilityList(static_cast<MapViewerControl_::MapObjectVisibilityDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapObjectVisibility,MapViewerControl_::MapObjectVisibilityDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewObjectVisibility",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::MapObjectVisibility, MapViewerControl_::MapObjectVisibilityDeployment_t> _objectVisibilityList) {
        	if (_callback)
        		_callback(_internalCallStatus, _objectVisibilityList.getValue());
        },
        std::make_tuple(deploy_objectVisibilityList));
    }
    /**
     * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
     *   visibilities.
     */
    void MapViewerControlDBusProxy::getSupportedMapViewObjectVisibilities(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapObject> &_objectVisibilityList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::MapObject>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_objectVisibilityList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapObject>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewObjectVisibilities",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_objectVisibilityList);
_objectVisibilityList = deploy_objectVisibilityList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewObjectVisibilitiesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetSupportedMapViewObjectVisibilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::MapObject>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_objectVisibilityList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapObject>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewObjectVisibilities",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::MapObject>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _objectVisibilityList) {
        	if (_callback)
        		_callback(_internalCallStatus, _objectVisibilityList.getValue());
        },
        std::make_tuple(deploy_objectVisibilityList));
    }
    /**
     * description: getScaleList = This method returns a list of supported map scales
     */
    void MapViewerControlDBusProxy::getScaleList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapScale> &_scaleList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::MapScale>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>> deploy_scaleList(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapScale>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getScaleList",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_scaleList);
_scaleList = deploy_scaleList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getScaleListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetScaleListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::MapScale>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>> deploy_scaleList(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapScale>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getScaleList",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::MapScale>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::MapScaleDeployment_t>> _scaleList) {
        	if (_callback)
        		_callback(_internalCallStatus, _scaleList.getValue());
        },
        std::make_tuple(deploy_scaleList));
    }
    /**
     * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
     */
    void MapViewerControlDBusProxy::setMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_scaleID(_scaleID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewScale",
        "uuq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_scaleID,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint16_t &_scaleID, SetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_scaleID(_scaleID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewScale",
        "uuq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_scaleID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
     *   value with respect to the currently set ScaleID
     */
    void MapViewerControlDBusProxy::setMapViewScaleByDelta(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_scaleDelta(_scaleDelta, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewScaleByDelta",
        "uun",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_scaleDelta,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewScaleByDeltaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int16_t &_scaleDelta, SetMapViewScaleByDeltaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_scaleDelta(_scaleDelta, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewScaleByDelta",
        "uun",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_scaleDelta,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
     *   the number of meters that a pixel represents
     */
    void MapViewerControlDBusProxy::setMapViewScaleByMetersPerPixel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_metersPerPixel(_metersPerPixel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewScaleByMetersPerPixel",
        "uud",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_metersPerPixel,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewScaleByMetersPerPixelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const double &_metersPerPixel, SetMapViewScaleByMetersPerPixelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_metersPerPixel(_metersPerPixel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<double, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewScaleByMetersPerPixel",
        "uud",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_metersPerPixel,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewScale = This method returns the currently used map scale
     */
    void MapViewerControlDBusProxy::getMapViewScale(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_scaleID, MapViewerControl::MapScaleType &_isMinMax, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_scaleID(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapScaleType, CommonAPI::EmptyDeployment> deploy_isMinMax(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<MapViewerControl::MapScaleType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewScale",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_scaleID, deploy_isMinMax);
_scaleID = deploy_scaleID.getValue();
_isMinMax = deploy_isMinMax.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewScaleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewScaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_scaleID(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapScaleType, CommonAPI::EmptyDeployment> deploy_isMinMax(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<MapViewerControl::MapScaleType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewScale",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _scaleID, CommonAPI::Deployable<MapViewerControl::MapScaleType, CommonAPI::EmptyDeployment> _isMinMax) {
        	if (_callback)
        		_callback(_internalCallStatus, _scaleID.getValue(), _isMinMax.getValue());
        },
        std::make_tuple(deploy_scaleID, deploy_isMinMax));
    }
    /**
     * description: setMapViewBoundingBox = This method sets the map bounding box
     */
    void MapViewerControlDBusProxy::setMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t> deploy_boundingBox(_boundingBox, static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewBoundingBox",
        "uu((dd)(dd))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_boundingBox,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, SetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t> deploy_boundingBox(_boundingBox, static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewBoundingBox",
        "uu((dd)(dd))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_boundingBox,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewBoundingBox = This method returns the bounding box of a given map
     *   instance
     */
    void MapViewerControlDBusProxy::getMapViewBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t> deploy_boundingBox(static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle,::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewBoundingBox",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_boundingBox);
_boundingBox = deploy_boundingBox.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t> deploy_boundingBox(static_cast<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle,::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewBoundingBox",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Rectangle, ::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t> _boundingBox) {
        	if (_callback)
        		_callback(_internalCallStatus, _boundingBox.getValue());
        },
        std::make_tuple(deploy_boundingBox));
    }
    /**
     * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    void MapViewerControlDBusProxy::setMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t> deploy_saveArea(_saveArea, static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewSaveArea",
        "uu(dddd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_saveArea,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapViewArea &_saveArea, SetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t> deploy_saveArea(_saveArea, static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewSaveArea",
        "uu(dddd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_saveArea,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
     *   to 
    		cover with other windows or user interface elements
     */
    void MapViewerControlDBusProxy::getMapViewSaveArea(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapViewArea &_saveArea, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t> deploy_saveArea(static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapViewArea,MapViewerControl_::MapViewAreaDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewSaveArea",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_saveArea);
_saveArea = deploy_saveArea.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewSaveAreaAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewSaveAreaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t> deploy_saveArea(static_cast<MapViewerControl_::MapViewAreaDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapViewArea,MapViewerControl_::MapViewAreaDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewSaveArea",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::MapViewArea, MapViewerControl_::MapViewAreaDeployment_t> _saveArea) {
        	if (_callback)
        		_callback(_internalCallStatus, _saveArea.getValue());
        },
        std::make_tuple(deploy_saveArea));
    }
    /**
     * description: setMapViewPan = This method pans a given map instance
     */
    void MapViewerControlDBusProxy::setMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment> deploy_panningAction(_panningAction, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(_pixelCoordinates, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewPan",
        "uuia(qq)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_panningAction, deploy_pixelCoordinates,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_panningAction, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, SetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment> deploy_panningAction(_panningAction, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(_pixelCoordinates, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewPan",
        "uuia(qq)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_panningAction, deploy_pixelCoordinates,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewPan
     */
    void MapViewerControlDBusProxy::getMapViewPan(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment> deploy_valueToReturn(_valueToReturn, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewPan",
        "ui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle, deploy_valueToReturn,
_internalCallStatus,
deploy_pixelCoordinates);
_pixelCoordinates = deploy_pixelCoordinates.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewPanAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::PanAction &_valueToReturn, GetMapViewPanAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment> deploy_valueToReturn(_valueToReturn, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::PanAction, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewPan",
        "ui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle, deploy_valueToReturn,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> _pixelCoordinates) {
        	if (_callback)
        		_callback(_internalCallStatus, _pixelCoordinates.getValue());
        },
        std::make_tuple(deploy_pixelCoordinates));
    }
    /**
     * description: setMapViewRotation = This method rotates the map
     */
    void MapViewerControlDBusProxy::setMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAngle(_rotationAngle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAnglePerSecond(_rotationAnglePerSecond, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewRotation",
        "uuii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_rotationAngle, deploy_rotationAnglePerSecond,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_rotationAngle, const int32_t &_rotationAnglePerSecond, SetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAngle(_rotationAngle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAnglePerSecond(_rotationAnglePerSecond, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewRotation",
        "uuii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_rotationAngle, deploy_rotationAnglePerSecond,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewRotation = This method is particularly interesting for debugging
     *   purposes
     */
    void MapViewerControlDBusProxy::getMapViewRotation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, int32_t &_rotationAngle, int32_t &_rotationAnglePerFrame, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAngle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAnglePerFrame(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewRotation",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_rotationAngle, deploy_rotationAnglePerFrame);
_rotationAngle = deploy_rotationAngle.getValue();
_rotationAnglePerFrame = deploy_rotationAnglePerFrame.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewRotationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewRotationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAngle(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> deploy_rotationAnglePerFrame(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<int32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewRotation",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _rotationAngle, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment> _rotationAnglePerFrame) {
        	if (_callback)
        		_callback(_internalCallStatus, _rotationAngle.getValue(), _rotationAnglePerFrame.getValue());
        },
        std::make_tuple(deploy_rotationAngle, deploy_rotationAnglePerFrame));
    }
    /**
     * description: setMapViewVisibilityMode = This method sets the current visibility mode
     */
    void MapViewerControlDBusProxy::setMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment> deploy_visibilityMode(_visibilityMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewVisibilityMode",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_visibilityMode,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Visibility &_visibilityMode, SetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment> deploy_visibilityMode(_visibilityMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewVisibilityMode",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_visibilityMode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewVisibilityMode = This method returns the current visibility mode
     */
    void MapViewerControlDBusProxy::getMapViewVisibilityMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Visibility &_visibilityMode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment> deploy_visibilityMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::Visibility,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewVisibilityMode",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_visibilityMode);
_visibilityMode = deploy_visibilityMode.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewVisibilityModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewVisibilityModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment> deploy_visibilityMode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::Visibility,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewVisibilityMode",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::Visibility, CommonAPI::EmptyDeployment> _visibilityMode) {
        	if (_callback)
        		_callback(_internalCallStatus, _visibilityMode.getValue());
        },
        std::make_tuple(deploy_visibilityMode));
    }
    /**
     * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
     *   mapview visibility modes
     */
    void MapViewerControlDBusProxy::getSupportedMapViewVisibilityModes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Visibility> &_visibilityModeList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::Visibility>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_visibilityModeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Visibility>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewVisibilityModes",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_visibilityModeList);
_visibilityModeList = deploy_visibilityModeList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewVisibilityModesAsync(GetSupportedMapViewVisibilityModesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::Visibility>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_visibilityModeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Visibility>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewVisibilityModes",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::Visibility>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _visibilityModeList) {
        	if (_callback)
        		_callback(_internalCallStatus, _visibilityModeList.getValue());
        },
        std::make_tuple(deploy_visibilityModeList));
    }
    /**
     * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
     *   map instance
     */
    void MapViewerControlDBusProxy::setMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment> deploy_performanceLevel(_performanceLevel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewPerformanceLevel",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_performanceLevel,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Level &_performanceLevel, SetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment> deploy_performanceLevel(_performanceLevel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewPerformanceLevel",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_performanceLevel,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
     *   given map instance
     */
    void MapViewerControlDBusProxy::getMapViewPerformanceLevel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::Level &_performanceLevel, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment> deploy_performanceLevel(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::Level,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewPerformanceLevel",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_performanceLevel);
_performanceLevel = deploy_performanceLevel.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewPerformanceLevelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewPerformanceLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment> deploy_performanceLevel(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::Level,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewPerformanceLevel",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::Level, CommonAPI::EmptyDeployment> _performanceLevel) {
        	if (_callback)
        		_callback(_internalCallStatus, _performanceLevel.getValue());
        },
        std::make_tuple(deploy_performanceLevel));
    }
    /**
     * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
     *   perfomance levels
     */
    void MapViewerControlDBusProxy::getSupportedMapViewPerformanceLevels(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Level> &_performanceLevelList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::Level>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_performanceLevelList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Level>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewPerformanceLevels",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_performanceLevelList);
_performanceLevelList = deploy_performanceLevelList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewPerformanceLevelsAsync(GetSupportedMapViewPerformanceLevelsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::Level>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_performanceLevelList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Level>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewPerformanceLevels",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::Level>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _performanceLevelList) {
        	if (_callback)
        		_callback(_internalCallStatus, _performanceLevelList.getValue());
        },
        std::make_tuple(deploy_performanceLevelList));
    }
    /**
     * description: displayRoute = This method visualizes one of the calculated routes
     */
    void MapViewerControlDBusProxy::displayRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highlighted(_highlighted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "displayRoute",
        "uuub",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_routeHandle, deploy_highlighted,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::displayRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_highlighted, DisplayRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highlighted(_highlighted, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "displayRoute",
        "uuub",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_routeHandle, deploy_highlighted,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: hideRoute = This method hides one of the visible routes
     */
    void MapViewerControlDBusProxy::hideRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "hideRoute",
        "uuu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_routeHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::hideRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, HideRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_routeHandle(_routeHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "hideRoute",
        "uuu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_routeHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getDisplayedRoutes = This method returns a list of displayed routes
     */
    void MapViewerControlDBusProxy::getDisplayedRoutes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::DisplayedRoute> &_displayedRoutes, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>> deploy_displayedRoutes(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::DisplayedRoute>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getDisplayedRoutes",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_displayedRoutes);
_displayedRoutes = deploy_displayedRoutes.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getDisplayedRoutesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedRoutesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>> deploy_displayedRoutes(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::DisplayedRoute>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getDisplayedRoutes",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::DisplayedRoute>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::DisplayedRouteDeployment_t>> _displayedRoutes) {
        	if (_callback)
        		_callback(_internalCallStatus, _displayedRoutes.getValue());
        },
        std::make_tuple(deploy_displayedRoutes));
    }
    /**
     * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
     */
    void MapViewerControlDBusProxy::getPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getPoiCategoriesVisible",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_poiCategoryIds);
_poiCategoryIds = deploy_poiCategoryIds.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getPoiCategoriesVisible",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _poiCategoryIds) {
        	if (_callback)
        		_callback(_internalCallStatus, _poiCategoryIds.getValue());
        },
        std::make_tuple(deploy_poiCategoryIds));
    }
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map.
                       Any specified category that until now
     *   was displayed with scale limits is now displayed without limits.
     */
    void MapViewerControlDBusProxy::setPoiCategoriesVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(_poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setPoiCategoriesVisible",
        "uuau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_poiCategoryIds,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setPoiCategoriesVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(_poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setPoiCategoriesVisible",
        "uuau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_poiCategoryIds,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
     *   displayed on the map, where the POI's are only displayed in a specific range
     *   of scales.
                       Any specified category that until now was
     *   displayed without scale limits is now displayed with limits.
     */
    void MapViewerControlDBusProxy::setPoiCategoriesVisibleWithinLimits(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(_poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_minScaleID(_minScaleID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_maxScaleID(_maxScaleID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setPoiCategoriesVisibleWithinLimits",
        "uuauyy",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_poiCategoryIds, deploy_minScaleID, deploy_maxScaleID,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setPoiCategoriesVisibleWithinLimitsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const uint8_t &_minScaleID, const uint8_t &_maxScaleID, SetPoiCategoriesVisibleWithinLimitsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(_poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_minScaleID(_minScaleID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_maxScaleID(_maxScaleID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setPoiCategoriesVisibleWithinLimits",
        "uuauyy",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_poiCategoryIds, deploy_minScaleID, deploy_maxScaleID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
     *   categories displayed on the map.
     */
    void MapViewerControlDBusProxy::setPoiCategoriesNotVisible(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(_poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setPoiCategoriesNotVisible",
        "uuau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_poiCategoryIds,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setPoiCategoriesNotVisibleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, SetPoiCategoriesNotVisibleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoryIds(_poiCategoryIds, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setPoiCategoriesNotVisible",
        "uuau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_poiCategoryIds,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
     *   map.
     */
    void MapViewerControlDBusProxy::setTrafficIncidentsVisibility(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_visible(_visible, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setTrafficIncidentsVisibility",
        "uub",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_visible,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setTrafficIncidentsVisibilityAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_visible, SetTrafficIncidentsVisibilityAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_visible(_visible, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setTrafficIncidentsVisibility",
        "uub",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_visible,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: setMapViewTheme = This method configures the theme of a given map view instance
     */
    void MapViewerControlDBusProxy::setMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment> deploy_mapViewTheme(_mapViewTheme, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setMapViewTheme",
        "uui",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_mapViewTheme,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::setMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::MapTheme &_mapViewTheme, SetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment> deploy_mapViewTheme(_mapViewTheme, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setMapViewTheme",
        "uui",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_mapViewTheme,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getMapViewTheme = This method returns the current theme of a given map view
     *   instance
     */
    void MapViewerControlDBusProxy::getMapViewTheme(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::MapTheme &_mapViewTheme, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment> deploy_mapViewTheme(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapTheme,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMapViewTheme",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_mapViewTheme);
_mapViewTheme = deploy_mapViewTheme.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getMapViewThemeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetMapViewThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment> deploy_mapViewTheme(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::MapTheme,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMapViewTheme",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::MapTheme, CommonAPI::EmptyDeployment> _mapViewTheme) {
        	if (_callback)
        		_callback(_internalCallStatus, _mapViewTheme.getValue());
        },
        std::make_tuple(deploy_mapViewTheme));
    }
    /**
     * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
     */
    void MapViewerControlDBusProxy::getSupportedMapViewThemes(CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::MapTheme> &_mapViewThemeList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::MapTheme>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_mapViewThemeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapTheme>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedMapViewThemes",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_mapViewThemeList);
_mapViewThemeList = deploy_mapViewThemeList.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getSupportedMapViewThemesAsync(GetSupportedMapViewThemesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<MapViewerControl::MapTheme>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_mapViewThemeList(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::MapTheme>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedMapViewThemes",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::MapTheme>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _mapViewThemeList) {
        	if (_callback)
        		_callback(_internalCallStatus, _mapViewThemeList.getValue());
        },
        std::make_tuple(deploy_mapViewThemeList));
    }
    /**
     * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
     *   geographical coordinates
     */
    void MapViewerControlDBusProxy::convertPixelCoordsToGeoCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(_pixelCoordinates, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>> deploy_geoCoordinates(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "convertPixelCoordsToGeoCoords",
        "uua(qq)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_pixelCoordinates,
_internalCallStatus,
deploy_geoCoordinates);
_geoCoordinates = deploy_geoCoordinates.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::convertPixelCoordsToGeoCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::Pixel> &_pixelCoordinates, ConvertPixelCoordsToGeoCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(_pixelCoordinates, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>> deploy_geoCoordinates(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "convertPixelCoordsToGeoCoords",
        "uua(qq)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_pixelCoordinates,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>> _geoCoordinates) {
        	if (_callback)
        		_callback(_internalCallStatus, _geoCoordinates.getValue());
        },
        std::make_tuple(deploy_geoCoordinates));
    }
    /**
     * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
     *   into pixel coordinates
     */
    void MapViewerControlDBusProxy::convertGeoCoordsToPixelCoords(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::Pixel> &_pixelCoordinates, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>> deploy_geoCoordinates(_geoCoordinates, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "convertGeoCoordsToPixelCoords",
        "uua(dd)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_geoCoordinates,
_internalCallStatus,
deploy_pixelCoordinates);
_pixelCoordinates = deploy_pixelCoordinates.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::convertGeoCoordsToPixelCoordsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> &_geoCoordinates, ConvertGeoCoordsToPixelCoordsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>> deploy_geoCoordinates(_geoCoordinates, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> deploy_pixelCoordinates(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::Coordinate2DDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "convertGeoCoordsToPixelCoords",
        "uua(dd)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_geoCoordinates,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::Pixel>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::PixelDeployment_t>> _pixelCoordinates) {
        	if (_callback)
        		_callback(_internalCallStatus, _pixelCoordinates.getValue());
        },
        std::make_tuple(deploy_pixelCoordinates));
    }
    /**
     * description: displayCustomElements = This method visualizes a set of custom elements on the
     *   map
     */
    void MapViewerControlDBusProxy::displayCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::CustomElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>> deploy_customElements(_customElements, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_customElemenHandles(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<MapViewerControl::CustomElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "displayCustomElements",
        "uua(ss(dd)(nn))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_customElements,
_internalCallStatus,
deploy_customElemenHandles);
_customElemenHandles = deploy_customElemenHandles.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::displayCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<MapViewerControl::CustomElement> &_customElements, DisplayCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::CustomElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>> deploy_customElements(_customElements, static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_customElemenHandles(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<MapViewerControl::CustomElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::CustomElementDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "displayCustomElements",
        "uua(ss(dd)(nn))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_customElements,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _customElemenHandles) {
        	if (_callback)
        		_callback(_internalCallStatus, _customElemenHandles.getValue());
        },
        std::make_tuple(deploy_customElemenHandles));
    }
    /**
     * description: hideCustomElements = This method hides a set of custom elements which were
     *   visualized by DisplayCustomElements
     */
    void MapViewerControlDBusProxy::hideCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_customElemenHandles(_customElemenHandles, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "hideCustomElements",
        "uuau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_customElemenHandles,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::hideCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_customElemenHandles, HideCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_sessionHandle(_sessionHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_customElemenHandles(_customElemenHandles, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "hideCustomElements",
        "uuau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionHandle, deploy_mapViewInstanceHandle, deploy_customElemenHandles,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: getDisplayedCustomElements = This method retrieves the visualized custom
     *   elements on the map
     */
    void MapViewerControlDBusProxy::getDisplayedCustomElements(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, CommonAPI::CallStatus &_internalCallStatus, MapViewerControl::tCustomElementDict &_customElements, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::tCustomElementDict, MapViewerControl_::tCustomElementDictDeployment_t> deploy_customElements(static_cast<MapViewerControl_::tCustomElementDictDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::tCustomElementDict,MapViewerControl_::tCustomElementDictDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getDisplayedCustomElements",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle,
_internalCallStatus,
deploy_customElements);
_customElements = deploy_customElements.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::getDisplayedCustomElementsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, GetDisplayedCustomElementsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::tCustomElementDict, MapViewerControl_::tCustomElementDictDeployment_t> deploy_customElements(static_cast<MapViewerControl_::tCustomElementDictDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<MapViewerControl::tCustomElementDict,MapViewerControl_::tCustomElementDictDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getDisplayedCustomElements",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<MapViewerControl::tCustomElementDict, MapViewerControl_::tCustomElementDictDeployment_t> _customElements) {
        	if (_callback)
        		_callback(_internalCallStatus, _customElements.getValue());
        },
        std::make_tuple(deploy_customElements));
    }
    /**
     * description: selectElementsOnMap = This method selects elements on the map view which are at
     *   the position specified by user input
     */
    void MapViewerControlDBusProxy::selectElementsOnMap(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, CommonAPI::CallStatus &_internalCallStatus, std::vector<MapViewerControl::SelectedMapElement> &_selectedElements, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Pixel, MapViewerControl_::PixelDeployment_t> deploy_pixelCoordinate(_pixelCoordinate, static_cast<MapViewerControl_::PixelDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::SelectableMapType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_selectableTypes(_selectableTypes, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxNumberOfSelectedElements(_maxNumberOfSelectedElements, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::SelectedMapElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>> deploy_selectedElements(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Pixel, MapViewerControl_::PixelDeployment_t >,
            CommonAPI::Deployable<std::vector<MapViewerControl::SelectableMapType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::SelectedMapElement>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "selectElementsOnMap",
        "u(qq)aiq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_mapViewInstanceHandle, deploy_pixelCoordinate, deploy_selectableTypes, deploy_maxNumberOfSelectedElements,
_internalCallStatus,
deploy_selectedElements);
_selectedElements = deploy_selectedElements.getValue();
}
    std::future<CommonAPI::CallStatus> MapViewerControlDBusProxy::selectElementsOnMapAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const MapViewerControl::Pixel &_pixelCoordinate, const std::vector<MapViewerControl::SelectableMapType> &_selectableTypes, const uint16_t &_maxNumberOfSelectedElements, SelectElementsOnMapAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_mapViewInstanceHandle(_mapViewInstanceHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<MapViewerControl::Pixel, MapViewerControl_::PixelDeployment_t> deploy_pixelCoordinate(_pixelCoordinate, static_cast<MapViewerControl_::PixelDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::SelectableMapType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_selectableTypes(_selectableTypes, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxNumberOfSelectedElements(_maxNumberOfSelectedElements, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<MapViewerControl::SelectedMapElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>> deploy_selectedElements(static_cast<CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<MapViewerControl::Pixel, MapViewerControl_::PixelDeployment_t >,
            CommonAPI::Deployable<std::vector<MapViewerControl::SelectableMapType>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<MapViewerControl::SelectedMapElement>,CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "selectElementsOnMap",
        "u(qq)aiq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_mapViewInstanceHandle, deploy_pixelCoordinate, deploy_selectableTypes, deploy_maxNumberOfSelectedElements,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<MapViewerControl::SelectedMapElement>, CommonAPI::DBus::ArrayDeployment<MapViewerControl_::SelectedMapElementDeployment_t>> _selectedElements) {
        	if (_callback)
        		_callback(_internalCallStatus, _selectedElements.getValue());
        },
        std::make_tuple(deploy_selectedElements));
    }


void MapViewerControlDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace mapviewer
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
