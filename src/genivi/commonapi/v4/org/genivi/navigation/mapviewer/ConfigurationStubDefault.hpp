/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the map viewer configuration
 *   functionality of a navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Configuration_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Configuration_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/mapviewer/ConfigurationStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

/**
 * Provides a default implementation for ConfigurationStubRemoteEvent and
 * ConfigurationStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class ConfigurationStubDefault
    : public virtual ConfigurationStub {
public:
    ConfigurationStubDefault();

    ConfigurationStubRemoteEvent* initStubAdapter(const std::shared_ptr<ConfigurationStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: This method returns the API version .
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply);
    /**
     * description: Set the current language set. If the language is not supported, the default
     *   details will be returned in the native language.
     */
    virtual void setLocale(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _languageCode, std::string _countryCode, std::string _scriptCode, setLocaleReply_t _reply);
    /**
     * description: Get the current language set .
     */
    virtual void getLocale(const std::shared_ptr<CommonAPI::ClientId> _client, getLocaleReply_t _reply);
    /**
     * description: Get the supported set of locales .
     */
    virtual void getSupportedLocales(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedLocalesReply_t _reply);
    /**
     * description: Set the time format.
     */
    virtual void setTimeFormat(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::TimeFormat _format, setTimeFormatReply_t _reply);
    /**
     * description: Get the current time format .
     */
    virtual void getTimeFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getTimeFormatReply_t _reply);
    /**
     * description: Get the supported set of time format .
     */
    virtual void getSupportedTimeFormats(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedTimeFormatsReply_t _reply);
    /**
     * description: Set the coordinates format.
     */
    virtual void setCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, Configuration::CoordinatesFormat _coordinatesFormat, setCoordinatesFormatReply_t _reply);
    /**
     * description: Get the coordinates format .
     */
    virtual void getCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getCoordinatesFormatReply_t _reply);
    /**
     * description: Get the supported set of coordinates format .
     */
    virtual void getSupportedCoordinatesFormat(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedCoordinatesFormatReply_t _reply);
    /**
     * description: Set the units of measurement .
     */
    virtual void setUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, Configuration::UnitsOfMeasurement _unitsOfMeasurement, setUnitsOfMeasurementReply_t _reply);
    /**
     * description: Get the units of measurement .
     */
    virtual void getUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, getUnitsOfMeasurementReply_t _reply);
    /**
     * description: Get the supported set of units of measurement .
     */
    virtual void getSupportedUnitsOfMeasurement(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedUnitsOfMeasurementReply_t _reply);

/**
 * description: ConfigurationChanged = This signal is sent to the clients when one or more
 *   configuration settings changes
 */
virtual void fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::mapviewer::Configuration::Settings> &_changedSettings);


protected:
    class RemoteEventHandler: public virtual ConfigurationStubRemoteEvent {
    public:
        RemoteEventHandler(ConfigurationStubDefault *_defaultStub);


    private:
        ConfigurationStubDefault *defaultStub_;
    };
private:
    ConfigurationStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_MAPVIEWER_Configuration_STUB_DEFAULT
