/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/mapviewer/MapViewerControlStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace mapviewer {

MapViewerControlStubDefault::MapViewerControlStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(MapViewerControl::getInterfaceVersion()) {
}

const CommonAPI::Version& MapViewerControlStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

MapViewerControlStubRemoteEvent* MapViewerControlStubDefault::initStubAdapter(const std::shared_ptr<MapViewerControlStubAdapter> &_adapter) {
    CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
void MapViewerControlStubDefault::getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::Version version = {};
    _reply(version);
}

/**
 * description: createMapViewInstance = This method creates a new map instance
 */
void MapViewerControlStubDefault::createMapViewInstance(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, MapViewerControl::Dimension _mapViewSize, MapViewerControl::MapViewType _mapViewType, createMapViewInstanceReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewSize;
    (void) _mapViewType;
    ::v4::org::genivi::navigation::NavigationTypes::Handle mapViewInstanceHandle = 0ul;
    _reply(mapViewInstanceHandle);
}

/**
 * description: releaseMapViewInstance = This method releases (i.e. destroys) a given map
 *   instance. Only invisible map instances can be released
 */
void MapViewerControlStubDefault::releaseMapViewInstance(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, releaseMapViewInstanceReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    _reply();
}

/**
 * description: getMapViewType = This method returns the map type of a map instance as it was
 *   set using CreateMapViewInstance
 */
void MapViewerControlStubDefault::getMapViewType(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewTypeReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::MapViewType mapViewType = MapViewerControl::MapViewType::MAIN_MAP;
    if (!mapViewType.validate()) {
        return;
    }
    _reply(mapViewType);
}

/**
 * description: getSupportedMapViewTypes = This method retrieves the supported map view types
 */
void MapViewerControlStubDefault::getSupportedMapViewTypes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewTypesReply_t _reply) {
    (void)_client;
    std::vector<MapViewerControl::MapViewType> mapViewTypeList = {};
    _reply(mapViewTypeList);
}

/**
 * description: setTargetPoint = This method sets the position of the point the camera is
 *   always aimed at
 */
void MapViewerControlStubDefault::setTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _targetPoint, setTargetPointReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _targetPoint;
    _reply();
}

/**
 * description: getTargetPoint = This method retrieves the target point position
 */
void MapViewerControlStubDefault::getTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getTargetPointReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D targetPoint = {};
    _reply(targetPoint);
}

/**
 * description: setFollowCarMode = This method sets the FollowCar mode
 */
void MapViewerControlStubDefault::setFollowCarMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, bool _followCarMode, setFollowCarModeReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _followCarMode;
    _reply();
}

/**
 * description: getFollowCarMode = This method returns the current FollowCar-mode
 */
void MapViewerControlStubDefault::getFollowCarMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getFollowCarModeReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    bool followCarMode = false;
    _reply(followCarMode);
}

/**
 * description: setCameraPosition = This method sets the coordinates of the point at which the
 *   camera must be positioned
		Note: the camera heading will be automatically set
 *   in such a way, that the camera is aimed at the view point
 */
void MapViewerControlStubDefault::setCameraPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _position, setCameraPositionReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _position;
    _reply();
}

/**
 * description: getCameraPosition = This method returns the coordinates of the point at which
 *   the camera is positioned
 */
void MapViewerControlStubDefault::getCameraPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraPositionReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D position = {};
    _reply(position);
}

/**
 * description: setCameraHeadingAngle = This method sets the map view heading angle
		Note: the
 *   camera position will be automatically set in such a way, that it looks at the
 *   currently selected target point
 */
void MapViewerControlStubDefault::setCameraHeadingAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _heading, setCameraHeadingAngleReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _heading;
    _reply();
}

/**
 * description: setCameraHeadingToTarget = This method sets the camera heading in such a way,
 *   that the camera always looks at a given target
 */
void MapViewerControlStubDefault::setCameraHeadingToTarget(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D _target, setCameraHeadingToTargetReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _target;
    _reply();
}

/**
 * description: setCameraHeadingTrackUp = This method sets the camera heading in such a way,
 *   that the camera always looks in the direction in which the car is moving
 */
void MapViewerControlStubDefault::setCameraHeadingTrackUp(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, setCameraHeadingTrackUpReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    _reply();
}

/**
 * description: getCameraHeading = This method returns the current camera heading
 */
void MapViewerControlStubDefault::getCameraHeading(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraHeadingReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::HeadingType headingType = MapViewerControl::HeadingType::CONSTANT_ANGLE;
    int32_t headingAngle = 0;
    ::v4::org::genivi::navigation::NavigationTypes::Coordinate2D target = {};
    if (!headingType.validate()) {
        return;
    }
    _reply(headingType, headingAngle, target);
}

/**
 * description: setCameraTiltAngle = This method sets the camera tilt angle
 */
void MapViewerControlStubDefault::setCameraTiltAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _tilt, setCameraTiltAngleReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _tilt;
    _reply();
}

/**
 * description: getCameraTiltAngle = This method returns the camera tilt angle
 */
void MapViewerControlStubDefault::getCameraTiltAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraTiltAngleReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    int32_t tilt = 0;
    _reply(tilt);
}

/**
 * description: setCameraRollAngle = This method sets the camera roll angle
 */
void MapViewerControlStubDefault::setCameraRollAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _roll, setCameraRollAngleReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _roll;
    _reply();
}

/**
 * description: getCameraRollAngle = This method returns the camera roll angle
 */
void MapViewerControlStubDefault::getCameraRollAngle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraRollAngleReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    int32_t roll = 0;
    _reply(roll);
}

/**
 * description: setCameraDistanceFromTargetPoint = This method sets the mode and the camera
 *   distance from the target point
 */
void MapViewerControlStubDefault::setCameraDistanceFromTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, uint32_t _distance, setCameraDistanceFromTargetPointReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _distance;
    _reply();
}

/**
 * description: getCameraDistanceFromTargetPoint = This method gets the mode and the camera
 *   distance from the target point
 */
void MapViewerControlStubDefault::getCameraDistanceFromTargetPoint(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraDistanceFromTargetPointReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    uint32_t distance = 0ul;
    _reply(distance);
}

/**
 * description: setMapViewScaleMode = This method sets the scaling mode.
 */
void MapViewerControlStubDefault::setMapViewScaleMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapScaleMode _scaleMode, setMapViewScaleModeReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _scaleMode;
    _reply();
}

/**
 * description: getMapViewScaleMode = This method gets the scaling mode.
 */
void MapViewerControlStubDefault::getMapViewScaleMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewScaleModeReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::MapScaleMode scaleMode = MapViewerControl::MapScaleMode::AUTOMATIC;
    if (!scaleMode.validate()) {
        return;
    }
    _reply(scaleMode);
}

/**
 * description: getSupportedMapViewScaleModes = This method gets the supported scaling modes.
 */
void MapViewerControlStubDefault::getSupportedMapViewScaleModes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getSupportedMapViewScaleModesReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    std::vector<MapViewerControl::MapScaleMode> scaleModeList = {};
    _reply(scaleModeList);
}

/**
 * description: addMapViewScaleChangedListener = This method adds a listener which is notified
 *   when map view scale changes.
 */
void MapViewerControlStubDefault::addMapViewScaleChangedListener(const std::shared_ptr<CommonAPI::ClientId> _client, addMapViewScaleChangedListenerReply_t _reply) {
    (void)_client;
    _reply();
}

/**
 * description: removeMapViewScaleChangedListener = This method removes a listener which is
 *   notified when map view scale changes.
 */
void MapViewerControlStubDefault::removeMapViewScaleChangedListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeMapViewScaleChangedListenerReply_t _reply) {
    (void)_client;
    _reply();
}

/**
 * description: setCameraHeight = This method sets the camera height
 */
void MapViewerControlStubDefault::setCameraHeight(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, uint32_t _height, setCameraHeightReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _height;
    _reply();
}

/**
 * description: getCameraHeight = This method gets the camera height
 */
void MapViewerControlStubDefault::getCameraHeight(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getCameraHeightReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    uint32_t height = 0ul;
    _reply(height);
}

/**
 * description: setMapViewPerspective = This method sets the map perspective
 */
void MapViewerControlStubDefault::setMapViewPerspective(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapPerspective _perspective, setMapViewPerspectiveReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _perspective;
    _reply();
}

/**
 * description: getMapViewPerspective = This method returns the current map perspective
 */
void MapViewerControlStubDefault::getMapViewPerspective(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewPerspectiveReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::MapPerspective perspective = MapViewerControl::MapPerspective::PERSPECTIVE_2D;
    if (!perspective.validate()) {
        return;
    }
    _reply(perspective);
}

/**
 * description: getSupportedMapViewPerspectives = This method retrieves the supported mapview
 *   perspectives
 */
void MapViewerControlStubDefault::getSupportedMapViewPerspectives(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewPerspectivesReply_t _reply) {
    (void)_client;
    std::vector<MapViewerControl::MapPerspective> perspectiveList = {};
    _reply(perspectiveList);
}

/**
 * description: setMapViewObjectVisibility = This method specifies the type of objects to show
 *   on the map.
 */
void MapViewerControlStubDefault::setMapViewObjectVisibility(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapObjectVisibility _objectVisibilityList, setMapViewObjectVisibilityReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _objectVisibilityList;
    _reply();
}

/**
 * description: getMapViewObjectVisibility = This method gets the type of objects shown on the
 *   map.
 */
void MapViewerControlStubDefault::getMapViewObjectVisibility(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewObjectVisibilityReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::MapObjectVisibility objectVisibilityList;
    _reply(objectVisibilityList);
}

/**
 * description: getSupportedMapViewObjectVisibilities = This method gets the supported object
 *   visibilities.
 */
void MapViewerControlStubDefault::getSupportedMapViewObjectVisibilities(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getSupportedMapViewObjectVisibilitiesReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    std::vector<MapViewerControl::MapObject> objectVisibilityList = {};
    _reply(objectVisibilityList);
}

/**
 * description: getScaleList = This method returns a list of supported map scales
 */
void MapViewerControlStubDefault::getScaleList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getScaleListReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    std::vector<MapViewerControl::MapScale> scaleList = {};
    _reply(scaleList);
}

/**
 * description: setMapViewScale = This method sets the map scale by specifying a ScaleID
 */
void MapViewerControlStubDefault::setMapViewScale(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, uint16_t _scaleID, setMapViewScaleReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _scaleID;
    _reply();
}

/**
 * description: setMapViewScaleByDelta = This method sets the map scale by specifying a delta
 *   value with respect to the currently set ScaleID
 */
void MapViewerControlStubDefault::setMapViewScaleByDelta(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int16_t _scaleDelta, setMapViewScaleByDeltaReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _scaleDelta;
    _reply();
}

/**
 * description: setMapViewScaleByMetersPerPixel = This method sets the map scale by specifying
 *   the number of meters that a pixel represents
 */
void MapViewerControlStubDefault::setMapViewScaleByMetersPerPixel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, double _metersPerPixel, setMapViewScaleByMetersPerPixelReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _metersPerPixel;
    _reply();
}

/**
 * description: getMapViewScale = This method returns the currently used map scale
 */
void MapViewerControlStubDefault::getMapViewScale(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewScaleReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    uint8_t scaleID = 0u;
    MapViewerControl::MapScaleType isMinMax = MapViewerControl::MapScaleType::MIN;
    if (!isMinMax.validate()) {
        return;
    }
    _reply(scaleID, isMinMax);
}

/**
 * description: setMapViewBoundingBox = This method sets the map bounding box
 */
void MapViewerControlStubDefault::setMapViewBoundingBox(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Rectangle _boundingBox, setMapViewBoundingBoxReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _boundingBox;
    _reply();
}

/**
 * description: getMapViewBoundingBox = This method returns the bounding box of a given map
 *   instance
 */
void MapViewerControlStubDefault::getMapViewBoundingBox(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewBoundingBoxReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    ::v4::org::genivi::navigation::NavigationTypes::Rectangle boundingBox = {};
    _reply(boundingBox);
}

/**
 * description: setMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */
void MapViewerControlStubDefault::setMapViewSaveArea(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapViewArea _saveArea, setMapViewSaveAreaReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _saveArea;
    _reply();
}

/**
 * description: getMapViewSaveArea = This methods defines the area that the HMI guarantees not
 *   to 
		cover with other windows or user interface elements
 */
void MapViewerControlStubDefault::getMapViewSaveArea(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewSaveAreaReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::MapViewArea saveArea = {};
    _reply(saveArea);
}

/**
 * description: setMapViewPan = This method pans a given map instance
 */
void MapViewerControlStubDefault::setMapViewPan(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::PanAction _panningAction, std::vector<MapViewerControl::Pixel> _pixelCoordinates, setMapViewPanReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _panningAction;
    (void) _pixelCoordinates;
    _reply();
}

/**
 * description: getMapViewPan
 */
void MapViewerControlStubDefault::getMapViewPan(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::PanAction _valueToReturn, getMapViewPanReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    (void) _valueToReturn;
    std::vector<MapViewerControl::Pixel> pixelCoordinates = {};
    _reply(pixelCoordinates);
}

/**
 * description: setMapViewRotation = This method rotates the map
 */
void MapViewerControlStubDefault::setMapViewRotation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, int32_t _rotationAngle, int32_t _rotationAnglePerSecond, setMapViewRotationReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _rotationAngle;
    (void) _rotationAnglePerSecond;
    _reply();
}

/**
 * description: getMapViewRotation = This method is particularly interesting for debugging
 *   purposes
 */
void MapViewerControlStubDefault::getMapViewRotation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewRotationReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    int32_t rotationAngle = 0;
    int32_t rotationAnglePerFrame = 0;
    _reply(rotationAngle, rotationAnglePerFrame);
}

/**
 * description: setMapViewVisibilityMode = This method sets the current visibility mode
 */
void MapViewerControlStubDefault::setMapViewVisibilityMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::Visibility _visibilityMode, setMapViewVisibilityModeReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _visibilityMode;
    _reply();
}

/**
 * description: getMapViewVisibilityMode = This method returns the current visibility mode
 */
void MapViewerControlStubDefault::getMapViewVisibilityMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewVisibilityModeReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::Visibility visibilityMode = MapViewerControl::Visibility::VISIBLE;
    if (!visibilityMode.validate()) {
        return;
    }
    _reply(visibilityMode);
}

/**
 * description: getSupportedMapViewVisibilityModes = This method retrieves the supported
 *   mapview visibility modes
 */
void MapViewerControlStubDefault::getSupportedMapViewVisibilityModes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewVisibilityModesReply_t _reply) {
    (void)_client;
    std::vector<MapViewerControl::Visibility> visibilityModeList = {};
    _reply(visibilityModeList);
}

/**
 * description: setMapViewPerformanceLevel = This method sets the perfomance level of a given
 *   map instance
 */
void MapViewerControlStubDefault::setMapViewPerformanceLevel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::Level _performanceLevel, setMapViewPerformanceLevelReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _performanceLevel;
    _reply();
}

/**
 * description: getMapViewPerformanceLevel = This method returns the perfomance level of a
 *   given map instance
 */
void MapViewerControlStubDefault::getMapViewPerformanceLevel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewPerformanceLevelReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::Level performanceLevel = MapViewerControl::Level::LEVEL_1;
    if (!performanceLevel.validate()) {
        return;
    }
    _reply(performanceLevel);
}

/**
 * description: getSupportedMapViewPerformanceLevels = This method retrieves the supported
 *   perfomance levels
 */
void MapViewerControlStubDefault::getSupportedMapViewPerformanceLevels(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewPerformanceLevelsReply_t _reply) {
    (void)_client;
    std::vector<MapViewerControl::Level> performanceLevelList = {};
    _reply(performanceLevelList);
}

/**
 * description: displayRoute = This method visualizes one of the calculated routes
 */
void MapViewerControlStubDefault::displayRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, bool _highlighted, displayRouteReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _routeHandle;
    (void) _highlighted;
    _reply();
}

/**
 * description: hideRoute = This method hides one of the visible routes
 */
void MapViewerControlStubDefault::hideRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, hideRouteReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _routeHandle;
    _reply();
}

/**
 * description: getDisplayedRoutes = This method returns a list of displayed routes
 */
void MapViewerControlStubDefault::getDisplayedRoutes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getDisplayedRoutesReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    std::vector<MapViewerControl::DisplayedRoute> displayedRoutes = {};
    _reply(displayedRoutes);
}

/**
 * description: getPoiCategoriesVisible = Get the set of POI categories displayed on the map.
 */
void MapViewerControlStubDefault::getPoiCategoriesVisible(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getPoiCategoriesVisibleReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    std::vector<::v4::org::genivi::CommonTypes::CategoryID> poiCategoryIds = {};
    _reply(poiCategoryIds);
}

/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map.
                   Any specified category that until now
 *   was displayed with scale limits is now displayed without limits.
 */
void MapViewerControlStubDefault::setPoiCategoriesVisible(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds, setPoiCategoriesVisibleReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _poiCategoryIds;
    _reply();
}

/**
 * description: setPoiCategoriesVisible = Add POI categories to the set of POI categories
 *   displayed on the map, where the POI's are only displayed in a specific range
 *   of scales.
                   Any specified category that until now was
 *   displayed without scale limits is now displayed with limits.
 */
void MapViewerControlStubDefault::setPoiCategoriesVisibleWithinLimits(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds, uint8_t _minScaleID, uint8_t _maxScaleID, setPoiCategoriesVisibleWithinLimitsReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _poiCategoryIds;
    (void) _minScaleID;
    (void) _maxScaleID;
    _reply();
}

/**
 * description: setPoiCategoriesNotVisible = Remove POI categories from the set of POI
 *   categories displayed on the map.
 */
void MapViewerControlStubDefault::setPoiCategoriesNotVisible(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoryIds, setPoiCategoriesNotVisibleReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _poiCategoryIds;
    _reply();
}

/**
 * description: setTrafficIncidentsVisibility = Set the visibility of Traffic Incidents on the
 *   map.
 */
void MapViewerControlStubDefault::setTrafficIncidentsVisibility(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, bool _visible, setTrafficIncidentsVisibilityReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _visible;
    _reply();
}

/**
 * description: setMapViewTheme = This method configures the theme of a given map view instance
 */
void MapViewerControlStubDefault::setMapViewTheme(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::MapTheme _mapViewTheme, setMapViewThemeReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _mapViewTheme;
    _reply();
}

/**
 * description: getMapViewTheme = This method returns the current theme of a given map view
 *   instance
 */
void MapViewerControlStubDefault::getMapViewTheme(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getMapViewThemeReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::MapTheme mapViewTheme = MapViewerControl::MapTheme::THEME_1;
    if (!mapViewTheme.validate()) {
        return;
    }
    _reply(mapViewTheme);
}

/**
 * description: getSupportedMapViewThemes = This method retrieves the supported mapview themes
 */
void MapViewerControlStubDefault::getSupportedMapViewThemes(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedMapViewThemesReply_t _reply) {
    (void)_client;
    std::vector<MapViewerControl::MapTheme> mapViewThemeList = {};
    _reply(mapViewThemeList);
}

/**
 * description: convertPixelCoordsToGeoCoords = This method converts pixel coordinates to
 *   geographical coordinates
 */
void MapViewerControlStubDefault::convertPixelCoordsToGeoCoords(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<MapViewerControl::Pixel> _pixelCoordinates, convertPixelCoordsToGeoCoordsReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _pixelCoordinates;
    std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> geoCoordinates = {};
    _reply(geoCoordinates);
}

/**
 * description: convertGeoCoordsToPixelCoords = This method converts geographical coordinates
 *   into pixel coordinates
 */
void MapViewerControlStubDefault::convertGeoCoordsToPixelCoords(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Coordinate2D> _geoCoordinates, convertGeoCoordsToPixelCoordsReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _geoCoordinates;
    std::vector<MapViewerControl::Pixel> pixelCoordinates = {};
    _reply(pixelCoordinates);
}

/**
 * description: displayCustomElements = This method visualizes a set of custom elements on the
 *   map
 */
void MapViewerControlStubDefault::displayCustomElements(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<MapViewerControl::CustomElement> _customElements, displayCustomElementsReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _customElements;
    std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> customElemenHandles = {};
    _reply(customElemenHandles);
}

/**
 * description: hideCustomElements = This method hides a set of custom elements which were
 *   visualized by DisplayCustomElements
 */
void MapViewerControlStubDefault::hideCustomElements(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _customElemenHandles, hideCustomElementsReply_t _reply) {
    (void)_client;
    (void) _sessionHandle;
    (void) _mapViewInstanceHandle;
    (void) _customElemenHandles;
    _reply();
}

/**
 * description: getDisplayedCustomElements = This method retrieves the visualized custom
 *   elements on the map
 */
void MapViewerControlStubDefault::getDisplayedCustomElements(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, getDisplayedCustomElementsReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    MapViewerControl::tCustomElementDict customElements;
    _reply(customElements);
}

/**
 * description: selectElementsOnMap = This method selects elements on the map view which are at
 *   the position specified by user input
 */
void MapViewerControlStubDefault::selectElementsOnMap(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _mapViewInstanceHandle, MapViewerControl::Pixel _pixelCoordinate, std::vector<MapViewerControl::SelectableMapType> _selectableTypes, uint16_t _maxNumberOfSelectedElements, selectElementsOnMapReply_t _reply) {
    (void)_client;
    (void) _mapViewInstanceHandle;
    (void) _pixelCoordinate;
    (void) _selectableTypes;
    (void) _maxNumberOfSelectedElements;
    std::vector<MapViewerControl::SelectedMapElement> selectedElements = {};
    _reply(selectedElements);
}


/**
 * description: followCarModeChanged = This signal is emitted when the follow-car-mode changes
 */
void MapViewerControlStubDefault::fireFollowCarModeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const bool &_followCarMode) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireFollowCarModeChangedEvent(_mapViewInstanceHandle, _followCarMode);
}
/**
 * description: cameraPositionChanged = This signal is emitted when the position of the camera
 *   changes
 */
void MapViewerControlStubDefault::fireCameraPositionChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_targetPoint) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCameraPositionChangedEvent(_mapViewInstanceHandle, _targetPoint);
}
/**
 * description: CameraHeadingChanged = This signal is emitted when the heading angle of the
 *   camera changes
 */
void MapViewerControlStubDefault::fireCameraHeadingChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::HeadingType &_headingType, const int32_t &_headingAngle) {
    if (!_headingType.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCameraHeadingChangedEvent(_mapViewInstanceHandle, _headingType, _headingAngle);
}
/**
 * description: cameraTiltAngleChanged = This signal is emitted when the camera tilt angle
 *   changes
 */
void MapViewerControlStubDefault::fireCameraTiltAngleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const int32_t &_tilt) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCameraTiltAngleChangedEvent(_mapViewInstanceHandle, _tilt);
}
/**
 * description: cameraDistanceFromTargetPointChanged = This signal is emitted when the camera
 *   distance from the target point changes
 */
void MapViewerControlStubDefault::fireCameraDistanceFromTargetPointChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint32_t &_distance) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCameraDistanceFromTargetPointChangedEvent(_mapViewInstanceHandle, _distance);
}
/**
 * description: mapViewScaleChanged = This signal is emitted when the mapview scale changes
 */
void MapViewerControlStubDefault::fireMapViewScaleChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const uint8_t &_scaleID, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapScaleType &_isMinMax) {
    if (!_isMinMax.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewScaleChangedEvent(_mapViewInstanceHandle, _scaleID, _isMinMax);
}
/**
 * description: MapViewPerspectiveChanged = This signal is emitted when the map perspective
 *   chnages
 */
void MapViewerControlStubDefault::fireMapViewPerspectiveChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapPerspective &_perspective) {
    if (!_perspective.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewPerspectiveChangedEvent(_mapViewInstanceHandle, _perspective);
}
/**
 * description: mapViewObjectVisibilityChanged = This signal is emitted when the type of
 *   objects shown on the map changes
 */
void MapViewerControlStubDefault::fireMapViewObjectVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapObjectVisibility &_objectVisibilityList) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewObjectVisibilityChangedEvent(_mapViewInstanceHandle, _objectVisibilityList);
}
/**
 * description: mapViewBoundingBoxChanged = This signal is emitted when the bounding box of a
 *   map instance changes
 */
void MapViewerControlStubDefault::fireMapViewBoundingBoxChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewBoundingBoxChangedEvent(_mapViewInstanceHandle, _boundingBox);
}
/**
 * description: mapViewSaveAreaChanged = This signal is emitted when the area that the HMI
 *   guarantees not to cover with other windows or user interface elements chnages
 */
void MapViewerControlStubDefault::fireMapViewSaveAreaChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapViewArea &_saveArea) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewSaveAreaChangedEvent(_mapViewInstanceHandle, _saveArea);
}
/**
 * description: mapViewVisibilityChanged = This signal is emitted when the MapView visibility
 *   changes
 */
void MapViewerControlStubDefault::fireMapViewVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Visibility &_visibilityMode) {
    if (!_visibilityMode.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewVisibilityChangedEvent(_mapViewInstanceHandle, _visibilityMode);
}
/**
 * description: mapViewPerformanceLevelChanged = This signal is emitted when the perfomance
 *   level of a map instance changes
 */
void MapViewerControlStubDefault::fireMapViewPerformanceLevelChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::Level &_performanceLevel) {
    if (!_performanceLevel.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewPerformanceLevelChangedEvent(_mapViewInstanceHandle, _performanceLevel);
}
/**
 * description: displayedRoutes = This signal is emitted when the list of displayed routes
 *   change
 */
void MapViewerControlStubDefault::fireDisplayedRoutesEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::navigation::mapviewer::MapViewerControl::DisplayedRoute> &_displayedRoutes) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireDisplayedRoutesEvent(_mapViewInstanceHandle, _displayedRoutes);
}
/**
 * description: poiCategoriesVisibilityChanged = This signal is emitted when the visibility of
 *   POI categories on a map instance changes
 */
void MapViewerControlStubDefault::firePoiCategoriesVisibilityChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoryIds, const bool &_visible, const uint8_t &_minScaleID, const uint8_t &_maxScaleID) {
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePoiCategoriesVisibilityChangedEvent(_mapViewInstanceHandle, _poiCategoryIds, _visible, _minScaleID, _maxScaleID);
}
/**
 * description: mapViewThemeChanged = This signal is emitted when the theme of a map view
 *   instance changes
 */
void MapViewerControlStubDefault::fireMapViewThemeChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_mapViewInstanceHandle, const ::v4::org::genivi::navigation::mapviewer::MapViewerControl::MapTheme &_mapViewTheme) {
    if (!_mapViewTheme.validate()) {
        return;
    }
    assert((CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<MapViewerControlStubAdapter, MapViewerControlStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireMapViewThemeChangedEvent(_mapViewInstanceHandle, _mapViewTheme);
}


MapViewerControlStubDefault::RemoteEventHandler::RemoteEventHandler(MapViewerControlStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace mapviewer
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
