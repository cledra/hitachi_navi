/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/poiservice/POIContentAccessModuleStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

POIContentAccessModuleStubDefault::POIContentAccessModuleStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(POIContentAccessModule::getInterfaceVersion()) {
}

const CommonAPI::Version& POIContentAccessModuleStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

POIContentAccessModuleStubRemoteEvent* POIContentAccessModuleStubDefault::initStubAdapter(const std::shared_ptr<POIContentAccessModuleStubAdapter> &_adapter) {
    CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: This method returns the API version implemented by the content access module.
 */
void POIContentAccessModuleStubDefault::getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::Version version = {};
    _reply(version);
}

/**
 * description: Set the current language set for the search by poi provider module.         The
 *   language defines the poi and categories name and details language. If the
 *   language is not supported, the default details will be returned in the native
 *   language.
 */
void POIContentAccessModuleStubDefault::setLocale(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _languageCode, std::string _countryCode, std::string _scriptCode, setLocaleReply_t _reply) {
    (void)_client;
    (void) _languageCode;
    (void) _countryCode;
    (void) _scriptCode;
    _reply();
}

/**
 * description: Get the current language set for the search by poi provider module.
 */
void POIContentAccessModuleStubDefault::getLocale(const std::shared_ptr<CommonAPI::ClientId> _client, getLocaleReply_t _reply) {
    (void)_client;
    std::string languageCode = "";
    std::string countryCode = "";
    std::string scriptCode = "";
    _reply(languageCode, countryCode, scriptCode);
}

/**
 * description: Get the supported set of locales for the search by poi provider module.
 */
void POIContentAccessModuleStubDefault::getSupportedLocales(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedLocalesReply_t _reply) {
    (void)_client;
    std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> localeList = {};
    _reply(localeList);
}

/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */
void POIContentAccessModuleStubDefault::getAvailableCategories(const std::shared_ptr<CommonAPI::ClientId> _client, getAvailableCategoriesReply_t _reply) {
    (void)_client;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> categories = {};
    _reply(categories);
}

/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */
void POIContentAccessModuleStubDefault::getRootCategory(const std::shared_ptr<CommonAPI::ClientId> _client, getRootCategoryReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::CategoryID category = 0ul;
    _reply(category);
}

/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */
void POIContentAccessModuleStubDefault::getChildrenCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getChildrenCategoriesReply_t _reply) {
    (void)_client;
    (void) _category;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> categories = {};
    _reply(categories);
}

/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */
void POIContentAccessModuleStubDefault::getParentCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getParentCategoriesReply_t _reply) {
    (void)_client;
    (void) _category;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> categories = {};
    _reply(categories);
}

/**
 * description: Creates a category by name and return an unique id.
 */
void POIContentAccessModuleStubDefault::createCategory(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory _category, createCategoryReply_t _reply) {
    (void)_client;
    (void) _category;
    ::v4::org::genivi::CommonTypes::CategoryID unique_id = 0ul;
    _reply(unique_id);
}

/**
 * description: Removes a list of categories. Because of required time to remove it from the
 *   database, a signal is emitted when the deletion is done.
 */
void POIContentAccessModuleStubDefault::removeCategories(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _categories, removeCategoriesReply_t _reply) {
    (void)_client;
    (void) _categories;
    _reply();
}

/**
 * description: Adds a list of POIs to a category. Because of required time to add it to the
 *   database, a signal is emitted when the update is done, that gives the id of
 *   the elements added
 */
void POIContentAccessModuleStubDefault::addPOIs(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _unique_id, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> _poiList, addPOIsReply_t _reply) {
    (void)_client;
    (void) _unique_id;
    (void) _poiList;
    _reply();
}

/**
 * description: Removes a list of POIs to a category. Because of required time to remove it
 *   from the database, a signal is emitted when the update is done.
 */
void POIContentAccessModuleStubDefault::removePOIs(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> _ids, removePOIsReply_t _reply) {
    (void)_client;
    (void) _ids;
    _reply();
}

/**
 * description: This method is sent by the POI service component to inform all the CAM that a
 *   new POI search was started.         It provides all the relevant search
 *   parameters. Of course the CAM will only be aware of the search if it registers
 *   one of the search categories.
 */
void POIContentAccessModuleStubDefault::poiSearchStarted(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, uint16_t _maxSize, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _location, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> _poiCategories, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> _poiAttributes, std::string _inputString, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption _sortOption, poiSearchStartedReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _maxSize;
    (void) _location;
    (void) _poiCategories;
    (void) _poiAttributes;
    (void) _inputString;
    (void) _sortOption;
    _reply();
}

/**
 * description: This method cancels the search for the current id.
 */
void POIContentAccessModuleStubDefault::poiSearchCanceled(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, poiSearchCanceledReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    _reply();
}

/**
 * description: This method provides the poi results list found by the CAM.         As the POI
 *   unique id is managed by the POI component, the CAM only provides the POI name,
 *   the category and coordinates as well as all the relevant detailed information.
 */
void POIContentAccessModuleStubDefault::resultListRequested(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> _attributeList, resultListRequestedReply_t _reply) {
    (void)_client;
    (void) _camId;
    (void) _poiSearchHandle;
    (void) _attributeList;
    ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState statusValue = ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState::NOT_STARTED;
    uint16_t resultListSize = 0u;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails> resultList = {};
    if (!statusValue.validate()) {
        return;
    }
    _reply(statusValue, resultListSize, resultList);
}

/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... .
 */
void POIContentAccessModuleStubDefault::poiDetailsRequested(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> _source_id, poiDetailsRequestedReply_t _reply) {
    (void)_client;
    (void) _source_id;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> results = {};
    _reply(results);
}


/**
 * description: ConfigurationChanged = This signal is sent to the clients when one or more
 *   configuration settings changes.
 */
void POIContentAccessModuleStubDefault::fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings> &_changedSettings) {
    assert((CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireConfigurationChangedEvent(_changedSettings);
}
/**
 * description: CategoriesRemoved = This signal is emitted when a list of categories and
 *   associated content has been removed from the database.
 */
void POIContentAccessModuleStubDefault::fireCategoriesRemovedEvent(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories) {
    assert((CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCategoriesRemovedEvent(_categories);
}
/**
 * description: POIAdded = This signal is emitted when a list of POIs and associated content
 *   has been added to the database. It returns the ids.
 */
void POIContentAccessModuleStubDefault::firePOIAddedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_pois) {
    assert((CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePOIAddedEvent(_pois);
}
/**
 * description: POIRemoved = This signal is emitted when a list of POIs and associated content
 *   has been removed from the database.
 */
void POIContentAccessModuleStubDefault::firePOIRemovedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_pois) {
    assert((CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePOIRemovedEvent(_pois);
}
/**
 * description: SearchStatusChanged = This signal updates the search or proximity alert status
 *   of the specified handle.
 */
void POIContentAccessModuleStubDefault::fireSearchStatusChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_pois) {
    if (!_statusValue.validate()) {
        return;
    }
    assert((CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POIContentAccessModuleStubAdapter, POIContentAccessModuleStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireSearchStatusChangedEvent(_poiSearchHandle, _statusValue, _pois);
}


POIContentAccessModuleStubDefault::RemoteEventHandler::RemoteEventHandler(POIContentAccessModuleStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
