/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/poiservice/POIContentAccess.hpp>
#include <v4/org/genivi/navigation/poiservice/POIContentAccessDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createPOIContentAccessDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<POIContentAccessDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerPOIContentAccessDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	POIContentAccess::getInterface(), &createPOIContentAccessDBusStubAdapter);
}

POIContentAccessDBusStubAdapterInternal::~POIContentAccessDBusStubAdapterInternal() {
    deactivateManagedInstances();
    POIContentAccessDBusStubAdapterHelper::deinit();
}

void POIContentAccessDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* POIContentAccessDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: Register to the POI provider module          When the CAM registers, it
         *   provides a name and then get a unique id. This id must be used everytime the
         *   CAM communicates with the POI service component.         After the
         *   registration is done, the CAM can start to update POI categories and POI
         *   attributes as well as registers POI categories to search for.
         */
        "<method name=\"registerContentAccessModule\">\n"
            "<arg name=\"_moduleName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_camId\" type=\"y\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Remove CAM from POI provider module.
         */
        "<method name=\"unRegisterContentAccessModule\">\n"
            "<arg name=\"_camId\" type=\"y\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Register to the POI provider module the categories you can search for POI.     
         *      The categories could be predifined one or customized ones. In order to
         *   register a customized category, you might need to create it before and add it
         *   to the POI service component.
         */
        "<method name=\"registerPoiCategories\">\n"
            "<arg name=\"_camId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_poiCategories\" type=\"au\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Update categories in the POI service component. It could be a predifined or a
         *   customed one.         The CAM provides for each categories the list of
         *   attributes (mandatories like name or optional) it wants to update.        
         *   Depending on the local database write policy, the CAM might only be able to
         *   update customized attributes for a category and not the predefined ones so
         *   some update could be rejected.
         */
        "<method name=\"updateCategories\">\n"
            "<arg name=\"_camId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_poiCategories\" type=\"a(ua(usia(is(yv)))a(us))\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Add new categories to the POI service component.         The CAM provides for
         *   each categories the name, the parent categories, the top level attribute, the
         *   list of attributes, the icons, ...  .
         */
        "<method name=\"addCategories\">\n"
            "<arg name=\"_camId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_poiCategories\" type=\"a((au(yv)ss(yv))a(usia(is(yv)))a(us))\" direction=\"in\" />\n"
            "<arg name=\"_poiCategoriesId\" type=\"au\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Remove categories from the POI service component. It could be a predifined or a
         *   customed one.         Depending on the local database write policy, the CAM
         *   might only not be able to remove some categories.
         */
        "<method name=\"removeCategories\">\n"
            "<arg name=\"_camId\" type=\"y\" direction=\"in\" />\n"
            "<arg name=\"_poiCategories\" type=\"au\" direction=\"in\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
        CommonAPI::Version
        > POIContentAccessDBusStubAdapterInternal::getPOIContentAccessInterfaceVersionStubDispatcher(&POIContentAccessStub::getInterfaceVersion, "uu");




/**
 * description: Register to the POI provider module          When the CAM registers, it
 *   provides a name and then get a unique id. This id must be used everytime the
 *   CAM communicates with the POI service component.         After the
 *   registration is done, the CAM can start to update POI categories and POI
 *   attributes as well as registers POI categories to search for.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<std::string>,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > POIContentAccessDBusStubAdapterInternal::registerContentAccessModuleStubDispatcher(
    &POIContentAccessStub::registerContentAccessModule, "y",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Remove CAM from POI provider module.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POIContentAccessDBusStubAdapterInternal::unRegisterContentAccessModuleStubDispatcher(
    &POIContentAccessStub::unRegisterContentAccessModule, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Register to the POI provider module the categories you can search for POI.     
 *      The categories could be predifined one or customized ones. In order to
 *   register a customized category, you might need to create it before and add it
 *   to the POI service component.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > POIContentAccessDBusStubAdapterInternal::registerPoiCategoriesStubDispatcher(
    &POIContentAccessStub::registerPoiCategories, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple());

/**
 * description: Update categories in the POI service component. It could be a predifined or a
 *   customed one.         The CAM provides for each categories the list of
 *   attributes (mandatories like name or optional) it wants to update.        
 *   Depending on the local database write policy, the CAM might only be able to
 *   update customized attributes for a category and not the predefined ones so
 *   some update could be rejected.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>>,
    std::tuple<>
    
    > POIContentAccessDBusStubAdapterInternal::updateCategoriesStubDispatcher(
    &POIContentAccessStub::updateCategories, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: Add new categories to the POI service component.         The CAM provides for
 *   each categories the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ...  .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>>,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > POIContentAccessDBusStubAdapterInternal::addCategoriesStubDispatcher(
    &POIContentAccessStub::addCategories, "au",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)));

/**
 * description: Remove categories from the POI service component. It could be a predifined or a
 *   customed one.         Depending on the local database write policy, the CAM
 *   might only not be able to remove some categories.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > POIContentAccessDBusStubAdapterInternal::removeCategoriesStubDispatcher(
    &POIContentAccessStub::removeCategories, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple());





const POIContentAccessDBusStubAdapterHelper::StubDispatcherTable& POIContentAccessDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& POIContentAccessDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

POIContentAccessDBusStubAdapterInternal::POIContentAccessDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      POIContentAccessDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<POIContentAccessStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Register to the POI provider module          When the CAM registers, it
             *   provides a name and then get a unique id. This id must be used everytime the
             *   CAM communicates with the POI service component.         After the
             *   registration is done, the CAM can start to update POI categories and POI
             *   attributes as well as registers POI categories to search for.
             */
            { { "registerContentAccessModule", "s" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::registerContentAccessModuleStubDispatcher },
            /**
             * description: Remove CAM from POI provider module.
             */
            { { "unRegisterContentAccessModule", "y" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::unRegisterContentAccessModuleStubDispatcher },
            /**
             * description: Register to the POI provider module the categories you can search for POI.     
             *      The categories could be predifined one or customized ones. In order to
             *   register a customized category, you might need to create it before and add it
             *   to the POI service component.
             */
            { { "registerPoiCategories", "yau" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::registerPoiCategoriesStubDispatcher },
            /**
             * description: Update categories in the POI service component. It could be a predifined or a
             *   customed one.         The CAM provides for each categories the list of
             *   attributes (mandatories like name or optional) it wants to update.        
             *   Depending on the local database write policy, the CAM might only be able to
             *   update customized attributes for a category and not the predefined ones so
             *   some update could be rejected.
             */
            { { "updateCategories", "ya(ua(usia(is(yv)))a(us))" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::updateCategoriesStubDispatcher },
            /**
             * description: Add new categories to the POI service component.         The CAM provides for
             *   each categories the name, the parent categories, the top level attribute, the
             *   list of attributes, the icons, ...  .
             */
            { { "addCategories", "ya((au(yv)ss(yv))a(usia(is(yv)))a(us))" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::addCategoriesStubDispatcher },
            /**
             * description: Remove categories from the POI service component. It could be a predifined or a
             *   customed one.         Depending on the local database write policy, the CAM
             *   might only not be able to remove some categories.
             */
            { { "removeCategories", "yau" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::removeCategoriesStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::poiservice::POIContentAccessDBusStubAdapterInternal::getPOIContentAccessInterfaceVersionStubDispatcher });
}

bool POIContentAccessDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
