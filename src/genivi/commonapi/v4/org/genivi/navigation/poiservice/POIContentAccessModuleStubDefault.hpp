/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/poiservice/POIContentAccessModuleStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

/**
 * Provides a default implementation for POIContentAccessModuleStubRemoteEvent and
 * POIContentAccessModuleStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class POIContentAccessModuleStubDefault
    : public virtual POIContentAccessModuleStub {
public:
    POIContentAccessModuleStubDefault();

    POIContentAccessModuleStubRemoteEvent* initStubAdapter(const std::shared_ptr<POIContentAccessModuleStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply);
    /**
     * description: Set the current language set for the search by poi provider module.         The
     *   language defines the poi and categories name and details language. If the
     *   language is not supported, the default details will be returned in the native
     *   language.
     */
    virtual void setLocale(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _languageCode, std::string _countryCode, std::string _scriptCode, setLocaleReply_t _reply);
    /**
     * description: Get the current language set for the search by poi provider module.
     */
    virtual void getLocale(const std::shared_ptr<CommonAPI::ClientId> _client, getLocaleReply_t _reply);
    /**
     * description: Get the supported set of locales for the search by poi provider module.
     */
    virtual void getSupportedLocales(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedLocalesReply_t _reply);
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     */
    virtual void getAvailableCategories(const std::shared_ptr<CommonAPI::ClientId> _client, getAvailableCategoriesReply_t _reply);
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     */
    virtual void getRootCategory(const std::shared_ptr<CommonAPI::ClientId> _client, getRootCategoryReply_t _reply);
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     */
    virtual void getChildrenCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getChildrenCategoriesReply_t _reply);
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     */
    virtual void getParentCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getParentCategoriesReply_t _reply);
    /**
     * description: Creates a category by name and return an unique id.
     */
    virtual void createCategory(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory _category, createCategoryReply_t _reply);
    /**
     * description: Removes a list of categories. Because of required time to remove it from the
     *   database, a signal is emitted when the deletion is done.
     */
    virtual void removeCategories(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _categories, removeCategoriesReply_t _reply);
    /**
     * description: Adds a list of POIs to a category. Because of required time to add it to the
     *   database, a signal is emitted when the update is done, that gives the id of
     *   the elements added
     */
    virtual void addPOIs(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _unique_id, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> _poiList, addPOIsReply_t _reply);
    /**
     * description: Removes a list of POIs to a category. Because of required time to remove it
     *   from the database, a signal is emitted when the update is done.
     */
    virtual void removePOIs(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> _ids, removePOIsReply_t _reply);
    /**
     * description: This method is sent by the POI service component to inform all the CAM that a
     *   new POI search was started.         It provides all the relevant search
     *   parameters. Of course the CAM will only be aware of the search if it registers
     *   one of the search categories.
     */
    virtual void poiSearchStarted(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, uint16_t _maxSize, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _location, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> _poiCategories, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> _poiAttributes, std::string _inputString, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption _sortOption, poiSearchStartedReply_t _reply);
    /**
     * description: This method cancels the search for the current id.
     */
    virtual void poiSearchCanceled(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, poiSearchCanceledReply_t _reply);
    /**
     * description: This method provides the poi results list found by the CAM.         As the POI
     *   unique id is managed by the POI component, the CAM only provides the POI name,
     *   the category and coordinates as well as all the relevant detailed information.
     */
    virtual void resultListRequested(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> _attributeList, resultListRequestedReply_t _reply);
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... .
     */
    virtual void poiDetailsRequested(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> _source_id, poiDetailsRequestedReply_t _reply);

/**
 * description: ConfigurationChanged = This signal is sent to the clients when one or more
 *   configuration settings changes.
 */
virtual void fireConfigurationChangedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings> &_changedSettings);
/**
 * description: CategoriesRemoved = This signal is emitted when a list of categories and
 *   associated content has been removed from the database.
 */
virtual void fireCategoriesRemovedEvent(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories);
/**
 * description: POIAdded = This signal is emitted when a list of POIs and associated content
 *   has been added to the database. It returns the ids.
 */
virtual void firePOIAddedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_pois);
/**
 * description: POIRemoved = This signal is emitted when a list of POIs and associated content
 *   has been removed from the database.
 */
virtual void firePOIRemovedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_pois);
/**
 * description: SearchStatusChanged = This signal updates the search or proximity alert status
 *   of the specified handle.
 */
virtual void fireSearchStatusChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_pois);


protected:
    class RemoteEventHandler: public virtual POIContentAccessModuleStubRemoteEvent {
    public:
        RemoteEventHandler(POIContentAccessModuleStubDefault *_defaultStub);


    private:
        POIContentAccessModuleStubDefault *defaultStub_;
    };
private:
    POIContentAccessModuleStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_STUB_DEFAULT
