/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_PROXY_HPP_

#include <v4/org/genivi/navigation/poiservice/POIContentAccessModuleProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

template <typename ... _AttributeExtensions>
class POIContentAccessModuleProxy
    : virtual public POIContentAccessModule, 
      virtual public POIContentAccessModuleProxyBase,
      virtual public _AttributeExtensions... {
public:
    POIContentAccessModuleProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~POIContentAccessModuleProxy();

    typedef POIContentAccessModule InterfaceType;



    /**
     * description: ConfigurationChanged = This signal is sent to the clients when one or more
     *   configuration settings changes.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ConfigurationChanged.
     */
    virtual ConfigurationChangedEvent& getConfigurationChangedEvent() {
        return delegate_->getConfigurationChangedEvent();
    }
    /**
     * description: CategoriesRemoved = This signal is emitted when a list of categories and
     *   associated content has been removed from the database.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CategoriesRemoved.
     */
    virtual CategoriesRemovedEvent& getCategoriesRemovedEvent() {
        return delegate_->getCategoriesRemovedEvent();
    }
    /**
     * description: POIAdded = This signal is emitted when a list of POIs and associated content
     *   has been added to the database. It returns the ids.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast POIAdded.
     */
    virtual POIAddedEvent& getPOIAddedEvent() {
        return delegate_->getPOIAddedEvent();
    }
    /**
     * description: POIRemoved = This signal is emitted when a list of POIs and associated content
     *   has been removed from the database.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast POIRemoved.
     */
    virtual POIRemovedEvent& getPOIRemovedEvent() {
        return delegate_->getPOIRemovedEvent();
    }
    /**
     * description: SearchStatusChanged = This signal updates the search or proximity alert status
     *   of the specified handle.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SearchStatusChanged.
     */
    virtual SearchStatusChangedEvent& getSearchStatusChangedEvent() {
        return delegate_->getSearchStatusChangedEvent();
    }

    /**
     * description: This method returns the API version implemented by the content access module.
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set the current language set for the search by poi provider module.         The
     *   language defines the poi and categories name and details language. If the
     *   language is not supported, the default details will be returned in the native
     *   language.
     * Calls setLocale with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setLocale(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setLocale with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setLocaleAsync(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, SetLocaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the current language set for the search by poi provider module.
     * Calls getLocale with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getLocale(CommonAPI::CallStatus &_internalCallStatus, std::string &_languageCode, std::string &_countryCode, std::string &_scriptCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getLocale with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getLocaleAsync(GetLocaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the supported set of locales for the search by poi provider module.
     * Calls getSupportedLocales with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSupportedLocales(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> &_localeList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSupportedLocales with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     * Calls getAvailableCategories with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAvailableCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     * Calls getRootCategory with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getRootCategory with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getRootCategoryAsync(GetRootCategoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     * Calls getChildrenCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getChildrenCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     * Calls getParentCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getParentCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Creates a category by name and return an unique id.
     * Calls createCategory with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createCategory(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createCategory with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createCategoryAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CreateCategoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Removes a list of categories. Because of required time to remove it from the
     *   database, a signal is emitted when the deletion is done.
     * Calls removeCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void removeCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls removeCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> removeCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, RemoveCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Adds a list of POIs to a category. Because of required time to add it to the
     *   database, a signal is emitted when the update is done, that gives the id of
     *   the elements added
     * Calls addPOIs with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addPOIs(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls addPOIs with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addPOIsAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, AddPOIsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Removes a list of POIs to a category. Because of required time to remove it
     *   from the database, a signal is emitted when the update is done.
     * Calls removePOIs with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void removePOIs(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls removePOIs with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> removePOIsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, RemovePOIsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is sent by the POI service component to inform all the CAM that a
     *   new POI search was started.         It provides all the relevant search
     *   parameters. Of course the CAM will only be aware of the search if it registers
     *   one of the search categories.
     * Calls poiSearchStarted with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void poiSearchStarted(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls poiSearchStarted with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> poiSearchStartedAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, PoiSearchStartedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method cancels the search for the current id.
     * Calls poiSearchCanceled with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void poiSearchCanceled(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls poiSearchCanceled with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> poiSearchCanceledAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, PoiSearchCanceledAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method provides the poi results list found by the CAM.         As the POI
     *   unique id is managed by the POI component, the CAM only provides the POI name,
     *   the category and coordinates as well as all the relevant detailed information.
     * Calls resultListRequested with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resultListRequested(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails> &_resultList, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resultListRequested with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resultListRequestedAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, ResultListRequestedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... .
     * Calls poiDetailsRequested with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void poiDetailsRequested(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls poiDetailsRequested with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> poiDetailsRequestedAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, PoiDetailsRequestedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<POIContentAccessModuleProxyBase> delegate_;
};

typedef POIContentAccessModuleProxy<> POIContentAccessModuleProxyDefault;


//
// POIContentAccessModuleProxy Implementation
//
template <typename ... _AttributeExtensions>
POIContentAccessModuleProxy<_AttributeExtensions...>::POIContentAccessModuleProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<POIContentAccessModuleProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<POIContentAccessModuleProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
POIContentAccessModuleProxy<_AttributeExtensions...>::~POIContentAccessModuleProxy() {
}

/**
 * description: This method returns the API version implemented by the content access module.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_callback, _info);
}
/**
 * description: Set the current language set for the search by poi provider module.         The
 *   language defines the poi and categories name and details language. If the
 *   language is not supported, the default details will be returned in the native
 *   language.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::setLocale(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setLocale(_languageCode, _countryCode, _scriptCode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::setLocaleAsync(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, SetLocaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setLocaleAsync(_languageCode, _countryCode, _scriptCode, _callback, _info);
}
/**
 * description: Get the current language set for the search by poi provider module.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getLocale(CommonAPI::CallStatus &_internalCallStatus, std::string &_languageCode, std::string &_countryCode, std::string &_scriptCode, const CommonAPI::CallInfo *_info) {
    delegate_->getLocale(_internalCallStatus, _languageCode, _countryCode, _scriptCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getLocaleAsync(GetLocaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getLocaleAsync(_callback, _info);
}
/**
 * description: Get the supported set of locales for the search by poi provider module.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getSupportedLocales(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> &_localeList, const CommonAPI::CallInfo *_info) {
    delegate_->getSupportedLocales(_internalCallStatus, _localeList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSupportedLocalesAsync(_callback, _info);
}
/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info) {
    delegate_->getAvailableCategories(_internalCallStatus, _categories, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAvailableCategoriesAsync(_callback, _info);
}
/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info) {
    delegate_->getRootCategory(_internalCallStatus, _category, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getRootCategoryAsync(GetRootCategoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getRootCategoryAsync(_callback, _info);
}
/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
    delegate_->getChildrenCategories(_category, _internalCallStatus, _categories, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getChildrenCategoriesAsync(_category, _callback, _info);
}
/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
    delegate_->getParentCategories(_category, _internalCallStatus, _categories, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getParentCategoriesAsync(_category, _callback, _info);
}
/**
 * description: Creates a category by name and return an unique id.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::createCategory(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const CommonAPI::CallInfo *_info) {
    delegate_->createCategory(_category, _internalCallStatus, _unique_id, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::createCategoryAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CreateCategoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createCategoryAsync(_category, _callback, _info);
}
/**
 * description: Removes a list of categories. Because of required time to remove it from the
 *   database, a signal is emitted when the deletion is done.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::removeCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->removeCategories(_categories, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::removeCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, RemoveCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->removeCategoriesAsync(_categories, _callback, _info);
}
/**
 * description: Adds a list of POIs to a category. Because of required time to add it to the
 *   database, a signal is emitted when the update is done, that gives the id of
 *   the elements added
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::addPOIs(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->addPOIs(_unique_id, _poiList, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::addPOIsAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, AddPOIsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->addPOIsAsync(_unique_id, _poiList, _callback, _info);
}
/**
 * description: Removes a list of POIs to a category. Because of required time to remove it
 *   from the database, a signal is emitted when the update is done.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::removePOIs(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->removePOIs(_ids, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::removePOIsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, RemovePOIsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->removePOIsAsync(_ids, _callback, _info);
}
/**
 * description: This method is sent by the POI service component to inform all the CAM that a
 *   new POI search was started.         It provides all the relevant search
 *   parameters. Of course the CAM will only be aware of the search if it registers
 *   one of the search categories.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::poiSearchStarted(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_sortOption.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->poiSearchStarted(_poiSearchHandle, _maxSize, _location, _poiCategories, _poiAttributes, _inputString, _sortOption, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::poiSearchStartedAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, PoiSearchStartedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_sortOption.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->poiSearchStartedAsync(_poiSearchHandle, _maxSize, _location, _poiCategories, _poiAttributes, _inputString, _sortOption, _callback, _info);
}
/**
 * description: This method cancels the search for the current id.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::poiSearchCanceled(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->poiSearchCanceled(_poiSearchHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::poiSearchCanceledAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, PoiSearchCanceledAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->poiSearchCanceledAsync(_poiSearchHandle, _callback, _info);
}
/**
 * description: This method provides the poi results list found by the CAM.         As the POI
 *   unique id is managed by the POI component, the CAM only provides the POI name,
 *   the category and coordinates as well as all the relevant detailed information.
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::resultListRequested(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails> &_resultList, const CommonAPI::CallInfo *_info) {
    delegate_->resultListRequested(_camId, _poiSearchHandle, _attributeList, _internalCallStatus, _statusValue, _resultListSize, _resultList, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::resultListRequestedAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, ResultListRequestedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->resultListRequestedAsync(_camId, _poiSearchHandle, _attributeList, _callback, _info);
}
/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... .
 */
template <typename ... _AttributeExtensions>
void POIContentAccessModuleProxy<_AttributeExtensions...>::poiDetailsRequested(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info) {
    delegate_->poiDetailsRequested(_source_id, _internalCallStatus, _results, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POIContentAccessModuleProxy<_AttributeExtensions...>::poiDetailsRequestedAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, PoiDetailsRequestedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->poiDetailsRequestedAsync(_source_id, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &POIContentAccessModuleProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool POIContentAccessModuleProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool POIContentAccessModuleProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& POIContentAccessModuleProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& POIContentAccessModuleProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_PROXY_HPP_
