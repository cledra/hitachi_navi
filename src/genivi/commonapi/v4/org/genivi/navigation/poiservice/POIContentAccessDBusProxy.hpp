/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers a set of common methods for Content Access Modules (CAM).
 *   The CAM provide and update POI and categories information from remote sources
 *   to the POIService modules.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_DBUS_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_DBUS_PROXY_HPP_

#include <v4/org/genivi/navigation/poiservice/POIContentAccessProxyBase.hpp>
#include "v4/org/genivi/navigation/poiservice/POIContentAccessDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

class POIContentAccessDBusProxy
    : virtual public POIContentAccessProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    POIContentAccessDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~POIContentAccessDBusProxy() { }



    /**
     * description: Register to the POI provider module          When the CAM registers, it
     *   provides a name and then get a unique id. This id must be used everytime the
     *   CAM communicates with the POI service component.         After the
     *   registration is done, the CAM can start to update POI categories and POI
     *   attributes as well as registers POI categories to search for.
     */
    virtual void registerContentAccessModule(const std::string &_moduleName, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> registerContentAccessModuleAsync(const std::string &_moduleName, RegisterContentAccessModuleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Remove CAM from POI provider module.
     */
    virtual void unRegisterContentAccessModule(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> unRegisterContentAccessModuleAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, UnRegisterContentAccessModuleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Register to the POI provider module the categories you can search for POI.     
     *      The categories could be predifined one or customized ones. In order to
     *   register a customized category, you might need to create it before and add it
     *   to the POI service component.
     */
    virtual void registerPoiCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> registerPoiCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RegisterPoiCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Update categories in the POI service component. It could be a predifined or a
     *   customed one.         The CAM provides for each categories the list of
     *   attributes (mandatories like name or optional) it wants to update.        
     *   Depending on the local database write policy, the CAM might only be able to
     *   update customized attributes for a category and not the predefined ones so
     *   some update could be rejected.
     */
    virtual void updateCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, UpdateCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Add new categories to the POI service component.         The CAM provides for
     *   each categories the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ...  .
     */
    virtual void addCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoriesId, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, AddCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Remove categories from the POI service component. It could be a predifined or a
     *   customed one.         Depending on the local database write policy, the CAM
     *   might only not be able to remove some categories.
     */
    virtual void removeCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> removeCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RemoveCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_DBUS_PROXY_HPP_

