/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/poiservice/POISearchStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

POISearchStubDefault::POISearchStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(POISearch::getInterfaceVersion()) {
}

const CommonAPI::Version& POISearchStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

POISearchStubRemoteEvent* POISearchStubDefault::initStubAdapter(const std::shared_ptr<POISearchStubAdapter> &_adapter) {
    CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: This method returns the API version implemented by the content access module.
 */
void POISearchStubDefault::getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::Version version = {};
    _reply(version);
}

/**
 * description: This method allows the application to validate that POI categories are
 *   supported by the POI component and the Content access modules.
 */
void POISearchStubDefault::validateCategories(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _categories, validateCategoriesReply_t _reply) {
    (void)_client;
    (void) _categories;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus> results = {};
    _reply(results);
}

/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */
void POISearchStubDefault::getAvailableCategories(const std::shared_ptr<CommonAPI::ClientId> _client, getAvailableCategoriesReply_t _reply) {
    (void)_client;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> categories = {};
    _reply(categories);
}

/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */
void POISearchStubDefault::getRootCategory(const std::shared_ptr<CommonAPI::ClientId> _client, getRootCategoryReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::CommonTypes::CategoryID category = 0ul;
    _reply(category);
}

/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */
void POISearchStubDefault::getChildrenCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getChildrenCategoriesReply_t _reply) {
    (void)_client;
    (void) _category;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> categories = {};
    _reply(categories);
}

/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */
void POISearchStubDefault::getParentCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::CommonTypes::CategoryID _category, getParentCategoriesReply_t _reply) {
    (void)_client;
    (void) _category;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> categories = {};
    _reply(categories);
}

/**
 * description: This method retrieves the details associated to one or more POI categories.    
 *       It contains the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ... .
 */
void POISearchStubDefault::getCategoriesDetails(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _categories, getCategoriesDetailsReply_t _reply) {
    (void)_client;
    (void) _categories;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category> results = {};
    _reply(results);
}

/**
 * description: This method creates a new search input and retrieves a handle .
 */
void POISearchStubDefault::createPoiSearchHandle(const std::shared_ptr<CommonAPI::ClientId> _client, createPoiSearchHandleReply_t _reply) {
    (void)_client;
    ::v4::org::genivi::navigation::NavigationTypes::Handle poiSearchHandle = 0ul;
    _reply(poiSearchHandle);
}

/**
 * description: This method deletes a search input and its associated resources.
 */
void POISearchStubDefault::deletePoiSearchHandle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, deletePoiSearchHandleReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    _reply();
}

/**
 * description: This method sets the location to start the search around.         If a route
 *   handle was defined before, it will be replaced by this location.
 */
void POISearchStubDefault::setCenter(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D _location, setCenterReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _location;
    _reply();
}

/**
 * description: This method allows to start a POI search along a guided route.         The
 *   route handle must be valid or the POI search will failed.         If a search
 *   location was defined before, it will be replaced by the route.
 */
void POISearchStubDefault::setRouteHandle(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, uint32_t _startSearchOffset, uint32_t _endSearchOffset, setRouteHandleReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _sessionHandle;
    (void) _routeHandle;
    (void) _startSearchOffset;
    (void) _endSearchOffset;
    _reply();
}

/**
 * description: This method sets the POI categories for the current search input and the
 *   corresponding result-lists for the current session .
 */
void POISearchStubDefault::setCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> _poiCategories, setCategoriesReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _poiCategories;
    _reply();
}

/**
 * description: This method set POI attributes (optional) for the current search input and the
 *   corresponding result-lists for the current session         An attribute is
 *   attached to a category.
 */
void POISearchStubDefault::setAttributes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> _poiAttributes, setAttributesReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _poiAttributes;
    _reply();
}

/**
 * description: This method sends the search input for the search handle.         The search
 *   will start with the either the location or the route handle.         If no
 *   positon or route handle were configured, the search will use the vehicle
 *   position are center location.
 */
void POISearchStubDefault::startPoiSearch(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::string _inputString, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption _sortOption, startPoiSearchReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _inputString;
    (void) _sortOption;
    _reply();
}

/**
 * description: This method cancels the search for the current session.
 */
void POISearchStubDefault::cancelPoiSearch(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, cancelPoiSearchReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    _reply();
}

/**
 * description: This method starts to check for POI aound vehicle according to the criteria
 *   defined with the unique handle.         By default, it will search for POI
 *   around vehicle position with default radius defined for each categories.      
 *     If a route handle was defined, it will search along the route with default
 *   categorie's radius.
 */
void POISearchStubDefault::startPoiProximityAlert(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, std::string _inputString, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption _sortOption, startPoiProximityAlertReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _inputString;
    (void) _sortOption;
    _reply();
}

/**
 * description: This method cancels the search for the current session.
 */
void POISearchStubDefault::cancelPoiProximityAlert(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, cancelPoiProximityAlertReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    _reply();
}

/**
 * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
 */
void POISearchStubDefault::requestResultList(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _poiSearchHandle, uint16_t _offset, uint16_t _maxWindowSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> _attributeList, requestResultListReply_t _reply) {
    (void)_client;
    (void) _poiSearchHandle;
    (void) _offset;
    (void) _maxWindowSize;
    (void) _attributeList;
    ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState statusValue = ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState::NOT_STARTED;
    uint16_t resultListSize = 0u;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult> resultListWindow = {};
    if (!statusValue.validate()) {
        return;
    }
    _reply(statusValue, resultListSize, resultListWindow);
}

/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... ..
 */
void POISearchStubDefault::getPoiDetails(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> _id, getPoiDetailsReply_t _reply) {
    (void)_client;
    (void) _id;
    std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> results = {};
    _reply(results);
}


/**
 * description: This signal indicates that one or more POI categories were added, updated or
 *   removed.
 */
void POISearchStubDefault::fireCategoriesUpdatedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason> &_poiCategories) {
    assert((CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireCategoriesUpdatedEvent(_poiCategories);
}
/**
 * description: This signal updates the search or proximity alert status of the specified
 *   handle.
 */
void POISearchStubDefault::firePoiStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue) {
    if (!_statusValue.validate()) {
        return;
    }
    assert((CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePoiStatusEvent(_poiSearchHandle, _statusValue);
}
/**
 * description: This signal updates in the poi results list.
 */
void POISearchStubDefault::fireResultListChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_resultListSize) {
    assert((CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<POISearchStubAdapter, POISearchStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireResultListChangedEvent(_poiSearchHandle, _resultListSize);
}


POISearchStubDefault::RemoteEventHandler::RemoteEventHandler(POISearchStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
