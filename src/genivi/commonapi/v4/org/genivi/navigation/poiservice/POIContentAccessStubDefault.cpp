/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/poiservice/POIContentAccessStubDefault.hpp>
#include <assert.h>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

POIContentAccessStubDefault::POIContentAccessStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(POIContentAccess::getInterfaceVersion()) {
}

const CommonAPI::Version& POIContentAccessStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

POIContentAccessStubRemoteEvent* POIContentAccessStubDefault::initStubAdapter(const std::shared_ptr<POIContentAccessStubAdapter> &_adapter) {
    CommonAPI::Stub<POIContentAccessStubAdapter, POIContentAccessStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: Register to the POI provider module          When the CAM registers, it
 *   provides a name and then get a unique id. This id must be used everytime the
 *   CAM communicates with the POI service component.         After the
 *   registration is done, the CAM can start to update POI categories and POI
 *   attributes as well as registers POI categories to search for.
 */
void POIContentAccessStubDefault::registerContentAccessModule(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _moduleName, registerContentAccessModuleReply_t _reply) {
    (void)_client;
    (void) _moduleName;
    ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID camId = 0u;
    _reply(camId);
}

/**
 * description: Remove CAM from POI provider module.
 */
void POIContentAccessStubDefault::unRegisterContentAccessModule(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, unRegisterContentAccessModuleReply_t _reply) {
    (void)_client;
    (void) _camId;
    _reply();
}

/**
 * description: Register to the POI provider module the categories you can search for POI.     
 *      The categories could be predifined one or customized ones. In order to
 *   register a customized category, you might need to create it before and add it
 *   to the POI service component.
 */
void POIContentAccessStubDefault::registerPoiCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategories, registerPoiCategoriesReply_t _reply) {
    (void)_client;
    (void) _camId;
    (void) _poiCategories;
    _reply();
}

/**
 * description: Update categories in the POI service component. It could be a predifined or a
 *   customed one.         The CAM provides for each categories the list of
 *   attributes (mandatories like name or optional) it wants to update.        
 *   Depending on the local database write policy, the CAM might only be able to
 *   update customized attributes for a category and not the predefined ones so
 *   some update could be rejected.
 */
void POIContentAccessStubDefault::updateCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> _poiCategories, updateCategoriesReply_t _reply) {
    (void)_client;
    (void) _camId;
    (void) _poiCategories;
    _reply();
}

/**
 * description: Add new categories to the POI service component.         The CAM provides for
 *   each categories the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ...  .
 */
void POIContentAccessStubDefault::addCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> _poiCategories, addCategoriesReply_t _reply) {
    (void)_client;
    (void) _camId;
    (void) _poiCategories;
    std::vector<::v4::org::genivi::CommonTypes::CategoryID> poiCategoriesId = {};
    _reply(poiCategoriesId);
}

/**
 * description: Remove categories from the POI service component. It could be a predifined or a
 *   customed one.         Depending on the local database write policy, the CAM
 *   might only not be able to remove some categories.
 */
void POIContentAccessStubDefault::removeCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategories, removeCategoriesReply_t _reply) {
    (void)_client;
    (void) _camId;
    (void) _poiCategories;
    _reply();
}




POIContentAccessStubDefault::RemoteEventHandler::RemoteEventHandler(POIContentAccessStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
