/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/poiservice/POISearchStub.hpp>
#include "v4/org/genivi/navigation/poiservice/POISearchDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/poiservice/POIServiceTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

typedef CommonAPI::DBus::DBusStubAdapterHelper<POISearchStub> POISearchDBusStubAdapterHelper;

class POISearchDBusStubAdapterInternal
    : public virtual POISearchStubAdapter,
      public POISearchDBusStubAdapterHelper
{
public:
    POISearchDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~POISearchDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return POISearch::getInterface();
    }


    /**
     * description: This signal indicates that one or more POI categories were added, updated or
     *   removed.
     */
    void fireCategoriesUpdatedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason>& poiCategories);
    /**
     * description: This signal updates the search or proximity alert status of the specified
     *   handle.
     */
    void firePoiStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState& statusValue);
    /**
     * description: This signal updates in the poi results list.
     */
    void fireResultListChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& poiSearchHandle, const uint16_t& resultListSize);


    const POISearchDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::poiservice::POISearchStub,
        CommonAPI::Version
        > getPOISearchInterfaceVersionStubDispatcher;



/**
 * description: This method returns the API version implemented by the content access module.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: This method allows the application to validate that POI categories are
 *   supported by the POI component and the Content access modules.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>>
    
    > validateCategoriesStubDispatcher;
/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
    
    > getAvailableCategoriesStubDispatcher;
/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getRootCategoryStubDispatcher;
/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
    
    > getChildrenCategoriesStubDispatcher;
/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
    
    > getParentCategoriesStubDispatcher;
/**
 * description: This method retrieves the details associated to one or more POI categories.    
 *       It contains the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ... .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>>
    
    > getCategoriesDetailsStubDispatcher;
/**
 * description: This method creates a new search input and retrieves a handle .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > createPoiSearchHandleStubDispatcher;
/**
 * description: This method deletes a search input and its associated resources.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > deletePoiSearchHandleStubDispatcher;
/**
 * description: This method sets the location to start the search around.         If a route
 *   handle was defined before, it will be replaced by this location.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>,
    std::tuple<>
    
    > setCenterStubDispatcher;
/**
 * description: This method allows to start a POI search along a guided route.         The
 *   route handle must be valid or the POI search will failed.         If a search
 *   location was defined before, it will be replaced by the route.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t, uint32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setRouteHandleStubDispatcher;
/**
 * description: This method sets the POI categories for the current search input and the
 *   corresponding result-lists for the current session .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>>,
    std::tuple<>
    
    > setCategoriesStubDispatcher;
/**
 * description: This method set POI attributes (optional) for the current search input and the
 *   corresponding result-lists for the current session         An attribute is
 *   attached to a category.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>>,
    std::tuple<>
    
    > setAttributesStubDispatcher;
/**
 * description: This method sends the search input for the search handle.         The search
 *   will start with the either the location or the route handle.         If no
 *   positon or route handle were configured, the search will use the vehicle
 *   position are center location.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::string, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > startPoiSearchStubDispatcher;
/**
 * description: This method cancels the search for the current session.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > cancelPoiSearchStubDispatcher;
/**
 * description: This method starts to check for POI aound vehicle according to the criteria
 *   defined with the unique handle.         By default, it will search for POI
 *   around vehicle position with default radius defined for each categories.      
 *     If a route handle was defined, it will search along the route with default
 *   categorie's radius.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::string, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > startPoiProximityAlertStubDispatcher;
/**
 * description: This method cancels the search for the current session.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > cancelPoiProximityAlertStubDispatcher;
/**
 * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, uint16_t, uint16_t, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>>,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, uint16_t, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>>
    
    > requestResultListStubDispatcher;
/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... ..
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
    
    > getPoiDetailsStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    POISearchDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class POISearchDBusStubAdapter
    : public POISearchDBusStubAdapterInternal,
      public std::enable_shared_from_this<POISearchDBusStubAdapter> {
public:
    POISearchDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          POISearchDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_DBUS_STUB_ADAPTER_HPP_
