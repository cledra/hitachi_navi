/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers a set of common methods for Content Access Modules (CAM).
 *   The CAM provide and update POI and categories information from remote sources
 *   to the POIService modules.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/poiservice/POIServiceTypes.hpp>

#include <v4/org/genivi/navigation/poiservice/POIContentAccess.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service POIContentAccess. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class POIContentAccessStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual POIContentAccess {
 public:



    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for POIContentAccess.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class POIContentAccessStubRemoteEvent
{
public:
    virtual ~POIContentAccessStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service POIContentAccess to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class POIContentAccessStub
    : public virtual CommonAPI::Stub<POIContentAccessStubAdapter, POIContentAccessStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId)>registerContentAccessModuleReply_t;
    typedef std::function<void ()>unRegisterContentAccessModuleReply_t;
    typedef std::function<void ()>registerPoiCategoriesReply_t;
    typedef std::function<void ()>updateCategoriesReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategoriesId)>addCategoriesReply_t;
    typedef std::function<void ()>removeCategoriesReply_t;

    virtual ~POIContentAccessStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: Register to the POI provider module          When the CAM registers, it
     *   provides a name and then get a unique id. This id must be used everytime the
     *   CAM communicates with the POI service component.         After the
     *   registration is done, the CAM can start to update POI categories and POI
     *   attributes as well as registers POI categories to search for.
     */
    /// This is the method that will be called on remote calls on the method registerContentAccessModule.
    virtual void registerContentAccessModule(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _moduleName, registerContentAccessModuleReply_t _reply) = 0;
    /**
     * description: Remove CAM from POI provider module.
     */
    /// This is the method that will be called on remote calls on the method unRegisterContentAccessModule.
    virtual void unRegisterContentAccessModule(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, unRegisterContentAccessModuleReply_t _reply) = 0;
    /**
     * description: Register to the POI provider module the categories you can search for POI.     
     *      The categories could be predifined one or customized ones. In order to
     *   register a customized category, you might need to create it before and add it
     *   to the POI service component.
     */
    /// This is the method that will be called on remote calls on the method registerPoiCategories.
    virtual void registerPoiCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategories, registerPoiCategoriesReply_t _reply) = 0;
    /**
     * description: Update categories in the POI service component. It could be a predifined or a
     *   customed one.         The CAM provides for each categories the list of
     *   attributes (mandatories like name or optional) it wants to update.        
     *   Depending on the local database write policy, the CAM might only be able to
     *   update customized attributes for a category and not the predefined ones so
     *   some update could be rejected.
     */
    /// This is the method that will be called on remote calls on the method updateCategories.
    virtual void updateCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> _poiCategories, updateCategoriesReply_t _reply) = 0;
    /**
     * description: Add new categories to the POI service component.         The CAM provides for
     *   each categories the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ...  .
     */
    /// This is the method that will be called on remote calls on the method addCategories.
    virtual void addCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> _poiCategories, addCategoriesReply_t _reply) = 0;
    /**
     * description: Remove categories from the POI service component. It could be a predifined or a
     *   customed one.         Depending on the local database write policy, the CAM
     *   might only not be able to remove some categories.
     */
    /// This is the method that will be called on remote calls on the method removeCategories.
    virtual void removeCategories(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID _camId, std::vector<::v4::org::genivi::CommonTypes::CategoryID> _poiCategories, removeCategoriesReply_t _reply) = 0;

    using CommonAPI::Stub<POIContentAccessStubAdapter, POIContentAccessStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<POIContentAccessStubAdapter, POIContentAccessStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<POIContentAccessStubAdapter, POIContentAccessStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef POIContentAccessStubRemoteEvent RemoteEventType;
    typedef POIContentAccess StubInterface;
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_STUB_HPP_
