/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_PROXY_BASE_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_PROXY_BASE_HPP_

#include <v4/org/genivi/navigation/poiservice/POIContentAccessModule.hpp>


#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>
#include <v4/org/genivi/navigation/poiservice/POIServiceTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

class POIContentAccessModuleProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Settings>
    > ConfigurationChangedEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::CommonTypes::CategoryID>
    > CategoriesRemovedEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>
    > POIAddedEvent;
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>
    > POIRemovedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>
    > SearchStatusChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetLocaleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const std::string&, const std::string&)> GetLocaleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>&)> GetSupportedLocalesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>&)> GetAvailableCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::CategoryID&)> GetRootCategoryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>&)> GetChildrenCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>&)> GetParentCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::CategoryID&)> CreateCategoryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RemoveCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> AddPOIsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> RemovePOIsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> PoiSearchStartedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> PoiSearchCanceledAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState&, const uint16_t&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>&)> ResultListRequestedAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>&)> PoiDetailsRequestedAsyncCallback;


    /**
     * description: ConfigurationChanged = This signal is sent to the clients when one or more
     *   configuration settings changes.
     */
    virtual ConfigurationChangedEvent& getConfigurationChangedEvent() = 0;
    /**
     * description: CategoriesRemoved = This signal is emitted when a list of categories and
     *   associated content has been removed from the database.
     */
    virtual CategoriesRemovedEvent& getCategoriesRemovedEvent() = 0;
    /**
     * description: POIAdded = This signal is emitted when a list of POIs and associated content
     *   has been added to the database. It returns the ids.
     */
    virtual POIAddedEvent& getPOIAddedEvent() = 0;
    /**
     * description: POIRemoved = This signal is emitted when a list of POIs and associated content
     *   has been removed from the database.
     */
    virtual POIRemovedEvent& getPOIRemovedEvent() = 0;
    /**
     * description: SearchStatusChanged = This signal updates the search or proximity alert status
     *   of the specified handle.
     */
    virtual SearchStatusChangedEvent& getSearchStatusChangedEvent() = 0;

    /**
     * description: This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set the current language set for the search by poi provider module.         The
     *   language defines the poi and categories name and details language. If the
     *   language is not supported, the default details will be returned in the native
     *   language.
     */
    virtual void setLocale(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setLocaleAsync(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, SetLocaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the current language set for the search by poi provider module.
     */
    virtual void getLocale(CommonAPI::CallStatus &_internalCallStatus, std::string &_languageCode, std::string &_countryCode, std::string &_scriptCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getLocaleAsync(GetLocaleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the supported set of locales for the search by poi provider module.
     */
    virtual void getSupportedLocales(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> &_localeList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     */
    virtual void getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     */
    virtual void getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getRootCategoryAsync(GetRootCategoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     */
    virtual void getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     */
    virtual void getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Creates a category by name and return an unique id.
     */
    virtual void createCategory(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> createCategoryAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CreateCategoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Removes a list of categories. Because of required time to remove it from the
     *   database, a signal is emitted when the deletion is done.
     */
    virtual void removeCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removeCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, RemoveCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Adds a list of POIs to a category. Because of required time to add it to the
     *   database, a signal is emitted when the update is done, that gives the id of
     *   the elements added
     */
    virtual void addPOIs(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addPOIsAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, AddPOIsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Removes a list of POIs to a category. Because of required time to remove it
     *   from the database, a signal is emitted when the update is done.
     */
    virtual void removePOIs(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> removePOIsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, RemovePOIsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is sent by the POI service component to inform all the CAM that a
     *   new POI search was started.         It provides all the relevant search
     *   parameters. Of course the CAM will only be aware of the search if it registers
     *   one of the search categories.
     */
    virtual void poiSearchStarted(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> poiSearchStartedAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, PoiSearchStartedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method cancels the search for the current id.
     */
    virtual void poiSearchCanceled(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> poiSearchCanceledAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, PoiSearchCanceledAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method provides the poi results list found by the CAM.         As the POI
     *   unique id is managed by the POI component, the CAM only provides the POI name,
     *   the category and coordinates as well as all the relevant detailed information.
     */
    virtual void resultListRequested(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails> &_resultList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resultListRequestedAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, ResultListRequestedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... .
     */
    virtual void poiDetailsRequested(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> poiDetailsRequestedAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, PoiDetailsRequestedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_Module_PROXY_BASE_HPP_
