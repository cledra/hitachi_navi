/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_PROXY_BASE_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_PROXY_BASE_HPP_

#include <v4/org/genivi/navigation/poiservice/POISearch.hpp>


#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>
#include <v4/org/genivi/navigation/poiservice/POIServiceTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

class POISearchProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason>
    > CategoriesUpdatedEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState
    > PoiStatusEvent;
    typedef CommonAPI::Event<
        ::v4::org::genivi::navigation::NavigationTypes::Handle, uint16_t
    > ResultListChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::Version&)> GetVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>&)> ValidateCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>&)> GetAvailableCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::CommonTypes::CategoryID&)> GetRootCategoryAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>&)> GetChildrenCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>&)> GetParentCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>&)> GetCategoriesDetailsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::NavigationTypes::Handle&)> CreatePoiSearchHandleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> DeletePoiSearchHandleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCenterAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetRouteHandleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetCategoriesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetAttributesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> StartPoiSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> CancelPoiSearchAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> StartPoiProximityAlertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> CancelPoiProximityAlertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState&, const uint16_t&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>&)> RequestResultListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>&)> GetPoiDetailsAsyncCallback;


    /**
     * description: This signal indicates that one or more POI categories were added, updated or
     *   removed.
     */
    virtual CategoriesUpdatedEvent& getCategoriesUpdatedEvent() = 0;
    /**
     * description: This signal updates the search or proximity alert status of the specified
     *   handle.
     */
    virtual PoiStatusEvent& getPoiStatusEvent() = 0;
    /**
     * description: This signal updates in the poi results list.
     */
    virtual ResultListChangedEvent& getResultListChangedEvent() = 0;

    /**
     * description: This method returns the API version implemented by the content access module.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method allows the application to validate that POI categories are
     *   supported by the POI component and the Content access modules.
     */
    virtual void validateCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus> &_results, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> validateCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, ValidateCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     */
    virtual void getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     */
    virtual void getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getRootCategoryAsync(GetRootCategoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     */
    virtual void getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     */
    virtual void getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method retrieves the details associated to one or more POI categories.    
     *       It contains the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ... .
     */
    virtual void getCategoriesDetails(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category> &_results, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCategoriesDetailsAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, GetCategoriesDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method creates a new search input and retrieves a handle .
     */
    virtual void createPoiSearchHandle(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> createPoiSearchHandleAsync(CreatePoiSearchHandleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method deletes a search input and its associated resources.
     */
    virtual void deletePoiSearchHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deletePoiSearchHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, DeletePoiSearchHandleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method sets the location to start the search around.         If a route
     *   handle was defined before, it will be replaced by this location.
     */
    virtual void setCenter(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCenterAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, SetCenterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method allows to start a POI search along a guided route.         The
     *   route handle must be valid or the POI search will failed.         If a search
     *   location was defined before, it will be replaced by the route.
     */
    virtual void setRouteHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setRouteHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, SetRouteHandleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method sets the POI categories for the current search input and the
     *   corresponding result-lists for the current session .
     */
    virtual void setCategories(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setCategoriesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, SetCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method set POI attributes (optional) for the current search input and the
     *   corresponding result-lists for the current session         An attribute is
     *   attached to a category.
     */
    virtual void setAttributes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setAttributesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, SetAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method sends the search input for the search handle.         The search
     *   will start with the either the location or the route handle.         If no
     *   positon or route handle were configured, the search will use the vehicle
     *   position are center location.
     */
    virtual void startPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method cancels the search for the current session.
     */
    virtual void cancelPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> cancelPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method starts to check for POI aound vehicle according to the criteria
     *   defined with the unique handle.         By default, it will search for POI
     *   around vehicle position with default radius defined for each categories.      
     *     If a route handle was defined, it will search along the route with default
     *   categorie's radius.
     */
    virtual void startPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiProximityAlertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method cancels the search for the current session.
     */
    virtual void cancelPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> cancelPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiProximityAlertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
     */
    virtual void requestResultList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult> &_resultListWindow, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> requestResultListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, RequestResultListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... ..
     */
    virtual void getPoiDetails(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPoiDetailsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, GetPoiDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_PROXY_BASE_HPP_
