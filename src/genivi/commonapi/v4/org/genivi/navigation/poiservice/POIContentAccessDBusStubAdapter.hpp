/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers a set of common methods for Content Access Modules (CAM).
 *   The CAM provide and update POI and categories information from remote sources
 *   to the POIService modules.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/poiservice/POIContentAccessStub.hpp>
#include "v4/org/genivi/navigation/poiservice/POIContentAccessDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/poiservice/POIServiceTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

typedef CommonAPI::DBus::DBusStubAdapterHelper<POIContentAccessStub> POIContentAccessDBusStubAdapterHelper;

class POIContentAccessDBusStubAdapterInternal
    : public virtual POIContentAccessStubAdapter,
      public POIContentAccessDBusStubAdapterHelper
{
public:
    POIContentAccessDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~POIContentAccessDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return POIContentAccess::getInterface();
    }




    const POIContentAccessDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
        CommonAPI::Version
        > getPOIContentAccessInterfaceVersionStubDispatcher;



/**
 * description: Register to the POI provider module          When the CAM registers, it
 *   provides a name and then get a unique id. This id must be used everytime the
 *   CAM communicates with the POI service component.         After the
 *   registration is done, the CAM can start to update POI categories and POI
 *   attributes as well as registers POI categories to search for.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<std::string>,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > registerContentAccessModuleStubDispatcher;
/**
 * description: Remove CAM from POI provider module.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > unRegisterContentAccessModuleStubDispatcher;
/**
 * description: Register to the POI provider module the categories you can search for POI.     
 *      The categories could be predifined one or customized ones. In order to
 *   register a customized category, you might need to create it before and add it
 *   to the POI service component.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > registerPoiCategoriesStubDispatcher;
/**
 * description: Update categories in the POI service component. It could be a predifined or a
 *   customed one.         The CAM provides for each categories the list of
 *   attributes (mandatories like name or optional) it wants to update.        
 *   Depending on the local database write policy, the CAM might only be able to
 *   update customized attributes for a category and not the predefined ones so
 *   some update could be rejected.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>>,
    std::tuple<>
    
    > updateCategoriesStubDispatcher;
/**
 * description: Add new categories to the POI service component.         The CAM provides for
 *   each categories the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ...  .
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>>,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > addCategoriesStubDispatcher;
/**
 * description: Remove categories from the POI service component. It could be a predifined or a
 *   customed one.         Depending on the local database write policy, the CAM
 *   might only not be able to remove some categories.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POIContentAccessStub,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > removeCategoriesStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    POIContentAccessDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class POIContentAccessDBusStubAdapter
    : public POIContentAccessDBusStubAdapterInternal,
      public std::enable_shared_from_this<POIContentAccessDBusStubAdapter> {
public:
    POIContentAccessDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          POIContentAccessDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Content_Access_DBUS_STUB_ADAPTER_HPP_
