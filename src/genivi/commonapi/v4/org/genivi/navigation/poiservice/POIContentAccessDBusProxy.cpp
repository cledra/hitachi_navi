/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers a set of common methods for Content Access Modules (CAM).
 *   The CAM provide and update POI and categories information from remote sources
 *   to the POIService modules.
 */
#include <v4/org/genivi/navigation/poiservice/POIContentAccessDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPOIContentAccessDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<POIContentAccessDBusProxy>(_address, _connection);
}

INITIALIZER(registerPOIContentAccessDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		POIContentAccess::getInterface(),
		&createPOIContentAccessDBusProxy);
}

POIContentAccessDBusProxy::POIContentAccessDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}


    
    /**
     * description: Register to the POI provider module          When the CAM registers, it
     *   provides a name and then get a unique id. This id must be used everytime the
     *   CAM communicates with the POI service component.         After the
     *   registration is done, the CAM can start to update POI categories and POI
     *   attributes as well as registers POI categories to search for.
     */
    void POIContentAccessDBusProxy::registerContentAccessModule(const std::string &_moduleName, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_moduleName(_moduleName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "registerContentAccessModule",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_moduleName,
_internalCallStatus,
deploy_camId);
_camId = deploy_camId.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessDBusProxy::registerContentAccessModuleAsync(const std::string &_moduleName, RegisterContentAccessModuleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_moduleName(_moduleName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "registerContentAccessModule",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_moduleName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> _camId) {
        	if (_callback)
        		_callback(_internalCallStatus, _camId.getValue());
        },
        std::make_tuple(deploy_camId));
    }
    /**
     * description: Remove CAM from POI provider module.
     */
    void POIContentAccessDBusProxy::unRegisterContentAccessModule(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "unRegisterContentAccessModule",
        "y",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_camId,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessDBusProxy::unRegisterContentAccessModuleAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, UnRegisterContentAccessModuleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "unRegisterContentAccessModule",
        "y",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_camId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Register to the POI provider module the categories you can search for POI.     
     *      The categories could be predifined one or customized ones. In order to
     *   register a customized category, you might need to create it before and add it
     *   to the POI service component.
     */
    void POIContentAccessDBusProxy::registerPoiCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "registerPoiCategories",
        "yau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_camId, deploy_poiCategories,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessDBusProxy::registerPoiCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RegisterPoiCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "registerPoiCategories",
        "yau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_camId, deploy_poiCategories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Update categories in the POI service component. It could be a predifined or a
     *   customed one.         The CAM provides for each categories the list of
     *   attributes (mandatories like name or optional) it wants to update.        
     *   Depending on the local database write policy, the CAM might only be able to
     *   update customized attributes for a category and not the predefined ones so
     *   some update could be rejected.
     */
    void POIContentAccessDBusProxy::updateCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "updateCategories",
        "ya(ua(usia(is(yv)))a(us))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_camId, deploy_poiCategories,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessDBusProxy::updateCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate> &_poiCategories, UpdateCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategoryUpdate>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryUpdateDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "updateCategories",
        "ya(ua(usia(is(yv)))a(us))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_camId, deploy_poiCategories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Add new categories to the POI service component.         The CAM provides for
     *   each categories the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ...  .
     */
    void POIContentAccessDBusProxy::addCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategoriesId, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoriesId(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodWithReply(
        *this,
        "addCategories",
        "ya((au(yv)ss(yv))a(usia(is(yv)))a(us))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_camId, deploy_poiCategories,
_internalCallStatus,
deploy_poiCategoriesId);
_poiCategoriesId = deploy_poiCategoriesId.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessDBusProxy::addCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory> &_poiCategories, AddCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategoriesId(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>,CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
            >
        	>::callMethodAsync(
        *this,
        "addCategories",
        "ya((au(yv)ss(yv))a(usia(is(yv)))a(us))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_camId, deploy_poiCategories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> _poiCategoriesId) {
        	if (_callback)
        		_callback(_internalCallStatus, _poiCategoriesId.getValue());
        },
        std::make_tuple(deploy_poiCategoriesId));
    }
    /**
     * description: Remove categories from the POI service component. It could be a predifined or a
     *   customed one.         Depending on the local database write policy, the CAM
     *   might only not be able to remove some categories.
     */
    void POIContentAccessDBusProxy::removeCategories(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "removeCategories",
        "yau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_camId, deploy_poiCategories,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessDBusProxy::removeCategoriesAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_poiCategories, RemoveCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "removeCategories",
        "yau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_camId, deploy_poiCategories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void POIContentAccessDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace poiservice
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
