/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/poiservice/POISearch.hpp>
#include <v4/org/genivi/navigation/poiservice/POISearchDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createPOISearchDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<POISearchDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerPOISearchDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	POISearch::getInterface(), &createPOISearchDBusStubAdapter);
}

POISearchDBusStubAdapterInternal::~POISearchDBusStubAdapterInternal() {
    deactivateManagedInstances();
    POISearchDBusStubAdapterHelper::deinit();
}

void POISearchDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* POISearchDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: This signal indicates that one or more POI categories were added, updated or
         *   removed.
         */
        "<signal name=\"CategoriesUpdated\">\n"
            "<arg name=\"poiCategories\" type=\"a(ui)\" />\n"
        "</signal>\n"
        /**
         * description: This signal updates the search or proximity alert status of the specified
         *   handle.
         */
        "<signal name=\"PoiStatus\">\n"
            "<arg name=\"poiSearchHandle\" type=\"u\" />\n"
            "<arg name=\"statusValue\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: This signal updates in the poi results list.
         */
        "<signal name=\"ResultListChanged\">\n"
            "<arg name=\"poiSearchHandle\" type=\"u\" />\n"
            "<arg name=\"resultListSize\" type=\"q\" />\n"
        "</signal>\n"
        /**
         * description: This method returns the API version implemented by the content access module.
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method allows the application to validate that POI categories are
         *   supported by the POI component and the Content access modules.
         */
        "<method name=\"validateCategories\">\n"
            "<arg name=\"_categories\" type=\"au\" direction=\"in\" />\n"
            "<arg name=\"_results\" type=\"a(ub)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves the list od POI categories available (pre-defined and
         *   custom).
         */
        "<method name=\"getAvailableCategories\">\n"
            "<arg name=\"_categories\" type=\"a(usb)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the root category id. That would be ALL_CATEGORIES.
         */
        "<method name=\"getRootCategory\">\n"
            "<arg name=\"_category\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the children categories id and type (top level) from the a parent unique id.
         */
        "<method name=\"getChildrenCategories\">\n"
            "<arg name=\"_category\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_categories\" type=\"a(ub)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Get the parent categories id and type (top level) from the a unique id.
         */
        "<method name=\"getParentCategories\">\n"
            "<arg name=\"_category\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_categories\" type=\"a(ub)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves the details associated to one or more POI categories.    
         *       It contains the name, the parent categories, the top level attribute, the
         *   list of attributes, the icons, ... .
         */
        "<method name=\"getCategoriesDetails\">\n"
            "<arg name=\"_categories\" type=\"au\" direction=\"in\" />\n"
            "<arg name=\"_results\" type=\"a((uau(yv)sbs(yv))a(usia(is(yv)))a(us))\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method creates a new search input and retrieves a handle .
         */
        "<method name=\"createPoiSearchHandle\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method deletes a search input and its associated resources.
         */
        "<method name=\"deletePoiSearchHandle\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method sets the location to start the search around.         If a route
         *   handle was defined before, it will be replaced by this location.
         */
        "<method name=\"setCenter\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_location\" type=\"(ddd)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method allows to start a POI search along a guided route.         The
         *   route handle must be valid or the POI search will failed.         If a search
         *   location was defined before, it will be replaced by the route.
         */
        "<method name=\"setRouteHandle\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_startSearchOffset\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_endSearchOffset\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method sets the POI categories for the current search input and the
         *   corresponding result-lists for the current session .
         */
        "<method name=\"setCategories\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_poiCategories\" type=\"a(uu)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method set POI attributes (optional) for the current search input and the
         *   corresponding result-lists for the current session         An attribute is
         *   attached to a category.
         */
        "<method name=\"setAttributes\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_poiAttributes\" type=\"a(uui(yv)ib)\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method sends the search input for the search handle.         The search
         *   will start with the either the location or the route handle.         If no
         *   positon or route handle were configured, the search will use the vehicle
         *   position are center location.
         */
        "<method name=\"startPoiSearch\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_inputString\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sortOption\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method cancels the search for the current session.
         */
        "<method name=\"cancelPoiSearch\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method starts to check for POI aound vehicle according to the criteria
         *   defined with the unique handle.         By default, it will search for POI
         *   around vehicle position with default radius defined for each categories.      
         *     If a route handle was defined, it will search along the route with default
         *   categorie's radius.
         */
        "<method name=\"startPoiProximityAlert\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_inputString\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_sortOption\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method cancels the search for the current session.
         */
        "<method name=\"cancelPoiProximityAlert\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
         */
        "<method name=\"requestResultList\">\n"
            "<arg name=\"_poiSearchHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_offset\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_maxWindowSize\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_attributeList\" type=\"au\" direction=\"in\" />\n"
            "<arg name=\"_statusValue\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_resultListSize\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_resultListWindow\" type=\"a(uuia(ui(yv)))\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves the details associated to one or more POI.         It
         *   contains the name, the parent categories, the list of attributes, the icons,
         *   ... ..
         */
        "<method name=\"getPoiDetails\">\n"
            "<arg name=\"_id\" type=\"au\" direction=\"in\" />\n"
            "<arg name=\"_results\" type=\"a((us(ddd))aua(ui(yv)))\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::poiservice::POISearchStub,
        CommonAPI::Version
        > POISearchDBusStubAdapterInternal::getPOISearchInterfaceVersionStubDispatcher(&POISearchStub::getInterfaceVersion, "uu");




/**
 * description: This method returns the API version implemented by the content access module.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > POISearchDBusStubAdapterInternal::getVersionStubDispatcher(
    &POISearchStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: This method allows the application to validate that POI categories are
 *   supported by the POI component and the Content access modules.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::validateCategoriesStubDispatcher(
    &POISearchStub::validateCategories, "a(ub)",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndStatusDeployment_t>*>(nullptr)));

/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::getAvailableCategoriesStubDispatcher(
    &POISearchStub::getAvailableCategories, "a(usb)",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>*>(nullptr)));

/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > POISearchDBusStubAdapterInternal::getRootCategoryStubDispatcher(
    &POISearchStub::getRootCategory, "u",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::getChildrenCategoriesStubDispatcher(
    &POISearchStub::getChildrenCategories, "a(ub)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr)));

/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::CommonTypes::CategoryID>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::getParentCategoriesStubDispatcher(
    &POISearchStub::getParentCategories, "a(ub)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr)));

/**
 * description: This method retrieves the details associated to one or more POI categories.    
 *       It contains the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ... .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<std::vector<::v4::org::genivi::CommonTypes::CategoryID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::getCategoriesDetailsStubDispatcher(
    &POISearchStub::getCategoriesDetails, "a((uau(yv)sbs(yv))a(usia(is(yv)))a(us))",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryDeployment_t>*>(nullptr)));

/**
 * description: This method creates a new search input and retrieves a handle .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > POISearchDBusStubAdapterInternal::createPoiSearchHandleStubDispatcher(
    &POISearchStub::createPoiSearchHandle, "u",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: This method deletes a search input and its associated resources.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::deletePoiSearchHandleStubDispatcher(
    &POISearchStub::deletePoiSearchHandle, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method sets the location to start the search around.         If a route
 *   handle was defined before, it will be replaced by this location.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::setCenterStubDispatcher(
    &POISearchStub::setCenter, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method allows to start a POI search along a guided route.         The
 *   route handle must be valid or the POI search will failed.         If a search
 *   location was defined before, it will be replaced by the route.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, uint32_t, uint32_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::setRouteHandleStubDispatcher(
    &POISearchStub::setRouteHandle, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method sets the POI categories for the current search input and the
 *   corresponding result-lists for the current session .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::setCategoriesStubDispatcher(
    &POISearchStub::setCategories, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method set POI attributes (optional) for the current search input and the
 *   corresponding result-lists for the current session         An attribute is
 *   attached to a category.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::setAttributesStubDispatcher(
    &POISearchStub::setAttributes, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method sends the search input for the search handle.         The search
 *   will start with the either the location or the route handle.         If no
 *   positon or route handle were configured, the search will use the vehicle
 *   position are center location.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::string, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::startPoiSearchStubDispatcher(
    &POISearchStub::startPoiSearch, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method cancels the search for the current session.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::cancelPoiSearchStubDispatcher(
    &POISearchStub::cancelPoiSearch, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method starts to check for POI aound vehicle according to the criteria
 *   defined with the unique handle.         By default, it will search for POI
 *   around vehicle position with default radius defined for each categories.      
 *     If a route handle was defined, it will search along the route with default
 *   categorie's radius.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::string, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::startPoiProximityAlertStubDispatcher(
    &POISearchStub::startPoiProximityAlert, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method cancels the search for the current session.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > POISearchDBusStubAdapterInternal::cancelPoiProximityAlertStubDispatcher(
    &POISearchStub::cancelPoiProximityAlert, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, uint16_t, uint16_t, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>>,
    std::tuple<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, uint16_t, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::requestResultListStubDispatcher(
    &POISearchStub::requestResultList, "iqa(uuia(ui(yv)))",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDeployment_t>*>(nullptr)));

/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... ..
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::poiservice::POISearchStub,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
    
    > POISearchDBusStubAdapterInternal::getPoiDetailsStubDispatcher(
    &POISearchStub::getPoiDetails, "a((us(ddd))aua(ui(yv)))",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>*>(nullptr)));



/**
 * description: This signal indicates that one or more POI categories were added, updated or
 *   removed.
 */
void POISearchDBusStubAdapterInternal::fireCategoriesUpdatedEvent(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason>& poiCategories) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndReasonDeployment_t>>
    >>::sendSignal(
            *this,
            "CategoriesUpdated",
            "a(ui)",
    CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndReason>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndReasonDeployment_t>>(poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndReasonDeployment_t>*>(nullptr))
    );
}
/**
 * description: This signal updates the search or proximity alert status of the specified
 *   handle.
 */
void POISearchDBusStubAdapterInternal::firePoiStatusEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& poiSearchHandle, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState& statusValue) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState
    >>::sendSignal(
            *this,
            "PoiStatus",
            "ui",
    poiSearchHandle,
    statusValue
    );
}
/**
 * description: This signal updates in the poi results list.
 */
void POISearchDBusStubAdapterInternal::fireResultListChangedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& poiSearchHandle, const uint16_t& resultListSize) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::NavigationTypes::Handle,
    uint16_t
    >>::sendSignal(
            *this,
            "ResultListChanged",
            "uq",
    poiSearchHandle,
    resultListSize
    );
}


const POISearchDBusStubAdapterHelper::StubDispatcherTable& POISearchDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& POISearchDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

POISearchDBusStubAdapterInternal::POISearchDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      POISearchDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<POISearchStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: This method returns the API version implemented by the content access module.
             */
            { { "getVersion", "" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: This method allows the application to validate that POI categories are
             *   supported by the POI component and the Content access modules.
             */
            { { "validateCategories", "au" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::validateCategoriesStubDispatcher },
            /**
             * description: This method retrieves the list od POI categories available (pre-defined and
             *   custom).
             */
            { { "getAvailableCategories", "" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getAvailableCategoriesStubDispatcher },
            /**
             * description: Get the root category id. That would be ALL_CATEGORIES.
             */
            { { "getRootCategory", "" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getRootCategoryStubDispatcher },
            /**
             * description: Get the children categories id and type (top level) from the a parent unique id.
             */
            { { "getChildrenCategories", "u" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getChildrenCategoriesStubDispatcher },
            /**
             * description: Get the parent categories id and type (top level) from the a unique id.
             */
            { { "getParentCategories", "u" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getParentCategoriesStubDispatcher },
            /**
             * description: This method retrieves the details associated to one or more POI categories.    
             *       It contains the name, the parent categories, the top level attribute, the
             *   list of attributes, the icons, ... .
             */
            { { "getCategoriesDetails", "au" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getCategoriesDetailsStubDispatcher },
            /**
             * description: This method creates a new search input and retrieves a handle .
             */
            { { "createPoiSearchHandle", "" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::createPoiSearchHandleStubDispatcher },
            /**
             * description: This method deletes a search input and its associated resources.
             */
            { { "deletePoiSearchHandle", "u" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::deletePoiSearchHandleStubDispatcher },
            /**
             * description: This method sets the location to start the search around.         If a route
             *   handle was defined before, it will be replaced by this location.
             */
            { { "setCenter", "u(ddd)" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::setCenterStubDispatcher },
            /**
             * description: This method allows to start a POI search along a guided route.         The
             *   route handle must be valid or the POI search will failed.         If a search
             *   location was defined before, it will be replaced by the route.
             */
            { { "setRouteHandle", "uuuuu" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::setRouteHandleStubDispatcher },
            /**
             * description: This method sets the POI categories for the current search input and the
             *   corresponding result-lists for the current session .
             */
            { { "setCategories", "ua(uu)" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::setCategoriesStubDispatcher },
            /**
             * description: This method set POI attributes (optional) for the current search input and the
             *   corresponding result-lists for the current session         An attribute is
             *   attached to a category.
             */
            { { "setAttributes", "ua(uui(yv)ib)" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::setAttributesStubDispatcher },
            /**
             * description: This method sends the search input for the search handle.         The search
             *   will start with the either the location or the route handle.         If no
             *   positon or route handle were configured, the search will use the vehicle
             *   position are center location.
             */
            { { "startPoiSearch", "usi" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::startPoiSearchStubDispatcher },
            /**
             * description: This method cancels the search for the current session.
             */
            { { "cancelPoiSearch", "u" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::cancelPoiSearchStubDispatcher },
            /**
             * description: This method starts to check for POI aound vehicle according to the criteria
             *   defined with the unique handle.         By default, it will search for POI
             *   around vehicle position with default radius defined for each categories.      
             *     If a route handle was defined, it will search along the route with default
             *   categorie's radius.
             */
            { { "startPoiProximityAlert", "usi" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::startPoiProximityAlertStubDispatcher },
            /**
             * description: This method cancels the search for the current session.
             */
            { { "cancelPoiProximityAlert", "u" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::cancelPoiProximityAlertStubDispatcher },
            /**
             * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
             */
            { { "requestResultList", "uqqau" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::requestResultListStubDispatcher },
            /**
             * description: This method retrieves the details associated to one or more POI.         It
             *   contains the name, the parent categories, the list of attributes, the icons,
             *   ... ..
             */
            { { "getPoiDetails", "au" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getPoiDetailsStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::poiservice::POISearchDBusStubAdapterInternal::getPOISearchInterfaceVersionStubDispatcher });
}

bool POISearchDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
