/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_PROXY_HPP_

#include <v4/org/genivi/navigation/poiservice/POISearchProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

template <typename ... _AttributeExtensions>
class POISearchProxy
    : virtual public POISearch, 
      virtual public POISearchProxyBase,
      virtual public _AttributeExtensions... {
public:
    POISearchProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~POISearchProxy();

    typedef POISearch InterfaceType;



    /**
     * description: This signal indicates that one or more POI categories were added, updated or
     *   removed.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast CategoriesUpdated.
     */
    virtual CategoriesUpdatedEvent& getCategoriesUpdatedEvent() {
        return delegate_->getCategoriesUpdatedEvent();
    }
    /**
     * description: This signal updates the search or proximity alert status of the specified
     *   handle.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast PoiStatus.
     */
    virtual PoiStatusEvent& getPoiStatusEvent() {
        return delegate_->getPoiStatusEvent();
    }
    /**
     * description: This signal updates in the poi results list.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ResultListChanged.
     */
    virtual ResultListChangedEvent& getResultListChangedEvent() {
        return delegate_->getResultListChangedEvent();
    }

    /**
     * description: This method returns the API version implemented by the content access module.
     * Calls getVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method allows the application to validate that POI categories are
     *   supported by the POI component and the Content access modules.
     * Calls validateCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void validateCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus> &_results, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls validateCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> validateCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, ValidateCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     * Calls getAvailableCategories with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAvailableCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     * Calls getRootCategory with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getRootCategory with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getRootCategoryAsync(GetRootCategoryAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     * Calls getChildrenCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getChildrenCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     * Calls getParentCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getParentCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method retrieves the details associated to one or more POI categories.    
     *       It contains the name, the parent categories, the top level attribute, the
     *   list of attributes, the icons, ... .
     * Calls getCategoriesDetails with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCategoriesDetails(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category> &_results, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCategoriesDetails with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCategoriesDetailsAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, GetCategoriesDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method creates a new search input and retrieves a handle .
     * Calls createPoiSearchHandle with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void createPoiSearchHandle(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls createPoiSearchHandle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> createPoiSearchHandleAsync(CreatePoiSearchHandleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method deletes a search input and its associated resources.
     * Calls deletePoiSearchHandle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deletePoiSearchHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deletePoiSearchHandle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deletePoiSearchHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, DeletePoiSearchHandleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method sets the location to start the search around.         If a route
     *   handle was defined before, it will be replaced by this location.
     * Calls setCenter with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCenter(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCenter with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCenterAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, SetCenterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method allows to start a POI search along a guided route.         The
     *   route handle must be valid or the POI search will failed.         If a search
     *   location was defined before, it will be replaced by the route.
     * Calls setRouteHandle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setRouteHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setRouteHandle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setRouteHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, SetRouteHandleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method sets the POI categories for the current search input and the
     *   corresponding result-lists for the current session .
     * Calls setCategories with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setCategories(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setCategories with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setCategoriesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, SetCategoriesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method set POI attributes (optional) for the current search input and the
     *   corresponding result-lists for the current session         An attribute is
     *   attached to a category.
     * Calls setAttributes with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setAttributes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setAttributes with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setAttributesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, SetAttributesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method sends the search input for the search handle.         The search
     *   will start with the either the location or the route handle.         If no
     *   positon or route handle were configured, the search will use the vehicle
     *   position are center location.
     * Calls startPoiSearch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startPoiSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method cancels the search for the current session.
     * Calls cancelPoiSearch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void cancelPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls cancelPoiSearch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> cancelPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiSearchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method starts to check for POI aound vehicle according to the criteria
     *   defined with the unique handle.         By default, it will search for POI
     *   around vehicle position with default radius defined for each categories.      
     *     If a route handle was defined, it will search along the route with default
     *   categorie's radius.
     * Calls startPoiProximityAlert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startPoiProximityAlert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiProximityAlertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method cancels the search for the current session.
     * Calls cancelPoiProximityAlert with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void cancelPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls cancelPoiProximityAlert with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> cancelPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiProximityAlertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
     * Calls requestResultList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestResultList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult> &_resultListWindow, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestResultList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestResultListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, RequestResultListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... ..
     * Calls getPoiDetails with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getPoiDetails(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPoiDetails with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getPoiDetailsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, GetPoiDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<POISearchProxyBase> delegate_;
};

typedef POISearchProxy<> POISearchProxyDefault;


//
// POISearchProxy Implementation
//
template <typename ... _AttributeExtensions>
POISearchProxy<_AttributeExtensions...>::POISearchProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<POISearchProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<POISearchProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
POISearchProxy<_AttributeExtensions...>::~POISearchProxy() {
}

/**
 * description: This method returns the API version implemented by the content access module.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
    delegate_->getVersion(_internalCallStatus, _version, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getVersionAsync(_callback, _info);
}
/**
 * description: This method allows the application to validate that POI categories are
 *   supported by the POI component and the Content access modules.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::validateCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndStatus> &_results, const CommonAPI::CallInfo *_info) {
    delegate_->validateCategories(_categories, _internalCallStatus, _results, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::validateCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, ValidateCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->validateCategoriesAsync(_categories, _callback, _info);
}
/**
 * description: This method retrieves the list od POI categories available (pre-defined and
 *   custom).
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info) {
    delegate_->getAvailableCategories(_internalCallStatus, _categories, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAvailableCategoriesAsync(_callback, _info);
}
/**
 * description: Get the root category id. That would be ALL_CATEGORIES.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info) {
    delegate_->getRootCategory(_internalCallStatus, _category, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getRootCategoryAsync(GetRootCategoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getRootCategoryAsync(_callback, _info);
}
/**
 * description: Get the children categories id and type (top level) from the a parent unique id.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
    delegate_->getChildrenCategories(_category, _internalCallStatus, _categories, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getChildrenCategoriesAsync(_category, _callback, _info);
}
/**
 * description: Get the parent categories id and type (top level) from the a unique id.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
    delegate_->getParentCategories(_category, _internalCallStatus, _categories, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getParentCategoriesAsync(_category, _callback, _info);
}
/**
 * description: This method retrieves the details associated to one or more POI categories.    
 *       It contains the name, the parent categories, the top level attribute, the
 *   list of attributes, the icons, ... .
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getCategoriesDetails(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::Category> &_results, const CommonAPI::CallInfo *_info) {
    delegate_->getCategoriesDetails(_categories, _internalCallStatus, _results, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getCategoriesDetailsAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, GetCategoriesDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCategoriesDetailsAsync(_categories, _callback, _info);
}
/**
 * description: This method creates a new search input and retrieves a handle .
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::createPoiSearchHandle(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const CommonAPI::CallInfo *_info) {
    delegate_->createPoiSearchHandle(_internalCallStatus, _poiSearchHandle, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::createPoiSearchHandleAsync(CreatePoiSearchHandleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->createPoiSearchHandleAsync(_callback, _info);
}
/**
 * description: This method deletes a search input and its associated resources.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::deletePoiSearchHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->deletePoiSearchHandle(_poiSearchHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::deletePoiSearchHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, DeletePoiSearchHandleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deletePoiSearchHandleAsync(_poiSearchHandle, _callback, _info);
}
/**
 * description: This method sets the location to start the search around.         If a route
 *   handle was defined before, it will be replaced by this location.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::setCenter(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCenter(_poiSearchHandle, _location, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::setCenterAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, SetCenterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCenterAsync(_poiSearchHandle, _location, _callback, _info);
}
/**
 * description: This method allows to start a POI search along a guided route.         The
 *   route handle must be valid or the POI search will failed.         If a search
 *   location was defined before, it will be replaced by the route.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::setRouteHandle(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setRouteHandle(_poiSearchHandle, _sessionHandle, _routeHandle, _startSearchOffset, _endSearchOffset, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::setRouteHandleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const uint32_t &_startSearchOffset, const uint32_t &_endSearchOffset, SetRouteHandleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setRouteHandleAsync(_poiSearchHandle, _sessionHandle, _routeHandle, _startSearchOffset, _endSearchOffset, _callback, _info);
}
/**
 * description: This method sets the POI categories for the current search input and the
 *   corresponding result-lists for the current session .
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::setCategories(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setCategories(_poiSearchHandle, _poiCategories, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::setCategoriesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, SetCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setCategoriesAsync(_poiSearchHandle, _poiCategories, _callback, _info);
}
/**
 * description: This method set POI attributes (optional) for the current search input and the
 *   corresponding result-lists for the current session         An attribute is
 *   attached to a category.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::setAttributes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setAttributes(_poiSearchHandle, _poiAttributes, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::setAttributesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, SetAttributesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setAttributesAsync(_poiSearchHandle, _poiAttributes, _callback, _info);
}
/**
 * description: This method sends the search input for the search handle.         The search
 *   will start with the either the location or the route handle.         If no
 *   positon or route handle were configured, the search will use the vehicle
 *   position are center location.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::startPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_sortOption.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startPoiSearch(_poiSearchHandle, _inputString, _sortOption, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::startPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_sortOption.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startPoiSearchAsync(_poiSearchHandle, _inputString, _sortOption, _callback, _info);
}
/**
 * description: This method cancels the search for the current session.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::cancelPoiSearch(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->cancelPoiSearch(_poiSearchHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::cancelPoiSearchAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiSearchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->cancelPoiSearchAsync(_poiSearchHandle, _callback, _info);
}
/**
 * description: This method starts to check for POI aound vehicle according to the criteria
 *   defined with the unique handle.         By default, it will search for POI
 *   around vehicle position with default radius defined for each categories.      
 *     If a route handle was defined, it will search along the route with default
 *   categorie's radius.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::startPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_sortOption.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startPoiProximityAlert(_poiSearchHandle, _inputString, _sortOption, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::startPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, StartPoiProximityAlertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_sortOption.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startPoiProximityAlertAsync(_poiSearchHandle, _inputString, _sortOption, _callback, _info);
}
/**
 * description: This method cancels the search for the current session.
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::cancelPoiProximityAlert(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->cancelPoiProximityAlert(_poiSearchHandle, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::cancelPoiProximityAlertAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CancelPoiProximityAlertAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->cancelPoiProximityAlertAsync(_poiSearchHandle, _callback, _info);
}
/**
 * description: This method gets the poi result list (e.g. after a Search/Scroll call) .
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::requestResultList(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResult> &_resultListWindow, const CommonAPI::CallInfo *_info) {
    delegate_->requestResultList(_poiSearchHandle, _offset, _maxWindowSize, _attributeList, _internalCallStatus, _statusValue, _resultListSize, _resultListWindow, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::requestResultListAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_offset, const uint16_t &_maxWindowSize, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, RequestResultListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestResultListAsync(_poiSearchHandle, _offset, _maxWindowSize, _attributeList, _callback, _info);
}
/**
 * description: This method retrieves the details associated to one or more POI.         It
 *   contains the name, the parent categories, the list of attributes, the icons,
 *   ... ..
 */
template <typename ... _AttributeExtensions>
void POISearchProxy<_AttributeExtensions...>::getPoiDetails(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info) {
    delegate_->getPoiDetails(_id, _internalCallStatus, _results, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> POISearchProxy<_AttributeExtensions...>::getPoiDetailsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_id, GetPoiDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getPoiDetailsAsync(_id, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &POISearchProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool POISearchProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool POISearchProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& POISearchProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& POISearchProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace poiservice
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4



// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_POISERVICE_POI_Search_PROXY_HPP_
