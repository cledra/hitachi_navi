/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the POI search functionality of a
 *   navigation system.
 */
#include <v4/org/genivi/navigation/poiservice/POIContentAccessModuleDBusProxy.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace poiservice {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createPOIContentAccessModuleDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<POIContentAccessModuleDBusProxy>(_address, _connection);
}

INITIALIZER(registerPOIContentAccessModuleDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		POIContentAccessModule::getInterface(),
		&createPOIContentAccessModuleDBusProxy);
}

POIContentAccessModuleDBusProxy::POIContentAccessModuleDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		configurationChanged_(*this, "ConfigurationChanged", "ai", std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))),
		categoriesRemoved_(*this, "CategoriesRemoved", "au", std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))),
		pOIAdded_(*this, "POIAdded", "au", std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))),
		pOIRemoved_(*this, "POIRemoved", "au", std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr))),
		searchStatusChanged_(*this, "SearchStatusChanged", "uiau", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr)))
{
}


POIContentAccessModuleDBusProxy::ConfigurationChangedEvent& POIContentAccessModuleDBusProxy::getConfigurationChangedEvent() {
    return configurationChanged_;
}
POIContentAccessModuleDBusProxy::CategoriesRemovedEvent& POIContentAccessModuleDBusProxy::getCategoriesRemovedEvent() {
    return categoriesRemoved_;
}
POIContentAccessModuleDBusProxy::POIAddedEvent& POIContentAccessModuleDBusProxy::getPOIAddedEvent() {
    return pOIAdded_;
}
POIContentAccessModuleDBusProxy::POIRemovedEvent& POIContentAccessModuleDBusProxy::getPOIRemovedEvent() {
    return pOIRemoved_;
}
POIContentAccessModuleDBusProxy::SearchStatusChangedEvent& POIContentAccessModuleDBusProxy::getSearchStatusChangedEvent() {
    return searchStatusChanged_;
}
    
    /**
     * description: This method returns the API version implemented by the content access module.
     */
    void POIContentAccessModuleDBusProxy::getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_version);
_version = deploy_version.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> deploy_version(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version,::v4::org::genivi::CommonTypes_::VersionDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::Version, ::v4::org::genivi::CommonTypes_::VersionDeployment_t> _version) {
        	if (_callback)
        		_callback(_internalCallStatus, _version.getValue());
        },
        std::make_tuple(deploy_version));
    }
    /**
     * description: Set the current language set for the search by poi provider module.         The
     *   language defines the poi and categories name and details language. If the
     *   language is not supported, the default details will be returned in the native
     *   language.
     */
    void POIContentAccessModuleDBusProxy::setLocale(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_languageCode(_languageCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_countryCode(_countryCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_scriptCode(_scriptCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setLocale",
        "sss",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_languageCode, deploy_countryCode, deploy_scriptCode,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::setLocaleAsync(const std::string &_languageCode, const std::string &_countryCode, const std::string &_scriptCode, SetLocaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_languageCode(_languageCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_countryCode(_countryCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_scriptCode(_scriptCode, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setLocale",
        "sss",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_languageCode, deploy_countryCode, deploy_scriptCode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Get the current language set for the search by poi provider module.
     */
    void POIContentAccessModuleDBusProxy::getLocale(CommonAPI::CallStatus &_internalCallStatus, std::string &_languageCode, std::string &_countryCode, std::string &_scriptCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_languageCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_countryCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_scriptCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getLocale",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_languageCode, deploy_countryCode, deploy_scriptCode);
_languageCode = deploy_languageCode.getValue();
_countryCode = deploy_countryCode.getValue();
_scriptCode = deploy_scriptCode.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getLocaleAsync(GetLocaleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_languageCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_countryCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_scriptCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getLocale",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _languageCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _countryCode, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _scriptCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _languageCode.getValue(), _countryCode.getValue(), _scriptCode.getValue());
        },
        std::make_tuple(deploy_languageCode, deploy_countryCode, deploy_scriptCode));
    }
    /**
     * description: Get the supported set of locales for the search by poi provider module.
     */
    void POIContentAccessModuleDBusProxy::getSupportedLocales(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale> &_localeList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>> deploy_localeList(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getSupportedLocales",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_localeList);
_localeList = deploy_localeList.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getSupportedLocalesAsync(GetSupportedLocalesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>> deploy_localeList(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getSupportedLocales",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Locale>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::LocaleDeployment_t>> _localeList) {
        	if (_callback)
        		_callback(_internalCallStatus, _localeList.getValue());
        },
        std::make_tuple(deploy_localeList));
    }
    /**
     * description: This method retrieves the list od POI categories available (pre-defined and
     *   custom).
     */
    void POIContentAccessModuleDBusProxy::getAvailableCategories(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName> &_categories, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getAvailableCategories",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_categories);
_categories = deploy_categories.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getAvailableCategoriesAsync(GetAvailableCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getAvailableCategories",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndName>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndNameDeployment_t>> _categories) {
        	if (_callback)
        		_callback(_internalCallStatus, _categories.getValue());
        },
        std::make_tuple(deploy_categories));
    }
    /**
     * description: Get the root category id. That would be ALL_CATEGORIES.
     */
    void POIContentAccessModuleDBusProxy::getRootCategory(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_category, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getRootCategory",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_category);
_category = deploy_category.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getRootCategoryAsync(GetRootCategoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getRootCategory",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> _category) {
        	if (_callback)
        		_callback(_internalCallStatus, _category.getValue());
        },
        std::make_tuple(deploy_category));
    }
    /**
     * description: Get the children categories id and type (top level) from the a parent unique id.
     */
    void POIContentAccessModuleDBusProxy::getChildrenCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getChildrenCategories",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_category,
_internalCallStatus,
deploy_categories);
_categories = deploy_categories.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getChildrenCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetChildrenCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getChildrenCategories",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_category,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> _categories) {
        	if (_callback)
        		_callback(_internalCallStatus, _categories.getValue());
        },
        std::make_tuple(deploy_categories));
    }
    /**
     * description: Get the parent categories id and type (top level) from the a unique id.
     */
    void POIContentAccessModuleDBusProxy::getParentCategories(const ::v4::org::genivi::CommonTypes::CategoryID &_category, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel> &_categories, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "getParentCategories",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_category,
_internalCallStatus,
deploy_categories);
_categories = deploy_categories.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::getParentCategoriesAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_category, GetParentCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_category(_category, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> deploy_categories(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "getParentCategories",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_category,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndLevel>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndLevelDeployment_t>> _categories) {
        	if (_callback)
        		_callback(_internalCallStatus, _categories.getValue());
        },
        std::make_tuple(deploy_categories));
    }
    /**
     * description: Creates a category by name and return an unique id.
     */
    void POIContentAccessModuleDBusProxy::createCategory(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory, ::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t> deploy_category(_category, static_cast<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_unique_id(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory, ::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "createCategory",
        "((au(yv)ss(yv))a(usia(is(yv)))a(us))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_category,
_internalCallStatus,
deploy_unique_id);
_unique_id = deploy_unique_id.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::createCategoryAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory &_category, CreateCategoryAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory, ::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t> deploy_category(_category, static_cast<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_unique_id(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CAMCategory, ::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CAMCategoryDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "createCategory",
        "((au(yv)ss(yv))a(usia(is(yv)))a(us))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_category,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> _unique_id) {
        	if (_callback)
        		_callback(_internalCallStatus, _unique_id.getValue());
        },
        std::make_tuple(deploy_unique_id));
    }
    /**
     * description: Removes a list of categories. Because of required time to remove it from the
     *   database, a signal is emitted when the deletion is done.
     */
    void POIContentAccessModuleDBusProxy::removeCategories(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_categories(_categories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "removeCategories",
        "au",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_categories,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::removeCategoriesAsync(const std::vector<::v4::org::genivi::CommonTypes::CategoryID> &_categories, RemoveCategoriesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_categories(_categories, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::CommonTypes::CategoryID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "removeCategories",
        "au",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_categories,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Adds a list of POIs to a category. Because of required time to add it to the
     *   database, a signal is emitted when the update is done, that gives the id of
     *   the elements added
     */
    void POIContentAccessModuleDBusProxy::addPOIs(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_unique_id(_unique_id, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t>> deploy_poiList(_poiList, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "addPOIs",
        "ua(s(ddd)a(ui(yv)))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_unique_id, deploy_poiList,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::addPOIsAsync(const ::v4::org::genivi::CommonTypes::CategoryID &_unique_id, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails> &_poiList, AddPOIsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment> deploy_unique_id(_unique_id, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t>> deploy_poiList(_poiList, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::CommonTypes::CategoryID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiAddedDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiAddedDetailsDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "addPOIs",
        "ua(s(ddd)a(ui(yv)))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_unique_id, deploy_poiList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Removes a list of POIs to a category. Because of required time to remove it
     *   from the database, a signal is emitted when the update is done.
     */
    void POIContentAccessModuleDBusProxy::removePOIs(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_ids(_ids, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "removePOIs",
        "au",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_ids,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::removePOIsAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_ids, RemovePOIsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_ids(_ids, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "removePOIs",
        "au",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_ids,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method is sent by the POI service component to inform all the CAM that a
     *   new POI search was started.         It provides all the relevant search
     *   parameters. Of course the CAM will only be aware of the search if it registers
     *   one of the search categories.
     */
    void POIContentAccessModuleDBusProxy::poiSearchStarted(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxSize(_maxSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_location(_location, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>> deploy_poiAttributes(_poiAttributes, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment> deploy_sortOption(_sortOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t> >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t> >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "poiSearchStarted",
        "uq(ddd)a(uu)a(uui(yv)ib)si",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle, deploy_maxSize, deploy_location, deploy_poiCategories, deploy_poiAttributes, deploy_inputString, deploy_sortOption,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::poiSearchStartedAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const uint16_t &_maxSize, const ::v4::org::genivi::navigation::NavigationTypes::Coordinate3D &_location, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius> &_poiCategories, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails> &_poiAttributes, const std::string &_inputString, const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption &_sortOption, PoiSearchStartedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxSize(_maxSize, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t> deploy_location(_location, static_cast<::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>> deploy_poiCategories(_poiCategories, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>> deploy_poiAttributes(_poiAttributes, static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t>*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inputString(_inputString, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment> deploy_sortOption(_sortOption, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Coordinate3D, ::v4::org::genivi::navigation::NavigationTypes_::Coordinate3DDeployment_t >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::CategoryAndRadius>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::CategoryAndRadiusDeployment_t> >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::AttributeDetailsDeployment_t> >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SortOption, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "poiSearchStarted",
        "uq(ddd)a(uu)a(uui(yv)ib)si",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle, deploy_maxSize, deploy_location, deploy_poiCategories, deploy_poiAttributes, deploy_inputString, deploy_sortOption,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method cancels the search for the current id.
     */
    void POIContentAccessModuleDBusProxy::poiSearchCanceled(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "poiSearchCanceled",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_poiSearchHandle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::poiSearchCanceledAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, PoiSearchCanceledAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "poiSearchCanceled",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_poiSearchHandle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: This method provides the poi results list found by the CAM.         As the POI
     *   unique id is managed by the POI component, the CAM only provides the POI name,
     *   the category and coordinates as well as all the relevant detailed information.
     */
    void POIContentAccessModuleDBusProxy::resultListRequested(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState &_statusValue, uint16_t &_resultListSize, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails> &_resultList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_attributeList(_attributeList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, CommonAPI::EmptyDeployment> deploy_statusValue(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_resultListSize(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>> deploy_resultList(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "resultListRequested",
        "yuau",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_camId, deploy_poiSearchHandle, deploy_attributeList,
_internalCallStatus,
deploy_statusValue, deploy_resultListSize, deploy_resultList);
_statusValue = deploy_statusValue.getValue();
_resultListSize = deploy_resultListSize.getValue();
_resultList = deploy_resultList.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::resultListRequestedAsync(const ::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID &_camId, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_poiSearchHandle, const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID> &_attributeList, ResultListRequestedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment> deploy_camId(_camId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment> deploy_poiSearchHandle(_poiSearchHandle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_attributeList(_attributeList, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, CommonAPI::EmptyDeployment> deploy_statusValue(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_resultListSize(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>> deploy_resultList(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::ContentAccessModuleID, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::AttributeID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "resultListRequested",
        "yuau",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_camId, deploy_poiSearchHandle, deploy_attributeList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchStatusState, CommonAPI::EmptyDeployment> _statusValue, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> _resultListSize, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::PoiCAMDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::PoiCAMDetailsDeployment_t>> _resultList) {
        	if (_callback)
        		_callback(_internalCallStatus, _statusValue.getValue(), _resultListSize.getValue(), _resultList.getValue());
        },
        std::make_tuple(deploy_statusValue, deploy_resultListSize, deploy_resultList));
    }
    /**
     * description: This method retrieves the details associated to one or more POI.         It
     *   contains the name, the parent categories, the list of attributes, the icons,
     *   ... .
     */
    void POIContentAccessModuleDBusProxy::poiDetailsRequested(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails> &_results, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_source_id(_source_id, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
            >
        	>::callMethodWithReply(
        *this,
        "poiDetailsRequested",
        "au",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_source_id,
_internalCallStatus,
deploy_results);
_results = deploy_results.getValue();
}
    std::future<CommonAPI::CallStatus> POIContentAccessModuleDBusProxy::poiDetailsRequestedAsync(const std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID> &_source_id, PoiDetailsRequestedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>> deploy_source_id(_source_id, static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>*>(nullptr));
        CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>> deploy_results(static_cast<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::POI_ID>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>,CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>>
            >
        	>::callMethodAsync(
        *this,
        "poiDetailsRequested",
        "au",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_source_id,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::poiservice::POIServiceTypes::SearchResultDetails>, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::poiservice::POIServiceTypes_::SearchResultDetailsDeployment_t>> _results) {
        	if (_callback)
        		_callback(_internalCallStatus, _results.getValue());
        },
        std::make_tuple(deploy_results));
    }


void POIContentAccessModuleDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 4;
          ownVersionMinor = 0;
      }

      } // namespace poiservice
      } // namespace navigation
      } // namespace genivi
      } // namespace org
      } // namespace v4
