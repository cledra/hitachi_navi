/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers methods that implement the navigation core session
 *   functionality of a navigation system.
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Session_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Session_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#include <v4/org/genivi/navigation/navigationcore/Session.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Session. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class SessionStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Session {
 public:

    /**
     * Sends a broadcast event for sessionDeleted. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireSessionDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Session.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class SessionStubRemoteEvent
{
public:
    virtual ~SessionStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Session to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class SessionStub
    : public virtual CommonAPI::Stub<SessionStubAdapter, SessionStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle)>createSessionReply_t;
    typedef std::function<void ()>deleteSessionReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::SessionStatus _sessionStatus)>getSessionStatusReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Session> _sessionsList)>getAllSessionsReply_t;

    virtual ~SessionStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: This method returns the API version .
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: createSession = This method creates a new session and retrieves a handle .
     */
    /// This is the method that will be called on remote calls on the method createSession.
    virtual void createSession(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _clientApp, createSessionReply_t _reply) = 0;
    /**
     * description: deleteSession = This method deletes a session and its associated resources .
     */
    /// This is the method that will be called on remote calls on the method deleteSession.
    virtual void deleteSession(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, deleteSessionReply_t _reply) = 0;
    /**
     * description: This method returns whether a given session handle is available or not (for
     *   example because it was deleted) .
     */
    /// This is the method that will be called on remote calls on the method getSessionStatus.
    virtual void getSessionStatus(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, getSessionStatusReply_t _reply) = 0;
    /**
     * description: This method returns a list of all available sessions .
     */
    /// This is the method that will be called on remote calls on the method getAllSessions.
    virtual void getAllSessions(const std::shared_ptr<CommonAPI::ClientId> _client, getAllSessionsReply_t _reply) = 0;
    /**
     * description: sessionDeleted = This signal is emitted when a session is deleted
     */
    /// Sends a broadcast event for sessionDeleted.
    virtual void fireSessionDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle) = 0;

    using CommonAPI::Stub<SessionStubAdapter, SessionStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<SessionStubAdapter, SessionStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<SessionStubAdapter, SessionStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef SessionStubRemoteEvent RemoteEventType;
    typedef Session StubInterface;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Session_STUB_HPP_
