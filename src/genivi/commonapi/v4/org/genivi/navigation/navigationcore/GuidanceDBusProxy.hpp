/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Guidance = This interface offers functions that implement the route-guidance
 *   functionality of a navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_DBUS_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_DBUS_PROXY_HPP_

#include <v4/org/genivi/navigation/navigationcore/GuidanceProxyBase.hpp>
#include "v4/org/genivi/navigation/navigationcore/GuidanceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class GuidanceDBusProxy
    : virtual public GuidanceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    GuidanceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~GuidanceDBusProxy() { }


    virtual VehicleLeftTheRoadNetworkEvent& getVehicleLeftTheRoadNetworkEvent();
    virtual GuidanceStatusChangedEvent& getGuidanceStatusChangedEvent();
    virtual WaypointReachedEvent& getWaypointReachedEvent();
    virtual ManeuverChangedEvent& getManeuverChangedEvent();
    virtual PositionOnRouteChangedEvent& getPositionOnRouteChangedEvent();
    virtual VehicleLeftTheRouteEvent& getVehicleLeftTheRouteEvent();
    virtual PositionToRouteChangedEvent& getPositionToRouteChangedEvent();
    virtual ActiveRouteChangedEvent& getActiveRouteChangedEvent();

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: startGuidance = This method starts the guidance for a given route
     */
    virtual void startGuidance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startGuidanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, StartGuidanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: stopGuidance = This method stops the guidance
     */
    virtual void stopGuidance(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopGuidanceAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, StopGuidanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setVoiceGuidance = This method switch on/off the voice guidance
     */
    virtual void setVoiceGuidance(const bool &_activate, const std::string &_voice, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setVoiceGuidanceAsync(const bool &_activate, const std::string &_voice, SetVoiceGuidanceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getGuidanceDetails = This method retrieves guidance information
     */
    virtual void getGuidanceDetails(CommonAPI::CallStatus &_internalCallStatus, bool &_voiceGuidance, bool &_vehicleOnTheRoad, bool &_isDestinationReached, Guidance::ManeuverPhase &_maneuver, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getGuidanceDetailsAsync(GetGuidanceDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: playVoiceManeuver = This method plays or repeats the last voice guidance
     */
    virtual void playVoiceManeuver(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playVoiceManeuverAsync(PlayVoiceManeuverAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getWaypointInformation = This method retrieves the information on the remaining
     *   way points of the route. A point can be the final destination as well as a
     *   stage defined by the user. The returned waypoints are ordered by their
     *   'number'.
     */
    virtual void getWaypointInformation(const uint16_t &_requestedNumberOfWaypoints, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_numberOfWaypoints, std::vector<Guidance::WaypointStruct> &_waypointsList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getWaypointInformationAsync(const uint16_t &_requestedNumberOfWaypoints, GetWaypointInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method retrieves the information on the final destination
     */
    virtual void getDestinationInformation(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_offset, uint32_t &_travelTime, int32_t &_direction, Guidance::Side &_side, int16_t &_timeZone, int16_t &_daylightSavingTime, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDestinationInformationAsync(GetDestinationInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getManeuversList = This method retrieves the list of next maneuvers
     */
    virtual void getManeuversList(const uint16_t &_requestedNumberOfManeuvers, const uint32_t &_maneuverOffset, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_numberOfManeuvers, std::vector<Guidance::Maneuver> &_maneuversList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getManeuversListAsync(const uint16_t &_requestedNumberOfManeuvers, const uint32_t &_maneuverOffset, GetManeuversListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setRouteCalculationMode = This method configures the way the navigation
     *   application wants the navigation core to behave of reroute trigger
     */
    virtual void setRouteCalculationMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const Guidance::CalculationMode &_routeCalculationMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setRouteCalculationModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const Guidance::CalculationMode &_routeCalculationMode, SetRouteCalculationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: skipNextManeuver = This method allows to jump behind the current maneuver
     */
    virtual void skipNextManeuver(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> skipNextManeuverAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, SkipNextManeuverAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getGuidanceStatus = This method retrieves the guidance status
     */
    virtual void getGuidanceStatus(CommonAPI::CallStatus &_internalCallStatus, Guidance::GuidanceStatus &_guidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getGuidanceStatusAsync(GetGuidanceStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
     */
    virtual void setVoiceGuidanceSettings(const Guidance::PromptMode &_promptMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setVoiceGuidanceSettingsAsync(const Guidance::PromptMode &_promptMode, SetVoiceGuidanceSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
     */
    virtual void getVoiceGuidanceSettings(CommonAPI::CallStatus &_internalCallStatus, Guidance::PromptMode &_promptMode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVoiceGuidanceSettingsAsync(GetVoiceGuidanceSettingsAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<VehicleLeftTheRoadNetworkEvent> vehicleLeftTheRoadNetwork_;
    CommonAPI::DBus::DBusEvent<GuidanceStatusChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>> guidanceStatusChanged_;
    CommonAPI::DBus::DBusEvent<WaypointReachedEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> waypointReached_;
    CommonAPI::DBus::DBusEvent<ManeuverChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase, CommonAPI::EmptyDeployment>> maneuverChanged_;
    CommonAPI::DBus::DBusEvent<PositionOnRouteChangedEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>> positionOnRouteChanged_;
    CommonAPI::DBus::DBusEvent<VehicleLeftTheRouteEvent> vehicleLeftTheRoute_;
    CommonAPI::DBus::DBusEvent<PositionToRouteChangedEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> positionToRouteChanged_;
    CommonAPI::DBus::DBusEvent<ActiveRouteChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause, CommonAPI::EmptyDeployment>> activeRouteChanged_;

};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Guidance_DBUS_PROXY_HPP_

