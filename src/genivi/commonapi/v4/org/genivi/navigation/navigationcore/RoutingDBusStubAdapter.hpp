/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers functions that implement the routing functionality of a
 *   navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/navigationcore/RoutingStub.hpp>
#include "v4/org/genivi/navigation/navigationcore/RoutingDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/navigationcore/RoutingDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

typedef CommonAPI::DBus::DBusStubAdapterHelper<RoutingStub> RoutingDBusStubAdapterHelper;

class RoutingDBusStubAdapterInternal
    : public virtual RoutingStubAdapter,
      public RoutingDBusStubAdapterHelper
{
public:
    RoutingDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~RoutingDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return Routing::getInterface();
    }


    /**
     * description: routeDeleted = This signal is emitted to inform clients that the current route
     *   has been deleted
     */
    void fireRouteDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle);
    /**
     * description: routeCalculationCancelled = This signal informs a client that a route
     *   calculation was cancelled
     */
    void fireRouteCalculationCancelledEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle);
    /**
     * description: routeCalculationSuccessful = This signal informs a client that a route
     *   calculation was successful
     */
    void fireRouteCalculationSuccessfulEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference& unfullfilledPreferences);
    /**
     * description: routeCalculationFailed = This signal informs a client that a route calculation
     *   failed
     */
    void fireRouteCalculationFailedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& Handle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationError& errorCode, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference& unfullfilledPreferences);
    /**
     * description: routeCalculationProgressUpdate = This signal informs a client about a route
     *   calculation progress
     */
    void fireRouteCalculationProgressUpdateEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus& status, const uint8_t& percentage);
    /**
     * description: alternativeRoutesAvailable = This signal is emitted when alternative routes
     *   have been computed in the background and are available for guidance.
     */
    void fireAlternativeRoutesAvailableEvent(const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>& routeHandlesList);


    const RoutingDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::RoutingStub,
        CommonAPI::Version
        > getRoutingInterfaceVersionStubDispatcher;



/**
 * description: This method returns the API version implemented by the server application
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: This method creates a route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > createRouteStubDispatcher;
/**
 * description: This method deletes a route and its associated resources
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > deleteRouteStubDispatcher;
/**
 * description: This method sets the cost model
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, Routing::CostModel>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setCostModelStubDispatcher;
/**
 * description: This method retrieves the selected cost model
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<Routing::CostModel>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getCostModelStubDispatcher;
/**
 * description: This method retrieves a list of supported cost models
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<Routing::CostModel>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedCostModelsStubDispatcher;
/**
 * description: This method sets a list of route preferences
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::string, std::vector<Routing::RoutePreference>, std::vector<Routing::ConditionPreference>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>, CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>>,
    std::tuple<>
    
    > setRoutePreferencesStubDispatcher;
/**
 * description: This method retrieves a list of selected route preferences
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::string>,
    std::tuple<std::vector<Routing::RoutePreference>, std::vector<Routing::ConditionPreference>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>, CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>>
    
    > getRoutePreferencesStubDispatcher;
/**
 * description: This method retrieves a list of supported route preferences
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<Routing::RoutePreference>, std::vector<Routing::ConditionPreference>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<Routing_::RoutePreferenceDeployment_t>, CommonAPI::DBus::ArrayDeployment<Routing_::ConditionPreferenceDeployment_t>>
    
    > getSupportedRoutePreferencesStubDispatcher;
/**
 * description: This method sets the time schedule for the route to be calculated
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, Routing::RouteSchedule>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, Routing_::RouteScheduleDeployment_t>,
    std::tuple<>
    
    > setRouteScheduleStubDispatcher;
/**
 * description: This method gets the time schedule for the route to be calculated
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::Schedule>>,
    std::tuple<Routing::RouteSchedule>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<Routing_::RouteScheduleDeployment_t>
    
    > getRouteScheduleStubDispatcher;
/**
 * description: This method sets a list of means of transportation that must be considered when
 *   calculating a route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::TransportationMeans>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<>
    
    > setTransportationMeansStubDispatcher;
/**
 * description: getTransportationMeans = This method retrieves the selected means of
 *   transportation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<Routing::TransportationMeans>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getTransportationMeansStubDispatcher;
/**
 * description: getSupportedTransportationMeans = This method retrieves a list of supported
 *   means of transportation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<Routing::TransportationMeans>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getSupportedTransportationMeansStubDispatcher;
/**
 * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
 *   route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::PolygonDeployment_t>>,
    std::tuple<>
    
    > setExcludedAreasStubDispatcher;
/**
 * description: getExcludedAreas = This method retrieves the areas to be excluded when
 *   calculating a route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<::v4::org::genivi::navigation::NavigationTypes_::PolygonDeployment_t>>
    
    > getExcludedAreasStubDispatcher;
/**
 * description: setWaypoints = This method sets a list of waypoints
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, bool, std::vector<Routing::WayPoint>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::WayPointDeployment_t>>,
    std::tuple<>
    
    > setWaypointsStubDispatcher;
/**
 * description: getWaypoints = This method retrieves a list of waypoints
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<bool, std::vector<Routing::WayPoint>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::WayPointDeployment_t>>
    
    > getWaypointsStubDispatcher;
/**
 * description: calculateRoute = This method starts a route calculation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > calculateRouteStubDispatcher;
/**
 * description: cancelRouteCalculation = This method cancels a route calculation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > cancelRouteCalculationStubDispatcher;
/**
 * description: calculateRoutes = This method allows a client to calculate alternative routes
 *   that differs from a list of already calculated routes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > calculateRoutesStubDispatcher;
/**
 * description: getRouteSegments = This method retrieves a list of segments for a given route
 *   starting from the one closest to the current position to the one closest to
 *   the destination
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, int16_t, std::vector<Routing::RouteSegmentType>, uint32_t, uint32_t>,
    std::tuple<uint32_t, std::vector<Routing::RouteSegment>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::RouteSegmentDeployment_t>>
    
    > getRouteSegmentsStubDispatcher;
/**
 * description: getRouteOverview = This method retrieves general information about a given route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::RouteOverviewType>>,
    std::tuple<Routing::RouteOverview>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<Routing_::RouteOverviewDeployment_t>
    
    > getRouteOverviewStubDispatcher;
/**
 * description: getRouteBoundingBox = This method retrieves the bounding box containing a
 *   calculated route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Rectangle>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes_::RectangleDeployment_t>
    
    > getRouteBoundingBoxStubDispatcher;
/**
 * description: getAllRoutes = This method retrieves the handles of all created routes
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<>,
    std::tuple<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>
    
    > getAllRoutesStubDispatcher;
/**
 * description: setBlockedRouteStretches = This method sets blocked streches on a given route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle, std::vector<Routing::BlockedRouteElement>>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Routing_::BlockedRouteElementDeployment_t>>,
    std::tuple<>
    
    > setBlockedRouteStretchesStubDispatcher;
/**
 * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
 *   given route
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::RoutingStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<std::vector<Routing::BlockedRouteElement>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<Routing_::BlockedRouteElementDeployment_t>>
    
    > getBlockedRouteStretchesStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    RoutingDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class RoutingDBusStubAdapter
    : public RoutingDBusStubAdapterInternal,
      public std::enable_shared_from_this<RoutingDBusStubAdapter> {
public:
    RoutingDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          RoutingDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_DBUS_STUB_ADAPTER_HPP_
