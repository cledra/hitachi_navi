/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers functions that implement the routing functionality of a
 *   navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_DBUS_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_DBUS_PROXY_HPP_

#include <v4/org/genivi/navigation/navigationcore/RoutingProxyBase.hpp>
#include "v4/org/genivi/navigation/navigationcore/RoutingDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class RoutingDBusProxy
    : virtual public RoutingProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    RoutingDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~RoutingDBusProxy() { }


    virtual RouteDeletedEvent& getRouteDeletedEvent();
    virtual RouteCalculationCancelledEvent& getRouteCalculationCancelledEvent();
    virtual RouteCalculationSuccessfulEvent& getRouteCalculationSuccessfulEvent();
    virtual RouteCalculationFailedEvent& getRouteCalculationFailedEvent();
    virtual RouteCalculationProgressUpdateEvent& getRouteCalculationProgressUpdateEvent();
    virtual AlternativeRoutesAvailableEvent& getAlternativeRoutesAvailableEvent();

    /**
     * description: This method returns the API version implemented by the server application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method creates a route
     */
    virtual void createRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> createRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CreateRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method deletes a route and its associated resources
     */
    virtual void deleteRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, DeleteRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method sets the cost model
     */
    virtual void setCostModel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const Routing::CostModel &_costModel, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setCostModelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const Routing::CostModel &_costModel, SetCostModelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method retrieves the selected cost model
     */
    virtual void getCostModel(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, Routing::CostModel &_costModel, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCostModelAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, GetCostModelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method retrieves a list of supported cost models
     */
    virtual void getSupportedCostModels(CommonAPI::CallStatus &_internalCallStatus, std::vector<Routing::CostModel> &_costModelsList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedCostModelsAsync(GetSupportedCostModelsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method sets a list of route preferences
     */
    virtual void setRoutePreferences(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::string &_countryCode, const std::vector<Routing::RoutePreference> &_roadPreferenceList, const std::vector<Routing::ConditionPreference> &_conditionPreferenceList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setRoutePreferencesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::string &_countryCode, const std::vector<Routing::RoutePreference> &_roadPreferenceList, const std::vector<Routing::ConditionPreference> &_conditionPreferenceList, SetRoutePreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method retrieves a list of selected route preferences
     */
    virtual void getRoutePreferences(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::string &_countryCode, CommonAPI::CallStatus &_internalCallStatus, std::vector<Routing::RoutePreference> &_roadPreferenceList, std::vector<Routing::ConditionPreference> &_conditionPreferenceList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRoutePreferencesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::string &_countryCode, GetRoutePreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method retrieves a list of supported route preferences
     */
    virtual void getSupportedRoutePreferences(CommonAPI::CallStatus &_internalCallStatus, std::vector<Routing::RoutePreference> &_routePreferencesList, std::vector<Routing::ConditionPreference> &_conditionPreferenceList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedRoutePreferencesAsync(GetSupportedRoutePreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method sets the time schedule for the route to be calculated
     */
    virtual void setRouteSchedule(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const Routing::RouteSchedule &_routeSchedule, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setRouteScheduleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const Routing::RouteSchedule &_routeSchedule, SetRouteScheduleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method gets the time schedule for the route to be calculated
     */
    virtual void getRouteSchedule(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::Schedule> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, Routing::RouteSchedule &_routeSchedule, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRouteScheduleAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::Schedule> &_valuesToReturn, GetRouteScheduleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method sets a list of means of transportation that must be considered when
     *   calculating a route
     */
    virtual void setTransportationMeans(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::TransportationMeans> &_transportationMeansList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTransportationMeansAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::TransportationMeans> &_transportationMeansList, SetTransportationMeansAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getTransportationMeans = This method retrieves the selected means of
     *   transportation
     */
    virtual void getTransportationMeans(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<Routing::TransportationMeans> &_transportationMeansList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getTransportationMeansAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, GetTransportationMeansAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSupportedTransportationMeans = This method retrieves a list of supported
     *   means of transportation
     */
    virtual void getSupportedTransportationMeans(CommonAPI::CallStatus &_internalCallStatus, std::vector<Routing::TransportationMeans> &_transportationMeansList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSupportedTransportationMeansAsync(GetSupportedTransportationMeansAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
     *   route
     */
    virtual void setExcludedAreas(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon> &_excludedAreas, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setExcludedAreasAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon> &_excludedAreas, SetExcludedAreasAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getExcludedAreas = This method retrieves the areas to be excluded when
     *   calculating a route
     */
    virtual void getExcludedAreas(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon> &_excludedAreas, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getExcludedAreasAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, GetExcludedAreasAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setWaypoints = This method sets a list of waypoints
     */
    virtual void setWaypoints(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_startFromCurrentPosition, const std::vector<Routing::WayPoint> &_waypointsList, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setWaypointsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const bool &_startFromCurrentPosition, const std::vector<Routing::WayPoint> &_waypointsList, SetWaypointsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getWaypoints = This method retrieves a list of waypoints
     */
    virtual void getWaypoints(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, bool &_startFromCurrentPosition, std::vector<Routing::WayPoint> &_waypointsList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getWaypointsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, GetWaypointsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: calculateRoute = This method starts a route calculation
     */
    virtual void calculateRoute(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> calculateRouteAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CalculateRouteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: cancelRouteCalculation = This method cancels a route calculation
     */
    virtual void cancelRouteCalculation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> cancelRouteCalculationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CancelRouteCalculationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: calculateRoutes = This method allows a client to calculate alternative routes
     *   that differs from a list of already calculated routes
     */
    virtual void calculateRoutes(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_calculatedRoutesList, CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_alternativeRoutesList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> calculateRoutesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_calculatedRoutesList, CalculateRoutesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getRouteSegments = This method retrieves a list of segments for a given route
     *   starting from the one closest to the current position to the one closest to
     *   the destination
     */
    virtual void getRouteSegments(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const int16_t &_detailLevel, const std::vector<Routing::RouteSegmentType> &_valuesToReturn, const uint32_t &_numberOfSegments, const uint32_t &_offset, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_totalNumberOfSegments, std::vector<Routing::RouteSegment> &_routeSegments, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRouteSegmentsAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const int16_t &_detailLevel, const std::vector<Routing::RouteSegmentType> &_valuesToReturn, const uint32_t &_numberOfSegments, const uint32_t &_offset, GetRouteSegmentsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getRouteOverview = This method retrieves general information about a given route
     */
    virtual void getRouteOverview(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::RouteOverviewType> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, Routing::RouteOverview &_routeOverview, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRouteOverviewAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::RouteOverviewType> &_valuesToReturn, GetRouteOverviewAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getRouteBoundingBox = This method retrieves the bounding box containing a
     *   calculated route
     */
    virtual void getRouteBoundingBox(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::navigation::NavigationTypes::Rectangle &_boundingBox, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getRouteBoundingBoxAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, GetRouteBoundingBoxAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getAllRoutes = This method retrieves the handles of all created routes
     */
    virtual void getAllRoutes(CommonAPI::CallStatus &_internalCallStatus, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_routesList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAllRoutesAsync(GetAllRoutesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setBlockedRouteStretches = This method sets blocked streches on a given route
     */
    virtual void setBlockedRouteStretches(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::BlockedRouteElement> &_blockParameters, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setBlockedRouteStretchesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const std::vector<Routing::BlockedRouteElement> &_blockParameters, SetBlockedRouteStretchesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
     *   given route
     */
    virtual void getBlockedRouteStretches(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, CommonAPI::CallStatus &_internalCallStatus, std::vector<Routing::BlockedRouteElement> &_blockParameters, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBlockedRouteStretchesAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, GetBlockedRouteStretchesAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<RouteDeletedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>> routeDeleted_;
    CommonAPI::DBus::DBusEvent<RouteCalculationCancelledEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>> routeCalculationCancelled_;
    CommonAPI::DBus::DBusEvent<RouteCalculationSuccessfulEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference, Routing_::UnfullfilledRoutePreferenceDeployment_t>> routeCalculationSuccessful_;
    CommonAPI::DBus::DBusEvent<RouteCalculationFailedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::CalculationError, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference, Routing_::UnfullfilledRoutePreferenceDeployment_t>> routeCalculationFailed_;
    CommonAPI::DBus::DBusEvent<RouteCalculationProgressUpdateEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::NavigationTypes::Handle, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>> routeCalculationProgressUpdate_;
    CommonAPI::DBus::DBusEvent<AlternativeRoutesAvailableEvent, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>> alternativeRoutesAvailable_;

};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_DBUS_PROXY_HPP_

