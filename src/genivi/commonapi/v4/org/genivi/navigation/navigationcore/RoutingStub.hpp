/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: This interface offers functions that implement the routing functionality of a
 *   navigation system
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_STUB_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_STUB_HPP_

#include <functional>



#include <v4/org/genivi/CommonTypes.hpp>
#include <v4/org/genivi/navigation/NavigationTypes.hpp>

#include <v4/org/genivi/navigation/navigationcore/Routing.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Routing. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class RoutingStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual Routing {
 public:

    /**
     * Sends a broadcast event for routeDeleted. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRouteDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle) = 0;
    /**
     * Sends a broadcast event for routeCalculationCancelled. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRouteCalculationCancelledEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle) = 0;
    /**
     * Sends a broadcast event for routeCalculationSuccessful. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRouteCalculationSuccessfulEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference &_unfullfilledPreferences) = 0;
    /**
     * Sends a broadcast event for routeCalculationFailed. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRouteCalculationFailedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_Handle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationError &_errorCode, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference &_unfullfilledPreferences) = 0;
    /**
     * Sends a broadcast event for routeCalculationProgressUpdate. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireRouteCalculationProgressUpdateEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus &_status, const uint8_t &_percentage) = 0;
    /**
     * Sends a broadcast event for alternativeRoutesAvailable. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireAlternativeRoutesAvailableEvent(const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_routeHandlesList) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Routing.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingStubRemoteEvent
{
public:
    virtual ~RoutingStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Routing to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class RoutingStub
    : public virtual CommonAPI::Stub<RoutingStubAdapter, RoutingStubRemoteEvent>
{
public:
    typedef std::function<void (::v4::org::genivi::CommonTypes::Version _version)>getVersionReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle)>createRouteReply_t;
    typedef std::function<void ()>deleteRouteReply_t;
    typedef std::function<void ()>setCostModelReply_t;
    typedef std::function<void (Routing::CostModel _costModel)>getCostModelReply_t;
    typedef std::function<void (std::vector<Routing::CostModel> _costModelsList)>getSupportedCostModelsReply_t;
    typedef std::function<void ()>setRoutePreferencesReply_t;
    typedef std::function<void (std::vector<Routing::RoutePreference> _roadPreferenceList, std::vector<Routing::ConditionPreference> _conditionPreferenceList)>getRoutePreferencesReply_t;
    typedef std::function<void (std::vector<Routing::RoutePreference> _routePreferencesList, std::vector<Routing::ConditionPreference> _conditionPreferenceList)>getSupportedRoutePreferencesReply_t;
    typedef std::function<void ()>setRouteScheduleReply_t;
    typedef std::function<void (Routing::RouteSchedule _routeSchedule)>getRouteScheduleReply_t;
    typedef std::function<void ()>setTransportationMeansReply_t;
    typedef std::function<void (std::vector<Routing::TransportationMeans> _transportationMeansList)>getTransportationMeansReply_t;
    typedef std::function<void (std::vector<Routing::TransportationMeans> _transportationMeansList)>getSupportedTransportationMeansReply_t;
    typedef std::function<void ()>setExcludedAreasReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon> _excludedAreas)>getExcludedAreasReply_t;
    typedef std::function<void ()>setWaypointsReply_t;
    typedef std::function<void (bool _startFromCurrentPosition, std::vector<Routing::WayPoint> _waypointsList)>getWaypointsReply_t;
    typedef std::function<void ()>calculateRouteReply_t;
    typedef std::function<void ()>cancelRouteCalculationReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _alternativeRoutesList)>calculateRoutesReply_t;
    typedef std::function<void (uint32_t _totalNumberOfSegments, std::vector<Routing::RouteSegment> _routeSegments)>getRouteSegmentsReply_t;
    typedef std::function<void (Routing::RouteOverview _routeOverview)>getRouteOverviewReply_t;
    typedef std::function<void (::v4::org::genivi::navigation::NavigationTypes::Rectangle _boundingBox)>getRouteBoundingBoxReply_t;
    typedef std::function<void (std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _routesList)>getAllRoutesReply_t;
    typedef std::function<void ()>setBlockedRouteStretchesReply_t;
    typedef std::function<void (std::vector<Routing::BlockedRouteElement> _blockParameters)>getBlockedRouteStretchesReply_t;

    virtual ~RoutingStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: This method returns the API version implemented by the server application
     */
    /// This is the method that will be called on remote calls on the method getVersion.
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply) = 0;
    /**
     * description: This method creates a route
     */
    /// This is the method that will be called on remote calls on the method createRoute.
    virtual void createRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, createRouteReply_t _reply) = 0;
    /**
     * description: This method deletes a route and its associated resources
     */
    /// This is the method that will be called on remote calls on the method deleteRoute.
    virtual void deleteRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, deleteRouteReply_t _reply) = 0;
    /**
     * description: This method sets the cost model
     */
    /// This is the method that will be called on remote calls on the method setCostModel.
    virtual void setCostModel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, Routing::CostModel _costModel, setCostModelReply_t _reply) = 0;
    /**
     * description: This method retrieves the selected cost model
     */
    /// This is the method that will be called on remote calls on the method getCostModel.
    virtual void getCostModel(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getCostModelReply_t _reply) = 0;
    /**
     * description: This method retrieves a list of supported cost models
     */
    /// This is the method that will be called on remote calls on the method getSupportedCostModels.
    virtual void getSupportedCostModels(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedCostModelsReply_t _reply) = 0;
    /**
     * description: This method sets a list of route preferences
     */
    /// This is the method that will be called on remote calls on the method setRoutePreferences.
    virtual void setRoutePreferences(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::string _countryCode, std::vector<Routing::RoutePreference> _roadPreferenceList, std::vector<Routing::ConditionPreference> _conditionPreferenceList, setRoutePreferencesReply_t _reply) = 0;
    /**
     * description: This method retrieves a list of selected route preferences
     */
    /// This is the method that will be called on remote calls on the method getRoutePreferences.
    virtual void getRoutePreferences(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::string _countryCode, getRoutePreferencesReply_t _reply) = 0;
    /**
     * description: This method retrieves a list of supported route preferences
     */
    /// This is the method that will be called on remote calls on the method getSupportedRoutePreferences.
    virtual void getSupportedRoutePreferences(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedRoutePreferencesReply_t _reply) = 0;
    /**
     * description: This method sets the time schedule for the route to be calculated
     */
    /// This is the method that will be called on remote calls on the method setRouteSchedule.
    virtual void setRouteSchedule(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, Routing::RouteSchedule _routeSchedule, setRouteScheduleReply_t _reply) = 0;
    /**
     * description: This method gets the time schedule for the route to be calculated
     */
    /// This is the method that will be called on remote calls on the method getRouteSchedule.
    virtual void getRouteSchedule(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::Schedule> _valuesToReturn, getRouteScheduleReply_t _reply) = 0;
    /**
     * description: This method sets a list of means of transportation that must be considered when
     *   calculating a route
     */
    /// This is the method that will be called on remote calls on the method setTransportationMeans.
    virtual void setTransportationMeans(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::TransportationMeans> _transportationMeansList, setTransportationMeansReply_t _reply) = 0;
    /**
     * description: getTransportationMeans = This method retrieves the selected means of
     *   transportation
     */
    /// This is the method that will be called on remote calls on the method getTransportationMeans.
    virtual void getTransportationMeans(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getTransportationMeansReply_t _reply) = 0;
    /**
     * description: getSupportedTransportationMeans = This method retrieves a list of supported
     *   means of transportation
     */
    /// This is the method that will be called on remote calls on the method getSupportedTransportationMeans.
    virtual void getSupportedTransportationMeans(const std::shared_ptr<CommonAPI::ClientId> _client, getSupportedTransportationMeansReply_t _reply) = 0;
    /**
     * description: setExcludedAreas = This method sets the areas to be excluded when calculating a
     *   route
     */
    /// This is the method that will be called on remote calls on the method setExcludedAreas.
    virtual void setExcludedAreas(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Polygon> _excludedAreas, setExcludedAreasReply_t _reply) = 0;
    /**
     * description: getExcludedAreas = This method retrieves the areas to be excluded when
     *   calculating a route
     */
    /// This is the method that will be called on remote calls on the method getExcludedAreas.
    virtual void getExcludedAreas(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getExcludedAreasReply_t _reply) = 0;
    /**
     * description: setWaypoints = This method sets a list of waypoints
     */
    /// This is the method that will be called on remote calls on the method setWaypoints.
    virtual void setWaypoints(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, bool _startFromCurrentPosition, std::vector<Routing::WayPoint> _waypointsList, setWaypointsReply_t _reply) = 0;
    /**
     * description: getWaypoints = This method retrieves a list of waypoints
     */
    /// This is the method that will be called on remote calls on the method getWaypoints.
    virtual void getWaypoints(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getWaypointsReply_t _reply) = 0;
    /**
     * description: calculateRoute = This method starts a route calculation
     */
    /// This is the method that will be called on remote calls on the method calculateRoute.
    virtual void calculateRoute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, calculateRouteReply_t _reply) = 0;
    /**
     * description: cancelRouteCalculation = This method cancels a route calculation
     */
    /// This is the method that will be called on remote calls on the method cancelRouteCalculation.
    virtual void cancelRouteCalculation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, cancelRouteCalculationReply_t _reply) = 0;
    /**
     * description: calculateRoutes = This method allows a client to calculate alternative routes
     *   that differs from a list of already calculated routes
     */
    /// This is the method that will be called on remote calls on the method calculateRoutes.
    virtual void calculateRoutes(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> _calculatedRoutesList, calculateRoutesReply_t _reply) = 0;
    /**
     * description: getRouteSegments = This method retrieves a list of segments for a given route
     *   starting from the one closest to the current position to the one closest to
     *   the destination
     */
    /// This is the method that will be called on remote calls on the method getRouteSegments.
    virtual void getRouteSegments(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, int16_t _detailLevel, std::vector<Routing::RouteSegmentType> _valuesToReturn, uint32_t _numberOfSegments, uint32_t _offset, getRouteSegmentsReply_t _reply) = 0;
    /**
     * description: getRouteOverview = This method retrieves general information about a given route
     */
    /// This is the method that will be called on remote calls on the method getRouteOverview.
    virtual void getRouteOverview(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::RouteOverviewType> _valuesToReturn, getRouteOverviewReply_t _reply) = 0;
    /**
     * description: getRouteBoundingBox = This method retrieves the bounding box containing a
     *   calculated route
     */
    /// This is the method that will be called on remote calls on the method getRouteBoundingBox.
    virtual void getRouteBoundingBox(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getRouteBoundingBoxReply_t _reply) = 0;
    /**
     * description: getAllRoutes = This method retrieves the handles of all created routes
     */
    /// This is the method that will be called on remote calls on the method getAllRoutes.
    virtual void getAllRoutes(const std::shared_ptr<CommonAPI::ClientId> _client, getAllRoutesReply_t _reply) = 0;
    /**
     * description: setBlockedRouteStretches = This method sets blocked streches on a given route
     */
    /// This is the method that will be called on remote calls on the method setBlockedRouteStretches.
    virtual void setBlockedRouteStretches(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, std::vector<Routing::BlockedRouteElement> _blockParameters, setBlockedRouteStretchesReply_t _reply) = 0;
    /**
     * description: getBlockedRouteStretches = This method retrieves all blocked streches on a
     *   given route
     */
    /// This is the method that will be called on remote calls on the method getBlockedRouteStretches.
    virtual void getBlockedRouteStretches(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _routeHandle, getBlockedRouteStretchesReply_t _reply) = 0;
    /**
     * description: routeDeleted = This signal is emitted to inform clients that the current route
     *   has been deleted
     */
    /// Sends a broadcast event for routeDeleted.
    virtual void fireRouteDeletedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle) = 0;
    /**
     * description: routeCalculationCancelled = This signal informs a client that a route
     *   calculation was cancelled
     */
    /// Sends a broadcast event for routeCalculationCancelled.
    virtual void fireRouteCalculationCancelledEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle) = 0;
    /**
     * description: routeCalculationSuccessful = This signal informs a client that a route
     *   calculation was successful
     */
    /// Sends a broadcast event for routeCalculationSuccessful.
    virtual void fireRouteCalculationSuccessfulEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference &_unfullfilledPreferences) = 0;
    /**
     * description: routeCalculationFailed = This signal informs a client that a route calculation
     *   failed
     */
    /// Sends a broadcast event for routeCalculationFailed.
    virtual void fireRouteCalculationFailedEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_Handle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationError &_errorCode, const ::v4::org::genivi::navigation::navigationcore::Routing::UnfullfilledRoutePreference &_unfullfilledPreferences) = 0;
    /**
     * description: routeCalculationProgressUpdate = This signal informs a client about a route
     *   calculation progress
     */
    /// Sends a broadcast event for routeCalculationProgressUpdate.
    virtual void fireRouteCalculationProgressUpdateEvent(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_routeHandle, const ::v4::org::genivi::navigation::navigationcore::Routing::CalculationStatus &_status, const uint8_t &_percentage) = 0;
    /**
     * description: alternativeRoutesAvailable = This signal is emitted when alternative routes
     *   have been computed in the background and are available for guidance.
     */
    /// Sends a broadcast event for alternativeRoutesAvailable.
    virtual void fireAlternativeRoutesAvailableEvent(const std::vector<::v4::org::genivi::navigation::NavigationTypes::Handle> &_routeHandlesList) = 0;

    using CommonAPI::Stub<RoutingStubAdapter, RoutingStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<RoutingStubAdapter, RoutingStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<RoutingStubAdapter, RoutingStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef RoutingStubRemoteEvent RemoteEventType;
    typedef Routing StubInterface;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Routing_STUB_HPP_
