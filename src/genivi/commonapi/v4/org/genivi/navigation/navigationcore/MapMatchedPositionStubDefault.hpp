/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201608040617.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapMatchedPosition = This interface offers functions to retrieve the map
 *   matched position and to simulate positioning
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_STUB_DEFAULT_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_STUB_DEFAULT_HPP_


#include <v4/org/genivi/navigation/navigationcore/MapMatchedPositionStub.hpp>
#include <sstream>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

/**
 * Provides a default implementation for MapMatchedPositionStubRemoteEvent and
 * MapMatchedPositionStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class MapMatchedPositionStubDefault
    : public virtual MapMatchedPositionStub {
public:
    MapMatchedPositionStubDefault();

    MapMatchedPositionStubRemoteEvent* initStubAdapter(const std::shared_ptr<MapMatchedPositionStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(const std::shared_ptr<CommonAPI::ClientId> _client, getVersionReply_t _reply);
    /**
     * description: setSimulationMode = This method activates or deactivates the simulation mode
     */
    virtual void setSimulationMode(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, bool _activate, setSimulationModeReply_t _reply);
    /**
     * description: getSimulationStatus = This method retrieves the simulation status
     */
    virtual void getSimulationStatus(const std::shared_ptr<CommonAPI::ClientId> _client, getSimulationStatusReply_t _reply);
    /**
     * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
     *   changes.
     */
    virtual void addSimulationStatusListener(const std::shared_ptr<CommonAPI::ClientId> _client, addSimulationStatusListenerReply_t _reply);
    /**
     * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
     *   Status changes.
     */
    virtual void removeSimulationStatusListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeSimulationStatusListenerReply_t _reply);
    /**
     * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
     */
    virtual void setSimulationSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, uint8_t _speedFactor, setSimulationSpeedReply_t _reply);
    /**
     * description: getSimulationSpeed = returns the speed factor for the simulation mode
     */
    virtual void getSimulationSpeed(const std::shared_ptr<CommonAPI::ClientId> _client, getSimulationSpeedReply_t _reply);
    /**
     * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
     *   factor changes.
     */
    virtual void addSimulationSpeedListener(const std::shared_ptr<CommonAPI::ClientId> _client, addSimulationSpeedListenerReply_t _reply);
    /**
     * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
     *   speed factor changes.
     */
    virtual void removeSimulationSpeedListener(const std::shared_ptr<CommonAPI::ClientId> _client, removeSimulationSpeedListenerReply_t _reply);
    /**
     * description: startSimulation = This method starts, or resumes, a Follow Active Route
     *   simulation
     */
    virtual void startSimulation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, startSimulationReply_t _reply);
    /**
     * description: pauseSimulation = This method freezes the current location
     */
    virtual void pauseSimulation(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, pauseSimulationReply_t _reply);
    /**
     * description: getPosition = This method returns the current position
     */
    virtual void getPosition(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionItemKey> _valuesToReturn, getPositionReply_t _reply);
    /**
     * description: setPosition = This method sets the position to a specific location
     */
    virtual void setPosition(const std::shared_ptr<CommonAPI::ClientId> _client, ::v4::org::genivi::navigation::NavigationTypes::Handle _sessionHandle, MapMatchedPosition::PositionItemDict _position, setPositionReply_t _reply);
    /**
     * description: getAddress = This method returns the current address
     */
    virtual void getCurrentAddress(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::AddressItemKey> _valuesToReturn, getCurrentAddressReply_t _reply);
    /**
     * description: positionOnSegment = This method returns the vehicle position on a route segment
     */
    virtual void getPositionOnSegment(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionOnSegmentKey> _valuesToReturn, getPositionOnSegmentReply_t _reply);
    /**
     * description: getStatus = This method returns the current status
     */
    virtual void getStatus(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<MapMatchedPosition::PositionStatus> _valuesToReturn, getStatusReply_t _reply);

/**
 * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
 *   changed
 */
virtual void fireSimulationStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus &_simulationStatus);
/**
 * description: simulationSpeedChanged = This signal is emitted when the simulation speed
 *   factor has changed
 */
virtual void fireSimulationSpeedChangedEvent(const uint8_t &_speedFactor);
/**
 * description: positionUpdate = This signal is called to notify a client application of a
 *   position change. The update frequency is implementation specific. The maximal
 *   allowed frequency is 10Hz
 */
virtual void firePositionUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey> &_changedValues);
/**
 * description: addressUpdate = This signal is called to notify a client application that the
 *   current address changed
 */
virtual void fireAddressUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey> &_changedValues);
/**
 * description: positionOnSegmentUpdate = This signal is called to notify the client that the
 *   vehicle position on the route segment changed
 */
virtual void firePositionOnSegmentUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey> &_changedValues);
/**
 * description: statusUpdate = This signal is emitted to notifiy a client application that the
 *   current status changed
 */
virtual void fireStatusUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus> &_changedValues);
/**
 * description: offroadPositionChanged = This signal is emitted when the heading and the
 *   distance to the closest point on the road network changes
 */
virtual void fireOffRoadPositionChangedEvent(const uint32_t &_distance, const int32_t &_direction);


protected:
    class RemoteEventHandler: public virtual MapMatchedPositionStubRemoteEvent {
    public:
        RemoteEventHandler(MapMatchedPositionStubDefault *_defaultStub);


    private:
        MapMatchedPositionStubDefault *defaultStub_;
    };
private:
    MapMatchedPositionStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4


// Compatibility
namespace v4_0 = v4;

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_STUB_DEFAULT
