/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v4/org/genivi/navigation/navigationcore/Guidance.hpp>
#include <v4/org/genivi/navigation/navigationcore/GuidanceDBusStubAdapter.hpp>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createGuidanceDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<GuidanceDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerGuidanceDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	Guidance::getInterface(), &createGuidanceDBusStubAdapter);
}

GuidanceDBusStubAdapterInternal::~GuidanceDBusStubAdapterInternal() {
    deactivateManagedInstances();
    GuidanceDBusStubAdapterHelper::deinit();
}

void GuidanceDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* GuidanceDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: vehicleLeftTheRoadNetwork = This signal is emitted when the vehicle exits from
         *   the road network
         */
        "<signal name=\"vehicleLeftTheRoadNetwork\">\n"
        "</signal>\n"
        /**
         * description: guidanceStatusChanged = This signal is emitted when the guidance status changes
         */
        "<signal name=\"guidanceStatusChanged\">\n"
            "<arg name=\"guidanceStatus\" type=\"i\" />\n"
            "<arg name=\"routeHandle\" type=\"u\" />\n"
        "</signal>\n"
        /**
         * description: waypointReached = This signal is emitted when the destination is reached
         */
        "<signal name=\"waypointReached\">\n"
            "<arg name=\"isDestination\" type=\"b\" />\n"
        "</signal>\n"
        /**
         * description: This signal is emitted each time a maneuver event is going
         */
        "<signal name=\"maneuverChanged\">\n"
            "<arg name=\"maneuver\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: positionOnRouteChanged = This signal is emitted when the position on the route
         *   changes
         */
        "<signal name=\"positionOnRouteChanged\">\n"
            "<arg name=\"offsetOnRoute\" type=\"u\" />\n"
        "</signal>\n"
        /**
         * description: vehicleLeftTheRoute = This signal is emitted when the vehicle has left the route
         */
        "<signal name=\"vehicleLeftTheRoute\">\n"
        "</signal>\n"
        /**
         * description: positionToRouteChanged = This signal is emitted when the vehicle is
         *   off-the-road network and either the heading or the distance (or both) to the
         *   closest point on the active route changes
         */
        "<signal name=\"positionToRouteChanged\">\n"
            "<arg name=\"distance\" type=\"u\" />\n"
            "<arg name=\"direction\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: activeRouteChanged = This signal is emitted when the active route changes
         */
        "<signal name=\"activeRouteChanged\">\n"
            "<arg name=\"changeCause\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: getVersion = This method returns the API version implemented by the server
         *   application
         */
        "<method name=\"getVersion\">\n"
            "<arg name=\"_version\" type=\"(qqqs)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: startGuidance = This method starts the guidance for a given route
         */
        "<method name=\"startGuidance\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: stopGuidance = This method stops the guidance
         */
        "<method name=\"stopGuidance\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: setVoiceGuidance = This method switch on/off the voice guidance
         */
        "<method name=\"setVoiceGuidance\">\n"
            "<arg name=\"_activate\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_voice\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getGuidanceDetails = This method retrieves guidance information
         */
        "<method name=\"getGuidanceDetails\">\n"
            "<arg name=\"_voiceGuidance\" type=\"b\" direction=\"out\" />\n"
            "<arg name=\"_vehicleOnTheRoad\" type=\"b\" direction=\"out\" />\n"
            "<arg name=\"_isDestinationReached\" type=\"b\" direction=\"out\" />\n"
            "<arg name=\"_maneuver\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: playVoiceManeuver = This method plays or repeats the last voice guidance
         */
        "<method name=\"playVoiceManeuver\">\n"
        "</method>\n"
        /**
         * description: getWaypointInformation = This method retrieves the information on the remaining
         *   way points of the route. A point can be the final destination as well as a
         *   stage defined by the user. The returned waypoints are ordered by their
         *   'number'.
         */
        "<method name=\"getWaypointInformation\">\n"
            "<arg name=\"_requestedNumberOfWaypoints\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_numberOfWaypoints\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_waypointsList\" type=\"a(uuiinnbq)\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: This method retrieves the information on the final destination
         */
        "<method name=\"getDestinationInformation\">\n"
            "<arg name=\"_offset\" type=\"u\" direction=\"out\" />\n"
            "<arg name=\"_travelTime\" type=\"u\" direction=\"out\" />\n"
            "<arg name=\"_direction\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_side\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_timeZone\" type=\"n\" direction=\"out\" />\n"
            "<arg name=\"_daylightSavingTime\" type=\"n\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: getManeuversList = This method retrieves the list of next maneuvers
         */
        "<method name=\"getManeuversList\">\n"
            "<arg name=\"_requestedNumberOfManeuvers\" type=\"q\" direction=\"in\" />\n"
            "<arg name=\"_maneuverOffset\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_numberOfManeuvers\" type=\"q\" direction=\"out\" />\n"
            "<arg name=\"_maneuversList\" type=\"a(ssiiua(uuiia{i(yv)}))\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setRouteCalculationMode = This method configures the way the navigation
         *   application wants the navigation core to behave of reroute trigger
         */
        "<method name=\"setRouteCalculationMode\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_routeCalculationMode\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: skipNextManeuver = This method allows to jump behind the current maneuver
         */
        "<method name=\"skipNextManeuver\">\n"
            "<arg name=\"_sessionHandle\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getGuidanceStatus = This method retrieves the guidance status
         */
        "<method name=\"getGuidanceStatus\">\n"
            "<arg name=\"_guidanceStatus\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_routeHandle\" type=\"u\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
         */
        "<method name=\"setVoiceGuidanceSettings\">\n"
            "<arg name=\"_promptMode\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
         */
        "<method name=\"getVoiceGuidanceSettings\">\n"
            "<arg name=\"_promptMode\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
        CommonAPI::Version
        > GuidanceDBusStubAdapterInternal::getGuidanceInterfaceVersionStubDispatcher(&GuidanceStub::getInterfaceVersion, "uu");




/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > GuidanceDBusStubAdapterInternal::getVersionStubDispatcher(
    &GuidanceStub::getVersion, "(qqqs)",
					std::make_tuple(),
                	std::make_tuple(static_cast<::v4::org::genivi::CommonTypes_::VersionDeployment_t*>(nullptr)));

/**
 * description: startGuidance = This method starts the guidance for a given route
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::startGuidanceStubDispatcher(
    &GuidanceStub::startGuidance, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: stopGuidance = This method stops the guidance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::stopGuidanceStubDispatcher(
    &GuidanceStub::stopGuidance, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: setVoiceGuidance = This method switch on/off the voice guidance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<bool, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::setVoiceGuidanceStubDispatcher(
    &GuidanceStub::setVoiceGuidance, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getGuidanceDetails = This method retrieves guidance information
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<bool, bool, bool, Guidance::ManeuverPhase>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > GuidanceDBusStubAdapterInternal::getGuidanceDetailsStubDispatcher(
    &GuidanceStub::getGuidanceDetails, "bbbi",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: playVoiceManeuver = This method plays or repeats the last voice guidance
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::playVoiceManeuverStubDispatcher(
    &GuidanceStub::playVoiceManeuver, "",
					std::make_tuple(),
                	std::make_tuple());

/**
 * description: getWaypointInformation = This method retrieves the information on the remaining
 *   way points of the route. A point can be the final destination as well as a
 *   stage defined by the user. The returned waypoints are ordered by their
 *   'number'.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<uint16_t>,
    std::tuple<uint16_t, std::vector<Guidance::WaypointStruct>>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>>
    
    > GuidanceDBusStubAdapterInternal::getWaypointInformationStubDispatcher(
    &GuidanceStub::getWaypointInformation, "qa(uuiinnbq)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Guidance_::WaypointStructDeployment_t>*>(nullptr)));

/**
 * description: This method retrieves the information on the final destination
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<uint32_t, uint32_t, int32_t, Guidance::Side, int16_t, int16_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > GuidanceDBusStubAdapterInternal::getDestinationInformationStubDispatcher(
    &GuidanceStub::getDestinationInformation, "uuiinn",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: getManeuversList = This method retrieves the list of next maneuvers
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<uint16_t, uint32_t>,
    std::tuple<uint16_t, std::vector<Guidance::Maneuver>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>>
    
    > GuidanceDBusStubAdapterInternal::getManeuversListStubDispatcher(
    &GuidanceStub::getManeuversList, "qa(ssiiua(uuiia{i(yv)}))",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<Guidance_::ManeuverDeployment_t>*>(nullptr)));

/**
 * description: setRouteCalculationMode = This method configures the way the navigation
 *   application wants the navigation core to behave of reroute trigger
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, Guidance::CalculationMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::setRouteCalculationModeStubDispatcher(
    &GuidanceStub::setRouteCalculationMode, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: skipNextManeuver = This method allows to jump behind the current maneuver
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::skipNextManeuverStubDispatcher(
    &GuidanceStub::skipNextManeuver, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getGuidanceStatus = This method retrieves the guidance status
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<Guidance::GuidanceStatus, ::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>
    
    > GuidanceDBusStubAdapterInternal::getGuidanceStatusStubDispatcher(
    &GuidanceStub::getGuidanceStatus, "iu",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<Guidance::PromptMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > GuidanceDBusStubAdapterInternal::setVoiceGuidanceSettingsStubDispatcher(
    &GuidanceStub::setVoiceGuidanceSettings, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::GuidanceStub,
    std::tuple<>,
    std::tuple<Guidance::PromptMode>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > GuidanceDBusStubAdapterInternal::getVoiceGuidanceSettingsStubDispatcher(
    &GuidanceStub::getVoiceGuidanceSettings, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));



/**
 * description: vehicleLeftTheRoadNetwork = This signal is emitted when the vehicle exits from
 *   the road network
 */
void GuidanceDBusStubAdapterInternal::fireVehicleLeftTheRoadNetworkEvent() {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    >>::sendSignal(
            *this,
            "vehicleLeftTheRoadNetwork",
            ""
    );
}
/**
 * description: guidanceStatusChanged = This signal is emitted when the guidance status changes
 */
void GuidanceDBusStubAdapterInternal::fireGuidanceStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus& guidanceStatus, const ::v4::org::genivi::navigation::NavigationTypes::Handle& routeHandle) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::navigationcore::Guidance::GuidanceStatus,
    ::v4::org::genivi::navigation::NavigationTypes::Handle
    >>::sendSignal(
            *this,
            "guidanceStatusChanged",
            "iu",
    guidanceStatus,
    routeHandle
    );
}
/**
 * description: waypointReached = This signal is emitted when the destination is reached
 */
void GuidanceDBusStubAdapterInternal::fireWaypointReachedEvent(const bool& isDestination) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    bool
    >>::sendSignal(
            *this,
            "waypointReached",
            "b",
    isDestination
    );
}
/**
 * description: This signal is emitted each time a maneuver event is going
 */
void GuidanceDBusStubAdapterInternal::fireManeuverChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase& maneuver) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::navigationcore::Guidance::ManeuverPhase
    >>::sendSignal(
            *this,
            "maneuverChanged",
            "i",
    maneuver
    );
}
/**
 * description: positionOnRouteChanged = This signal is emitted when the position on the route
 *   changes
 */
void GuidanceDBusStubAdapterInternal::firePositionOnRouteChangedEvent(const uint32_t& offsetOnRoute) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint32_t
    >>::sendSignal(
            *this,
            "positionOnRouteChanged",
            "u",
    offsetOnRoute
    );
}
/**
 * description: vehicleLeftTheRoute = This signal is emitted when the vehicle has left the route
 */
void GuidanceDBusStubAdapterInternal::fireVehicleLeftTheRouteEvent() {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    >>::sendSignal(
            *this,
            "vehicleLeftTheRoute",
            ""
    );
}
/**
 * description: positionToRouteChanged = This signal is emitted when the vehicle is
 *   off-the-road network and either the heading or the distance (or both) to the
 *   closest point on the active route changes
 */
void GuidanceDBusStubAdapterInternal::firePositionToRouteChangedEvent(const uint32_t& distance, const int32_t& direction) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    uint32_t,
    int32_t
    >>::sendSignal(
            *this,
            "positionToRouteChanged",
            "ui",
    distance,
    direction
    );
}
/**
 * description: activeRouteChanged = This signal is emitted when the active route changes
 */
void GuidanceDBusStubAdapterInternal::fireActiveRouteChangedEvent(const ::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause& changeCause) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v4::org::genivi::navigation::navigationcore::Guidance::RouteChangedCause
    >>::sendSignal(
            *this,
            "activeRouteChanged",
            "i",
    changeCause
    );
}


const GuidanceDBusStubAdapterHelper::StubDispatcherTable& GuidanceDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& GuidanceDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

GuidanceDBusStubAdapterInternal::GuidanceDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      GuidanceDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<GuidanceStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: getVersion = This method returns the API version implemented by the server
             *   application
             */
            { { "getVersion", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getVersionStubDispatcher },
            /**
             * description: startGuidance = This method starts the guidance for a given route
             */
            { { "startGuidance", "uu" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::startGuidanceStubDispatcher },
            /**
             * description: stopGuidance = This method stops the guidance
             */
            { { "stopGuidance", "u" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::stopGuidanceStubDispatcher },
            /**
             * description: setVoiceGuidance = This method switch on/off the voice guidance
             */
            { { "setVoiceGuidance", "bs" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::setVoiceGuidanceStubDispatcher },
            /**
             * description: getGuidanceDetails = This method retrieves guidance information
             */
            { { "getGuidanceDetails", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getGuidanceDetailsStubDispatcher },
            /**
             * description: playVoiceManeuver = This method plays or repeats the last voice guidance
             */
            { { "playVoiceManeuver", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::playVoiceManeuverStubDispatcher },
            /**
             * description: getWaypointInformation = This method retrieves the information on the remaining
             *   way points of the route. A point can be the final destination as well as a
             *   stage defined by the user. The returned waypoints are ordered by their
             *   'number'.
             */
            { { "getWaypointInformation", "q" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getWaypointInformationStubDispatcher },
            /**
             * description: This method retrieves the information on the final destination
             */
            { { "getDestinationInformation", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getDestinationInformationStubDispatcher },
            /**
             * description: getManeuversList = This method retrieves the list of next maneuvers
             */
            { { "getManeuversList", "qu" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getManeuversListStubDispatcher },
            /**
             * description: setRouteCalculationMode = This method configures the way the navigation
             *   application wants the navigation core to behave of reroute trigger
             */
            { { "setRouteCalculationMode", "ui" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::setRouteCalculationModeStubDispatcher },
            /**
             * description: skipNextManeuver = This method allows to jump behind the current maneuver
             */
            { { "skipNextManeuver", "u" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::skipNextManeuverStubDispatcher },
            /**
             * description: getGuidanceStatus = This method retrieves the guidance status
             */
            { { "getGuidanceStatus", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getGuidanceStatusStubDispatcher },
            /**
             * description: setVoiceGuidanceSettings = This method sets the voice guidance settings
             */
            { { "setVoiceGuidanceSettings", "i" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::setVoiceGuidanceSettingsStubDispatcher },
            /**
             * description: getVoiceGuidanceSettings = This method returns the used voice guidance settings
             */
            { { "getVoiceGuidanceSettings", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getVoiceGuidanceSettingsStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::navigation::navigationcore::GuidanceDBusStubAdapterInternal::getGuidanceInterfaceVersionStubDispatcher });
}

bool GuidanceDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4
