/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapMatchedPosition = This interface offers functions to retrieve the map
 *   matched position and to simulate positioning
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_DBUS_STUB_ADAPTER_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_DBUS_STUB_ADAPTER_HPP_

#include <v4/org/genivi/navigation/navigationcore/MapMatchedPositionStub.hpp>
#include "v4/org/genivi/navigation/navigationcore/MapMatchedPositionDBusDeployment.hpp"        
#include <v4/org/genivi/CommonTypesDBusDeployment.hpp>
#include <v4/org/genivi/navigation/navigationcore/MapMatchedPositionDBusDeployment.hpp>
#include <v4/org/genivi/navigation/NavigationTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

typedef CommonAPI::DBus::DBusStubAdapterHelper<MapMatchedPositionStub> MapMatchedPositionDBusStubAdapterHelper;

class MapMatchedPositionDBusStubAdapterInternal
    : public virtual MapMatchedPositionStubAdapter,
      public MapMatchedPositionDBusStubAdapterHelper
{
public:
    MapMatchedPositionDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~MapMatchedPositionDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return MapMatchedPosition::getInterface();
    }


    /**
     * description: simulationStatusChanged = This signal is emitted when the Simulation Status has
     *   changed
     */
    void fireSimulationStatusChangedEvent(const ::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus& simulationStatus);
    /**
     * description: simulationSpeedChanged = This signal is emitted when the simulation speed
     *   factor has changed
     */
    void fireSimulationSpeedChangedEvent(const uint8_t& speedFactor);
    /**
     * description: positionUpdate = This signal is called to notify a client application of a
     *   position change. The update frequency is implementation specific. The maximal
     *   allowed frequency is 10Hz
     */
    void firePositionUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>& changedValues);
    /**
     * description: addressUpdate = This signal is called to notify a client application that the
     *   current address changed
     */
    void fireAddressUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>& changedValues);
    /**
     * description: positionOnSegmentUpdate = This signal is called to notify the client that the
     *   vehicle position on the route segment changed
     */
    void firePositionOnSegmentUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>& changedValues);
    /**
     * description: statusUpdate = This signal is emitted to notifiy a client application that the
     *   current status changed
     */
    void fireStatusUpdateEvent(const std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>& changedValues);
    /**
     * description: offroadPositionChanged = This signal is emitted when the heading and the
     *   distance to the closest point on the road network changes
     */
    void fireOffRoadPositionChangedEvent(const uint32_t& distance, const int32_t& direction);


    const MapMatchedPositionDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
        CommonAPI::Version
        > getMapMatchedPositionInterfaceVersionStubDispatcher;



/**
 * description: getVersion = This method returns the API version implemented by the server
 *   application
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes::Version>,
    std::tuple<>,
    std::tuple<::v4::org::genivi::CommonTypes_::VersionDeployment_t>
    
    > getVersionStubDispatcher;
/**
 * description: setSimulationMode = This method activates or deactivates the simulation mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setSimulationModeStubDispatcher;
/**
 * description: getSimulationStatus = This method retrieves the simulation status
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<MapMatchedPosition::SimulationStatus>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getSimulationStatusStubDispatcher;
/**
 * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
 *   changes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > addSimulationStatusListenerStubDispatcher;
/**
 * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
 *   Status changes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > removeSimulationStatusListenerStubDispatcher;
/**
 * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > setSimulationSpeedStubDispatcher;
/**
 * description: getSimulationSpeed = returns the speed factor for the simulation mode
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<uint8_t>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > getSimulationSpeedStubDispatcher;
/**
 * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
 *   factor changes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > addSimulationSpeedListenerStubDispatcher;
/**
 * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
 *   speed factor changes.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>,
    std::tuple<>
    
    > removeSimulationSpeedListenerStubDispatcher;
/**
 * description: startSimulation = This method starts, or resumes, a Follow Active Route
 *   simulation
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > startSimulationStubDispatcher;
/**
 * description: pauseSimulation = This method freezes the current location
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > pauseSimulationStubDispatcher;
/**
 * description: getPosition = This method returns the current position
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::PositionItemKey>>,
    std::tuple<MapMatchedPosition::PositionItemDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::PositionItemDictDeployment_t>
    
    > getPositionStubDispatcher;
/**
 * description: setPosition = This method sets the position to a specific location
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<::v4::org::genivi::navigation::NavigationTypes::Handle, MapMatchedPosition::PositionItemDict>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, MapMatchedPosition_::PositionItemDictDeployment_t>,
    std::tuple<>
    
    > setPositionStubDispatcher;
/**
 * description: getAddress = This method returns the current address
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::AddressItemKey>>,
    std::tuple<MapMatchedPosition::AddressItemDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::AddressItemDictDeployment_t>
    
    > getCurrentAddressStubDispatcher;
/**
 * description: positionOnSegment = This method returns the vehicle position on a route segment
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::PositionOnSegmentKey>>,
    std::tuple<MapMatchedPosition::PositionOnSegmentDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::PositionOnSegmentDictDeployment_t>
    
    > getPositionOnSegmentStubDispatcher;
/**
 * description: getStatus = This method returns the current status
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v4::org::genivi::navigation::navigationcore::MapMatchedPositionStub,
    std::tuple<std::vector<MapMatchedPosition::PositionStatus>>,
    std::tuple<MapMatchedPosition::PositionStatusDict>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>,
    std::tuple<MapMatchedPosition_::PositionStatusDictDeployment_t>
    
    > getStatusStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    MapMatchedPositionDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class MapMatchedPositionDBusStubAdapter
    : public MapMatchedPositionDBusStubAdapterInternal,
      public std::enable_shared_from_this<MapMatchedPositionDBusStubAdapter> {
public:
    MapMatchedPositionDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          MapMatchedPositionDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_DBUS_STUB_ADAPTER_HPP_
