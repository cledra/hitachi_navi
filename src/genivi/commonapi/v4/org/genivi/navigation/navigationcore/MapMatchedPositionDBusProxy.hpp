/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201608040619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: MapMatchedPosition = This interface offers functions to retrieve the map
 *   matched position and to simulate positioning
 */
#ifndef V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_DBUS_PROXY_HPP_
#define V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_DBUS_PROXY_HPP_

#include <v4/org/genivi/navigation/navigationcore/MapMatchedPositionProxyBase.hpp>
#include "v4/org/genivi/navigation/navigationcore/MapMatchedPositionDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v4 {
namespace org {
namespace genivi {
namespace navigation {
namespace navigationcore {

class MapMatchedPositionDBusProxy
    : virtual public MapMatchedPositionProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MapMatchedPositionDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MapMatchedPositionDBusProxy() { }


    virtual SimulationStatusChangedEvent& getSimulationStatusChangedEvent();
    virtual SimulationSpeedChangedEvent& getSimulationSpeedChangedEvent();
    virtual PositionUpdateEvent& getPositionUpdateEvent();
    virtual AddressUpdateEvent& getAddressUpdateEvent();
    virtual PositionOnSegmentUpdateEvent& getPositionOnSegmentUpdateEvent();
    virtual StatusUpdateEvent& getStatusUpdateEvent();
    virtual OffRoadPositionChangedEvent& getOffRoadPositionChangedEvent();

    /**
     * description: getVersion = This method returns the API version implemented by the server
     *   application
     */
    virtual void getVersion(CommonAPI::CallStatus &_internalCallStatus, ::v4::org::genivi::CommonTypes::Version &_version, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionAsync(GetVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setSimulationMode = This method activates or deactivates the simulation mode
     */
    virtual void setSimulationMode(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const bool &_activate, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSimulationModeAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const bool &_activate, SetSimulationModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSimulationStatus = This method retrieves the simulation status
     */
    virtual void getSimulationStatus(CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::SimulationStatus &_simulationStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSimulationStatusAsync(GetSimulationStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: AddSimulationStatusListener = Add this node as a listener to Simulation Status
     *   changes.
     */
    virtual void addSimulationStatusListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addSimulationStatusListenerAsync(AddSimulationStatusListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: RemoveSimulationStatusListener = Remove this node as a listener to Simulation
     *   Status changes.
     */
    virtual void removeSimulationStatusListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> removeSimulationStatusListenerAsync(RemoveSimulationStatusListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setSimulationSpeed = This method sets the speed factor for the simulation mode
     */
    virtual void setSimulationSpeed(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const uint8_t &_speedFactor, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSimulationSpeedAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const uint8_t &_speedFactor, SetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSimulationSpeed = returns the speed factor for the simulation mode
     */
    virtual void getSimulationSpeed(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_speedFactor, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSimulationSpeedAsync(GetSimulationSpeedAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: AddSimulationSpeedListener = Add this node as a listener to simulation speed
     *   factor changes.
     */
    virtual void addSimulationSpeedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addSimulationSpeedListenerAsync(AddSimulationSpeedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: RemoveSimulationSpeedListener = Remove this node as a listener to simulation
     *   speed factor changes.
     */
    virtual void removeSimulationSpeedListener(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> removeSimulationSpeedListenerAsync(RemoveSimulationSpeedListenerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: startSimulation = This method starts, or resumes, a Follow Active Route
     *   simulation
     */
    virtual void startSimulation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startSimulationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, StartSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: pauseSimulation = This method freezes the current location
     */
    virtual void pauseSimulation(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseSimulationAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, PauseSimulationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getPosition = This method returns the current position
     */
    virtual void getPosition(const std::vector<MapMatchedPosition::PositionItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::PositionItemDict &_position, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPositionAsync(const std::vector<MapMatchedPosition::PositionItemKey> &_valuesToReturn, GetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setPosition = This method sets the position to a specific location
     */
    virtual void setPosition(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapMatchedPosition::PositionItemDict &_position, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setPositionAsync(const ::v4::org::genivi::navigation::NavigationTypes::Handle &_sessionHandle, const MapMatchedPosition::PositionItemDict &_position, SetPositionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getAddress = This method returns the current address
     */
    virtual void getCurrentAddress(const std::vector<MapMatchedPosition::AddressItemKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::AddressItemDict &_address, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCurrentAddressAsync(const std::vector<MapMatchedPosition::AddressItemKey> &_valuesToReturn, GetCurrentAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: positionOnSegment = This method returns the vehicle position on a route segment
     */
    virtual void getPositionOnSegment(const std::vector<MapMatchedPosition::PositionOnSegmentKey> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::PositionOnSegmentDict &_positionOnSegment, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPositionOnSegmentAsync(const std::vector<MapMatchedPosition::PositionOnSegmentKey> &_valuesToReturn, GetPositionOnSegmentAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getStatus = This method returns the current status
     */
    virtual void getStatus(const std::vector<MapMatchedPosition::PositionStatus> &_valuesToReturn, CommonAPI::CallStatus &_internalCallStatus, MapMatchedPosition::PositionStatusDict &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getStatusAsync(const std::vector<MapMatchedPosition::PositionStatus> &_valuesToReturn, GetStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<SimulationStatusChangedEvent, CommonAPI::Deployable<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::SimulationStatus, CommonAPI::EmptyDeployment>> simulationStatusChanged_;
    CommonAPI::DBus::DBusEvent<SimulationSpeedChangedEvent, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>> simulationSpeedChanged_;
    CommonAPI::DBus::DBusEvent<PositionUpdateEvent, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>> positionUpdate_;
    CommonAPI::DBus::DBusEvent<AddressUpdateEvent, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::AddressItemKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>> addressUpdate_;
    CommonAPI::DBus::DBusEvent<PositionOnSegmentUpdateEvent, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionOnSegmentKey>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>> positionOnSegmentUpdate_;
    CommonAPI::DBus::DBusEvent<StatusUpdateEvent, CommonAPI::Deployable<std::vector<::v4::org::genivi::navigation::navigationcore::MapMatchedPosition::PositionStatus>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>> statusUpdate_;
    CommonAPI::DBus::DBusEvent<OffRoadPositionChangedEvent, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int32_t, CommonAPI::EmptyDeployment>> offRoadPositionChanged_;

};

} // namespace navigationcore
} // namespace navigation
} // namespace genivi
} // namespace org
} // namespace v4

#endif // V4_ORG_GENIVI_NAVIGATION_NAVIGATIONCORE_Map_Matched_Position_DBUS_PROXY_HPP_

