
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__genivi_navicore_session_proxy_h__PROXY_MARSHAL_H
#define __dbusxx__genivi_navicore_session_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace navigationcore {

class Session_proxy
: public ::DBus::InterfaceProxy
{
public:

    Session_proxy()
    : ::DBus::InterfaceProxy("org.genivi.navigationcore.Session")
    {
        connect_signal(Session_proxy, SessionDeleted, _SessionDeleted_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout;
        ri >> argout;
        return argout;
    }

    uint32_t CreateSession(const std::string& client)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client;
        call.member("CreateSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void DeleteSession(const uint32_t& sessionHandle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        call.member("DeleteSession");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetSessionStatus(const uint32_t& sessionHandle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        call.member("GetSessionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Struct< uint32_t, std::string > > GetAllSessions()
    {
        ::DBus::CallMessage call;
        call.member("GetAllSessions");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Struct< uint32_t, std::string > > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SessionDeleted(const uint32_t& sessionHandle) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SessionDeleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionHandle;
        ri >> sessionHandle;
        SessionDeleted(sessionHandle);
    }
};

} } } 
#endif //__dbusxx__genivi_navicore_session_proxy_h__PROXY_MARSHAL_H
