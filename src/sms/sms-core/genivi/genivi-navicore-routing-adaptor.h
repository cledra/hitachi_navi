
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__genivi_routing_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__genivi_routing_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace navigationcore {

class Routing_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Routing_adaptor()
    : ::DBus::InterfaceAdaptor("org.genivi.navigationcore.Routing")
    {
        register_method(Routing_adaptor, GetVersion, _GetVersion_stub);
        register_method(Routing_adaptor, CreateRoute, _CreateRoute_stub);
        register_method(Routing_adaptor, DeleteRoute, _DeleteRoute_stub);
        register_method(Routing_adaptor, SetCostModel, _SetCostModel_stub);
        register_method(Routing_adaptor, GetCostModel, _GetCostModel_stub);
        register_method(Routing_adaptor, GetSupportedCostModels, _GetSupportedCostModels_stub);
        register_method(Routing_adaptor, SetRoutePreferences, _SetRoutePreferences_stub);
        register_method(Routing_adaptor, GetRoutePreferences, _GetRoutePreferences_stub);
        register_method(Routing_adaptor, GetSupportedRoutePreferences, _GetSupportedRoutePreferences_stub);
        register_method(Routing_adaptor, SetRouteSchedule, _SetRouteSchedule_stub);
        register_method(Routing_adaptor, GetRouteSchedule, _GetRouteSchedule_stub);
        register_method(Routing_adaptor, SetTransportationMeans, _SetTransportationMeans_stub);
        register_method(Routing_adaptor, GetTransportationMeans, _GetTransportationMeans_stub);
        register_method(Routing_adaptor, GetSupportedTransportationMeans, _GetSupportedTransportationMeans_stub);
        register_method(Routing_adaptor, SetExcludedAreas, _SetExcludedAreas_stub);
        register_method(Routing_adaptor, GetExcludedAreas, _GetExcludedAreas_stub);
        register_method(Routing_adaptor, SetWaypoints, _SetWaypoints_stub);
        register_method(Routing_adaptor, GetWaypoints, _GetWaypoints_stub);
        register_method(Routing_adaptor, CalculateRoute, _CalculateRoute_stub);
        register_method(Routing_adaptor, CancelRouteCalculation, _CancelRouteCalculation_stub);
        register_method(Routing_adaptor, CalculateRoutes, _CalculateRoutes_stub);
        register_method(Routing_adaptor, GetRouteSegments, _GetRouteSegments_stub);
        register_method(Routing_adaptor, GetRouteOverview, _GetRouteOverview_stub);
        register_method(Routing_adaptor, GetRouteBoundingBox, _GetRouteBoundingBox_stub);
        register_method(Routing_adaptor, GetAllRoutes, _GetAllRoutes_stub);
        register_method(Routing_adaptor, SetBlockedRouteStretches, _SetBlockedRouteStretches_stub);
        register_method(Routing_adaptor, GetBlockedRouteStretches, _GetBlockedRouteStretches_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument GetVersion_args[] = 
        {
            { "version", "(qqqs)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CreateRoute_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DeleteRoute_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetCostModel_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "costModel", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetCostModel_args[] = 
        {
            { "routeHandle", "u", true },
            { "costModel", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSupportedCostModels_args[] = 
        {
            { "costModelsList", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetRoutePreferences_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "countryCode", "s", true },
            { "roadPreferenceList", "a(ii)", true },
            { "conditionPreferenceList", "a(ii)", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRoutePreferences_args[] = 
        {
            { "routeHandle", "u", true },
            { "countryCode", "s", true },
            { "roadPreferenceList", "a(ii)", false },
            { "conditionPreferenceList", "a(ii)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSupportedRoutePreferences_args[] = 
        {
            { "routePreferencesList", "a(ii)", false },
            { "conditionPreferenceList", "a(ii)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetRouteSchedule_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "routeSchedule", "a{iu}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRouteSchedule_args[] = 
        {
            { "routeHandle", "u", true },
            { "valuesToReturn", "ai", true },
            { "routeSchedule", "a{iu}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetTransportationMeans_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "transportationMeansList", "ai", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetTransportationMeans_args[] = 
        {
            { "routeHandle", "u", true },
            { "transportationMeansList", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSupportedTransportationMeans_args[] = 
        {
            { "transportationMeansList", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetExcludedAreas_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "excludedAreas", "aa(dd)", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetExcludedAreas_args[] = 
        {
            { "routeHandle", "u", true },
            { "excludedAreas", "aa(dd)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetWaypoints_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "startFromCurrentPosition", "b", true },
            { "waypointsList", "aa{i(yv)}", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetWaypoints_args[] = 
        {
            { "routeHandle", "u", true },
            { "startFromCurrentPosition", "b", false },
            { "waypointsList", "aa{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CalculateRoute_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CancelRouteCalculation_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CalculateRoutes_args[] = 
        {
            { "sessionHandle", "u", true },
            { "calculatedRoutesList", "au", true },
            { "alternativeRoutesList", "au", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRouteSegments_args[] = 
        {
            { "routeHandle", "u", true },
            { "detailLevel", "n", true },
            { "valuesToReturn", "ai", true },
            { "numberOfSegments", "u", true },
            { "offset", "u", true },
            { "totalNumberOfSegments", "u", false },
            { "routeSegments", "aa{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRouteOverview_args[] = 
        {
            { "routeHandle", "u", true },
            { "valuesToReturn", "ai", true },
            { "routeOverview", "a{i(yv)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRouteBoundingBox_args[] = 
        {
            { "routeHandle", "u", true },
            { "boundingBox", "((dd)(dd))", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetAllRoutes_args[] = 
        {
            { "routesList", "au", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetBlockedRouteStretches_args[] = 
        {
            { "sessionHandle", "u", true },
            { "routeHandle", "u", true },
            { "blockParameters", "a(uu)", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetBlockedRouteStretches_args[] = 
        {
            { "routeHandle", "u", true },
            { "blockParameters", "a(uu)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RouteDeleted_args[] = 
        {
            { "routeHandle", "u", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RouteCalculationCancelled_args[] = 
        {
            { "routeHandle", "u", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RouteCalculationSuccessful_args[] = 
        {
            { "routeHandle", "u", false },
            { "unfullfilledPreferences", "a{ii}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RouteCalculationFailed_args[] = 
        {
            { "routeHandle", "u", false },
            { "errorCode", "i", false },
            { "unfullfilledPreferences", "a{ii}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RouteCalculationProgressUpdate_args[] = 
        {
            { "routeHandle", "u", false },
            { "status", "i", false },
            { "percentage", "y", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AlternativeRoutesAvailable_args[] = 
        {
            { "routeHandlesList", "au", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Routing_adaptor_methods[] = 
        {
            { "GetVersion", GetVersion_args },
            { "CreateRoute", CreateRoute_args },
            { "DeleteRoute", DeleteRoute_args },
            { "SetCostModel", SetCostModel_args },
            { "GetCostModel", GetCostModel_args },
            { "GetSupportedCostModels", GetSupportedCostModels_args },
            { "SetRoutePreferences", SetRoutePreferences_args },
            { "GetRoutePreferences", GetRoutePreferences_args },
            { "GetSupportedRoutePreferences", GetSupportedRoutePreferences_args },
            { "SetRouteSchedule", SetRouteSchedule_args },
            { "GetRouteSchedule", GetRouteSchedule_args },
            { "SetTransportationMeans", SetTransportationMeans_args },
            { "GetTransportationMeans", GetTransportationMeans_args },
            { "GetSupportedTransportationMeans", GetSupportedTransportationMeans_args },
            { "SetExcludedAreas", SetExcludedAreas_args },
            { "GetExcludedAreas", GetExcludedAreas_args },
            { "SetWaypoints", SetWaypoints_args },
            { "GetWaypoints", GetWaypoints_args },
            { "CalculateRoute", CalculateRoute_args },
            { "CancelRouteCalculation", CancelRouteCalculation_args },
            { "CalculateRoutes", CalculateRoutes_args },
            { "GetRouteSegments", GetRouteSegments_args },
            { "GetRouteOverview", GetRouteOverview_args },
            { "GetRouteBoundingBox", GetRouteBoundingBox_args },
            { "GetAllRoutes", GetAllRoutes_args },
            { "SetBlockedRouteStretches", SetBlockedRouteStretches_args },
            { "GetBlockedRouteStretches", GetBlockedRouteStretches_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Routing_adaptor_signals[] = 
        {
            { "RouteDeleted", RouteDeleted_args },
            { "RouteCalculationCancelled", RouteCalculationCancelled_args },
            { "RouteCalculationSuccessful", RouteCalculationSuccessful_args },
            { "RouteCalculationFailed", RouteCalculationFailed_args },
            { "RouteCalculationProgressUpdate", RouteCalculationProgressUpdate_args },
            { "AlternativeRoutesAvailable", AlternativeRoutesAvailable_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Routing_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Routing_adaptor_interface = 
        {
            "org.genivi.navigationcore.Routing",
            Routing_adaptor_methods,
            Routing_adaptor_signals,
            Routing_adaptor_properties
        };
        return &Routing_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion() = 0;
    virtual uint32_t CreateRoute(const uint32_t& sessionHandle) = 0;
    virtual void DeleteRoute(const uint32_t& sessionHandle, const uint32_t& routeHandle) = 0;
    virtual void SetCostModel(const uint32_t& sessionHandle, const uint32_t& routeHandle, const int32_t& costModel) = 0;
    virtual int32_t GetCostModel(const uint32_t& routeHandle) = 0;
    virtual std::vector< int32_t > GetSupportedCostModels() = 0;
    virtual void SetRoutePreferences(const uint32_t& sessionHandle, const uint32_t& routeHandle, const std::string& countryCode, const std::vector< ::DBus::Struct< int32_t, int32_t > >& roadPreferenceList, const std::vector< ::DBus::Struct< int32_t, int32_t > >& conditionPreferenceList) = 0;
    virtual void GetRoutePreferences(const uint32_t& routeHandle, const std::string& countryCode, std::vector< ::DBus::Struct< int32_t, int32_t > >& roadPreferenceList, std::vector< ::DBus::Struct< int32_t, int32_t > >& conditionPreferenceList) = 0;
    virtual void GetSupportedRoutePreferences(std::vector< ::DBus::Struct< int32_t, int32_t > >& routePreferencesList, std::vector< ::DBus::Struct< int32_t, int32_t > >& conditionPreferenceList) = 0;
    virtual void SetRouteSchedule(const uint32_t& sessionHandle, const uint32_t& routeHandle, const std::map< int32_t, uint32_t >& routeSchedule) = 0;
    virtual std::map< int32_t, uint32_t > GetRouteSchedule(const uint32_t& routeHandle, const std::vector< int32_t >& valuesToReturn) = 0;
    virtual void SetTransportationMeans(const uint32_t& sessionHandle, const uint32_t& routeHandle, const std::vector< int32_t >& transportationMeansList) = 0;
    virtual std::vector< int32_t > GetTransportationMeans(const uint32_t& routeHandle) = 0;
    virtual std::vector< int32_t > GetSupportedTransportationMeans() = 0;
    virtual void SetExcludedAreas(const uint32_t& sessionHandle, const uint32_t& routeHandle, const std::vector< std::vector< ::DBus::Struct< double, double > > >& excludedAreas) = 0;
    virtual std::vector< std::vector< ::DBus::Struct< double, double > > > GetExcludedAreas(const uint32_t& routeHandle) = 0;
    virtual void SetWaypoints(const uint32_t& sessionHandle, const uint32_t& routeHandle, const bool& startFromCurrentPosition, const std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > >& waypointsList) = 0;
    virtual void GetWaypoints(const uint32_t& routeHandle, bool& startFromCurrentPosition, std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > >& waypointsList) = 0;
    virtual void CalculateRoute(const uint32_t& sessionHandle, const uint32_t& routeHandle) = 0;
    virtual void CancelRouteCalculation(const uint32_t& sessionHandle, const uint32_t& routeHandle) = 0;
    virtual std::vector< uint32_t > CalculateRoutes(const uint32_t& sessionHandle, const std::vector< uint32_t >& calculatedRoutesList) = 0;
    virtual void GetRouteSegments(const uint32_t& routeHandle, const int16_t& detailLevel, const std::vector< int32_t >& valuesToReturn, const uint32_t& numberOfSegments, const uint32_t& offset, uint32_t& totalNumberOfSegments, std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > >& routeSegments) = 0;
    virtual std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetRouteOverview(const uint32_t& routeHandle, const std::vector< int32_t >& valuesToReturn) = 0;
    virtual ::DBus::Struct< ::DBus::Struct< double, double >, ::DBus::Struct< double, double > > GetRouteBoundingBox(const uint32_t& routeHandle) = 0;
    virtual std::vector< uint32_t > GetAllRoutes() = 0;
    virtual void SetBlockedRouteStretches(const uint32_t& sessionHandle, const uint32_t& routeHandle, const std::vector< ::DBus::Struct< uint32_t, uint32_t > >& blockParameters) = 0;
    virtual std::vector< ::DBus::Struct< uint32_t, uint32_t > > GetBlockedRouteStretches(const uint32_t& routeHandle) = 0;

public:

    /* signal emitters for this interface
     */
    void RouteDeleted(const uint32_t& arg1)
    {
        ::DBus::SignalMessage sig("RouteDeleted");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void RouteCalculationCancelled(const uint32_t& arg1)
    {
        ::DBus::SignalMessage sig("RouteCalculationCancelled");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void RouteCalculationSuccessful(const uint32_t& arg1, const std::map< int32_t, int32_t >& arg2)
    {
        ::DBus::SignalMessage sig("RouteCalculationSuccessful");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        emit_signal(sig);
    }
    void RouteCalculationFailed(const uint32_t& arg1, const int32_t& arg2, const std::map< int32_t, int32_t >& arg3)
    {
        ::DBus::SignalMessage sig("RouteCalculationFailed");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void RouteCalculationProgressUpdate(const uint32_t& arg1, const int32_t& arg2, const uint8_t& arg3)
    {
        ::DBus::SignalMessage sig("RouteCalculationProgressUpdate");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }
    void AlternativeRoutesAvailable(const std::vector< uint32_t >& arg1)
    {
        ::DBus::SignalMessage sig("AlternativeRoutesAvailable");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetVersion_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout1 = GetVersion();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _CreateRoute_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argout1 = CreateRoute(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _DeleteRoute_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        DeleteRoute(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _SetCostModel_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        int32_t argin3; ri >> argin3;
        SetCostModel(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetCostModel_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        int32_t argout1 = GetCostModel(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSupportedCostModels_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argout1 = GetSupportedCostModels();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetRoutePreferences_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        std::vector< ::DBus::Struct< int32_t, int32_t > > argin4; ri >> argin4;
        std::vector< ::DBus::Struct< int32_t, int32_t > > argin5; ri >> argin5;
        SetRoutePreferences(argin1, argin2, argin3, argin4, argin5);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetRoutePreferences_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        std::vector< ::DBus::Struct< int32_t, int32_t > > argout1;
        std::vector< ::DBus::Struct< int32_t, int32_t > > argout2;
        GetRoutePreferences(argin1, argin2, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _GetSupportedRoutePreferences_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< ::DBus::Struct< int32_t, int32_t > > argout1;
        std::vector< ::DBus::Struct< int32_t, int32_t > > argout2;
        GetSupportedRoutePreferences(argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _SetRouteSchedule_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::map< int32_t, uint32_t > argin3; ri >> argin3;
        SetRouteSchedule(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetRouteSchedule_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::vector< int32_t > argin2; ri >> argin2;
        std::map< int32_t, uint32_t > argout1 = GetRouteSchedule(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetTransportationMeans_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::vector< int32_t > argin3; ri >> argin3;
        SetTransportationMeans(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetTransportationMeans_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::vector< int32_t > argout1 = GetTransportationMeans(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSupportedTransportationMeans_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< int32_t > argout1 = GetSupportedTransportationMeans();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetExcludedAreas_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::vector< std::vector< ::DBus::Struct< double, double > > > argin3; ri >> argin3;
        SetExcludedAreas(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetExcludedAreas_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::vector< std::vector< ::DBus::Struct< double, double > > > argout1 = GetExcludedAreas(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetWaypoints_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        bool argin3; ri >> argin3;
        std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > > argin4; ri >> argin4;
        SetWaypoints(argin1, argin2, argin3, argin4);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetWaypoints_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        bool argout1;
        std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > > argout2;
        GetWaypoints(argin1, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _CalculateRoute_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        CalculateRoute(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _CancelRouteCalculation_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        CancelRouteCalculation(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _CalculateRoutes_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::vector< uint32_t > argin2; ri >> argin2;
        std::vector< uint32_t > argout1 = CalculateRoutes(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetRouteSegments_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        int16_t argin2; ri >> argin2;
        std::vector< int32_t > argin3; ri >> argin3;
        uint32_t argin4; ri >> argin4;
        uint32_t argin5; ri >> argin5;
        uint32_t argout1;
        std::vector< std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > > argout2;
        GetRouteSegments(argin1, argin2, argin3, argin4, argin5, argout1, argout2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        wi << argout2;
        return reply;
    }
    ::DBus::Message _GetRouteOverview_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::vector< int32_t > argin2; ri >> argin2;
        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout1 = GetRouteOverview(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetRouteBoundingBox_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        ::DBus::Struct< ::DBus::Struct< double, double >, ::DBus::Struct< double, double > > argout1 = GetRouteBoundingBox(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetAllRoutes_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< uint32_t > argout1 = GetAllRoutes();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetBlockedRouteStretches_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        uint32_t argin2; ri >> argin2;
        std::vector< ::DBus::Struct< uint32_t, uint32_t > > argin3; ri >> argin3;
        SetBlockedRouteStretches(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetBlockedRouteStretches_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint32_t argin1; ri >> argin1;
        std::vector< ::DBus::Struct< uint32_t, uint32_t > > argout1 = GetBlockedRouteStretches(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } 
#endif //__dbusxx__genivi_routing_adaptor_h__ADAPTOR_MARSHAL_H
